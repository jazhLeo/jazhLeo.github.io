[{"title":"用 python 写一个exe应用程序 - SuperEncoding","date":"2017-06-28T09:41:27.000Z","path":"2017/06/28/python_SuperEncoding/","text":"作为程序员，能写个程序解决日常需求还是很开心的。这边把应用程序和代码分享下。代码简单到仅仅实现了功能，方便小伙伴们阅读。 程序诞生背景公司女同事在传文件到服务器时总会因为编码问题导致上传或者显示出错。有一次找到我，说起出错这件事，我写了个python的脚本帮她测了下文件编码，发现出错的文件大部分都是编码不正确导致的。这件事过后我抽了个时间。把之前的脚本改成了一个exe可执行程序，这样就省得来找我测编码了（对，没错，注孤生）。 程序简介选择文件，显示文件编码信息。听起来很简单对吧，嗯，写起来也很简单。 实现思路我们需要干三件事1.python 获取文件编码信息的代码（其实就是几行代码~）2.通过 GUI 实现选择文件显示编码信息（我这里选择的 Tkinter）3.打包成 exe（我这里选择的PyInstaller） 资源 获取方式 获取地址 备注 github SuperEncoding_github 百度云 SuperEncoding_百度云 提取码: bcyj","tags":[{"name":"工具","slug":"工具","permalink":"http://ev1l.cn/tags/工具/"},{"name":"python","slug":"python","permalink":"http://ev1l.cn/tags/python/"}]},{"title":"Windows 及 Office 激活 —— KMS","date":"2017-06-01T09:43:35.000Z","path":"2017/06/01/crackWindows10/","text":"一款强大的 windows、office 激活软件—KMS 简单介绍一下：激活windows、office 并可以自己建立计划任务每隔一段时间自动重新激活一次（激活时间180天）。 进入软件选择KMSAuto Net -&gt; Activation -&gt; Activate windows (office) 倔强的相信自己能找到激活码，奈何现实告诉我不如老老实实的用KMS…… 下载方式 下载地址 备注 百度云 KMS Tools 提取码: e86k","tags":[{"name":"工具","slug":"工具","permalink":"http://ev1l.cn/tags/工具/"}]},{"title":"国内无备案网站使用畅言评论系统","date":"2017-05-12T23:50:28.000Z","path":"2017/05/13/changyancrack/","text":"本来朋友圈说昨晚把教程发出来，结果……到家后衣服都没脱就睡了。早上五点恢复意识，磨蹭到7点才打开电脑。 背景畅言评论系统是搜狐搞出来的一个免费的评论系统，对于小站不想花精力去做评论系统的人确实很方便。类似的评论系统常用的有：多说、网易云跟帖、友言等。多说团队宣布2017年6月1日正式关闭服务，不巧的是我用的也是多说，所以开始了辗转之旅。多番体验后选择使用畅言，网易云跟帖的风格让我感觉跟blog格格不入也是一方面因素。 适合人群： github建站未购买私人域名无法备案 已拥有国内域名但因种种原因没有备案 原理利用畅言网站备案审核后的白名单机制让自己的网站也能使用畅言。是的，如果你比较聪明的话，看到这里你应该知道该怎么搞了。 细节正常注册畅言用户这一步跳过了，确实没什么可说的 提交申请 因为我已经审核通过，所以上面显示已通过，不用纠结这一点。关于备案，我当初用baidu站点尝试，完全是想法的尝试没想那么多。不过若畅言团队封掉同一站点网址多个实例注册的话，审核很容易就不通过了。建议去使用一些其他站点的备案信息。备案信息获取可百度：备案信息查询。随便找域名，拿来备案信息就用~然后提交审核，耐心等待审核通过。 修改域名白名单 审核通过完毕后，按照图中方式修改域名白名单，然后等待官方确认修改的通知。收到通知后，你的就可以开心的使用畅言了~ 已知小问题无法在本地调适时，即 localhost 访问时显示评论，不过不影响使用。如果大家有解决方案欢迎告诉我~","tags":[{"name":"工具","slug":"工具","permalink":"http://ev1l.cn/tags/工具/"},{"name":"音乐","slug":"音乐","permalink":"http://ev1l.cn/tags/音乐/"}]},{"title":"那些萦绕在我记忆里的一些歌曲(未完 更于2017-04-27)","date":"2017-04-26T16:19:49.000Z","path":"2017/04/27/sgbtLC/","text":"他让她住在他的心上，走到哪里便带到哪里，记忆有多久，她便有多么长寿。 蛮喜欢下雨天，小时候总是疯疯癫癫的跑出去淋雨。 长大了，一个人的时候总会望着窗外的雨出神，有时会想着谁，有时不知道该想想谁。 一旦发生过这样的事情，便很难在下雨天抑制住自己的思绪。 有时会想让自己不去想，那种空灵的感觉总是让人没办法拒绝又会浪费掉精力和时间。 印象中克制的最好的一次大概是听着吵吵的音乐，在雨中阴沉着脸赶路吧。 汪苏泷、徐良和许嵩。好多人为了凸显自己的音乐品味对他们嗤之以鼻。 现在喊麦的mc们也被骂的很惨，我不觉得自己多有品位。 讨厌的东西我不会去听，也不会去关注相关的任何讯息，我不喜欢你，所以我的世界里没有你，很简单。 当初他们三位的歌曲陪伴我度过了一个又一个周末，一个又一个朝阳到余晖。 现在再听起他们的歌，不会像当初那么陶醉，也没有青涩时期的画面扑面而来，情绪也不会跟着歌曲进入副歌而忽起波澜。 像评论里说的：“现在听没有那时的感觉了。真的是回不去了[心碎]。” 我始终觉得，让你困在过去的歌曲，不是你应该听的歌。 我在听的，多半是这段回不去的路，和这路上的每一步吧。 梁静茹的歌总是会让你体会到那种纯粹的感情 “我可以假装看不见，也可以偷偷的想念” “知了也睡了，安心的睡了” 那时的我们，向往着这种连空气都会变得很轻松的感情。 当初单纯，幸运的是，我们嘴边哼着的歌，还要更单纯。 当年被胡彦斌这骚气的声线与唱法镇住了，听了一次想忘都难。 当初有一个可以打电话点歌、点视频的互动电视频道，视频平均4分钟左右一段，2元点一次。 在没人点播的时候，为了怕观众无聊，放的就是这首胡彦斌的歌，当下俗称的BMG就是它了。 如果你想看一集动画片，你可能要点4-5次才能看完一集。 想想当初挺有意思的，每天守着这个台，有一集没一集的跟着点播的土豪瞎看。 有时看一集动画可能会被插播进来七八次歌曲MV，时间成本也蛮高的。 守着电视的小伙伴们也慢慢的有了默契，只要你点了动画片的第一part，总会有其他小伙伴帮你点完。 众筹的思想在小朋友的身上已经生根发芽了。 那时我还听不懂。 现在想想： “太多的借口” “太多的理由” “为了爱情我也背叛了所有” “如果你想离开我” “就别再畏畏缩缩” 乍一听，是一个痴情人被爱情折磨的终于不想承受的故事。 可是仔细想想，如果真想离开你，还会找借口和理由吗？ 既已不再留恋，何必处处遮掩？ 你含泪看着对方的时候，又怎知对方不是在含泪望着你。 悄悄地喜欢一个人 把握的恰到好处 刚好瞒着他的同时，被全世界看穿了自己 在那个人身上用尽了我们能表达出来的所有情绪 把每一个电视剧里的故事都在脑海中排练了一遍 一个不经意的动作，一句很自然的话 能让自己对着自己在脑海中低语很久 思绪随着天色浅浅有了光亮 才叹着气睡去 其实，我们只是刚好在那个时候 需要完全陌生的人 来感动自己 不是我们做了那么多，最后却只感动了自己 而是我们所做的一切，都只是为了感动自己","tags":[{"name":"音乐","slug":"音乐","permalink":"http://ev1l.cn/tags/音乐/"},{"name":"Leo","slug":"Leo","permalink":"http://ev1l.cn/tags/Leo/"}]},{"title":"给程序员的 30 个基本 Python 贴士与技巧","date":"2017-04-18T16:16:01.000Z","path":"2017/04/19/python_30_tips/","text":"如果你已经在用 python 了，相信这篇 blog 会对你有帮助的。如果你还没有使用 python，相信看完下面 python 的实现，你会觉得编程也是一件幸福的事：） 如果你让一个 Python 程序员说一下 Python 的优势，他会说简洁以及高可读是最有影响力的优势。为证明上述两点，在这个 Python 教程里，我们将聊聊许多基本的 Python 建议和技巧。 我们从开始使用 Python 便收集这些有用的捷径（贴士与技巧）。分享一些我们知道，同时又能造福于人的知识，有什么事情比这更棒吗？ 过去我们分享过 一些 给初学者的 Python 编程贴士 旨在优化代码并且减少编码工作，我们的读者仍旧很乐意阅读它。 所以今天我们带来另一些基本的 Python 贴士与技巧，所有的这些技巧都能帮助你压缩代码并且优化运行。此外，你可以在日常工作中很容易地在真实项目中使用他们。 每一个技巧都有一个示例并且给出简短的解释，如果要测试这些代码片段，你可以看一下这些 在线虚拟 Python 运行终端。 最近我们发布的另两个必看的 Python 资源： 💡 9 种优化 Python 代码的主要方式 💡 发现在编程时应该避免的最常见的错误 给程序员的 30 个基本 Python 贴士与技巧贴士#1. 原地交换两个数字Python 提供了一个直观的在一行代码中赋值与交换（变量值）的方法，请参见下面的示例： 12345678x, y = 10, 20print(x, y)x, y = y, xprint(x, y)#1 (10, 20)#2 (20, 10) 赋值的右侧形成了一个新的元组，左侧立即解析（unpack）那个（未被引用的）元组到变量 &lt;a&gt; 和 &lt;b&gt;。 一旦赋值完成，新的元组变成了未被引用状态并且被标记为可被垃圾回收，最终也完成了变量的交换。 贴士#2. 链状比较操作符比较操作符的聚合是另一个有时很方便的技巧： 12345678910n = 10result = 1 &lt; n &lt; 20print(result)# Trueresult = 1 &gt; n &lt;= 9print(result)# False 贴士#3. 使用三元操作符来进行条件赋值三元操作符是 if-else 语句也就是条件操作符的一个快捷方式： 1[表达式为真的返回值] if [表达式] else [表达式为假的返回值] 这里给出几个你可以用来使代码紧凑简洁的例子。下面的语句是说“如果 y 是 9，给 x 赋值 10，不然赋值为 20”。如果需要的话我们也可以延长这条操作链。 1x = 10 if (y == 9) else 20 同样地，我们可以对类做这种操作： 1x = (classA if y == 1 else classB)(param1, param2) 在上面的例子里 classA 与 classB 是两个类，其中一个类的构造函数会被调用。 下面是另一个多个条件表达式链接起来用以计算最小值的例子： 12345678910def small(a, b, c): return a if a &lt;= b and a &lt;= c else (b if b &lt;= a and b &lt;= c else c)print(small(1, 0, 1))print(small(1, 2, 2))print(small(2, 2, 3))print(small(5, 4, 3))#Output#0 #1 #2 #3 我们甚至可以在列表推导中使用三元运算符： 123[m**2 if m &gt; 10 else m**4 for m in range(50)]#=&gt; [0, 1, 16, 81, 256, 625, 1296, 2401, 4096, 6561, 10000, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900, 961, 1024, 1089, 1156, 1225, 1296, 1369, 1444, 1521, 1600, 1681, 1764, 1849, 1936, 2025, 2116, 2209, 2304, 2401] 贴士#4. 多行字符串基本的方式是使用源于 C 语言的反斜杠： 12345multiStr = \"select * from multi_row \\where row_id &lt; 5\"print(multiStr)# select * from multi_row where row_id &lt; 5 另一个技巧是使用三引号： 123456multiStr = \"\"\"select * from multi_row where row_id &lt; 5\"\"\"print(multiStr)#select * from multi_row #where row_id &lt; 5 上面方法共有的问题是缺少合适的缩进，如果我们尝试缩进会在字符串中插入空格。所以最后的解决方案是将字符串分为多行并且将整个字符串包含在括号中： 123456multiStr= (\"select * from multi_row \" \"where row_id &lt; 5 \" \"order by age\")print(multiStr)#select * from multi_row where row_id &lt; 5 order by age 贴士#5. 存储列表元素到新的变量中我们可以使用列表来初始化多个变量，在解析列表时，变量的数目不应该超过列表中的元素个数：【译者注：元素个数与列表长度应该严格相同，不然会报错】 123456testList = [1,2,3]x, y, z = testListprint(x, y, z)#-&gt; 1 2 3 贴士#6. 打印引入模块的文件路径如果你想知道引用到代码中模块的绝对路径，可以使用下面的技巧： 12345678import threading import socketprint(threading)print(socket)#1- &lt;module 'threading' from '/usr/lib/python2.7/threading.py'&gt;#2- &lt;module 'socket' from '/usr/lib/python2.7/socket.py'&gt; 贴士#7. 交互环境下的 “_” 操作符这是一个我们大多数人不知道的有用特性，在 Python 控制台，不论何时我们测试一个表达式或者调用一个方法，结果都会分配给一个临时变量： _（一个下划线）。 123456&gt;&gt;&gt; 2 + 13&gt;&gt;&gt; _3&gt;&gt;&gt; print _3 “_” 是上一个执行的表达式的输出。 贴士#8. 字典/集合推导与我们使用的列表推导相似，我们也可以使用字典/集合推导，它们使用起来简单且有效，下面是一个例子： 12345678testDict = &#123;i: i * i for i in xrange(10)&#125; testSet = &#123;i * 2 for i in xrange(10)&#125;print(testSet)print(testDict)#set([0, 2, 4, 6, 8, 10, 12, 14, 16, 18])#&#123;0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81&#125; 注：两个语句中只有一个 &lt;:&gt; 的不同，另，在 Python3 中运行上述代码时，将 &lt;xrange&gt; 改为 &lt;range&gt;。 贴士#9. 调试脚本我们可以在 &lt;pdb&gt; 模块的帮助下在 Python 脚本中设置断点，下面是一个例子： 12import pdbpdb.set_trace() 我们可以在脚本中任何位置指定 &lt;pdb.set_trace()&gt; 并且在那里设置一个断点，相当简便。 贴士#10. 开启文件分享Python 允许运行一个 HTTP 服务器来从根路径共享文件，下面是开启服务器的命令： # Python 21python -m SimpleHTTPServer # Python 31python3 -m http.server 上面的命令会在默认端口也就是 8000 开启一个服务器，你可以将一个自定义的端口号以最后一个参数的方式传递到上面的命令中。 贴士#11. 检查 Python 中的对象我们可以通过调用 dir() 方法来检查 Python 中的对象，下面是一个简单的例子： 1234test = [1, 3, 5, 7]print( dir(test) )['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__delslice__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getslice__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__setslice__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort'] 贴士#12. 简化 if 语句我们可以使用下面的方式来验证多个值：1if m in [1,3,5,7]: 而不是： 1if m==1 or m==3 or m==5 or m==7: 或者，对于 in 操作符我们也可以使用 ‘{1,3,5,7}’ 而不是 ‘[1,3,5,7]’，因为 set 中取元素是 O(1) 操作。 贴士#13. 运行时检测 Python 版本当正在运行的 Python 低于支持的版本时，有时我们也许不想运行我们的程序。为达到这个目标，你可以使用下面的代码片段，它也以可读的方式输出当前 Python 版本： 12345678910import sys#Detect the Python version currently in use.if not hasattr(sys, \"hexversion\") or sys.hexversion != 50660080: print(\"Sorry, you aren't running on Python 3.5n\") print(\"Please upgrade to 3.5.n\") sys.exit(1)#Print Python version in a readable format.print(\"Current Python version: \", sys.version) 或者你可以使用 sys.version_info &gt;= (3, 5) 来替换上面代码中的 sys.hexversion != 50660080，这是一个读者的建议。 在 Python 2.7 上运行的结果： 1234567Python 2.7.10 (default, Jul 14 2015, 19:46:27)[GCC 4.8.2] on linuxSorry, you aren't running on Python 3.5Please upgrade to 3.5. 在 Python 3.5 上运行的结果： 123456Python 3.5.1 (default, Dec 2015, 13:05:11)[GCC 4.8.2] on linuxCurrent Python version: 3.5.2 (default, Aug 22 2016, 21:11:05) [GCC 5.3.0] 贴士#14. 组合多个字符串如果你想拼接列表中的所有记号，比如下面的例子： 1&gt;&gt;&gt; test = ['I', 'Like', 'Python', 'automation'] 现在，让我们从上面给出的列表元素新建一个字符串：1&gt;&gt;&gt; print ''.join(test) 贴士#15. 四种翻转字符串/列表的方式# 翻转列表本身12345testList = [1, 3, 5]testList.reverse()print(testList)#-&gt; [5, 3, 1] # 在一个循环中翻转并迭代输出123456for element in reversed([1,3,5]): print(element)#1-&gt; 5#2-&gt; 3#3-&gt; 1 # 一行代码翻转字符串1\"Test Python\"[::-1] 输出为 “nohtyP tseT” # 使用切片翻转列表1[1, 3, 5][::-1] 上面的命令将会给出输出 [5,3,1]。 #贴士#16. 玩转枚举使用枚举可以在循环中方便地找到（当前的）索引： 1234567testlist = [10, 20, 30]for i, value in enumerate(testlist): print(i, ': ', value)#1-&gt; 0 : 10#2-&gt; 1 : 20#3-&gt; 2 : 30 贴士#17. 在 Python 中使用枚举量我们可以使用下面的方式来定义枚举量： 123456789101112class Shapes: Circle, Square, Triangle, Quadrangle = range(4)print(Shapes.Circle)print(Shapes.Square)print(Shapes.Triangle)print(Shapes.Quadrangle)#1-&gt; 0#2-&gt; 1#3-&gt; 2#4-&gt; 3 贴士#18. 从方法中返回多个值并没有太多编程语言支持这个特性，然而 Python 中的方法确实（可以）返回多个值，请参见下面的例子来看看这是如何工作的： 12345678910# function returning multiple values.def x(): return 1, 2, 3, 4# Calling the above function.a, b, c, d = x()print(a, b, c, d)#-&gt; 1 2 3 4 贴士#19. 使用 * 运算符（splat operator）来 unpack 函数参数 运算符（splat operator）提供了一个艺术化的方法来 unpack 参数列表，为清楚起见请参见下面的例子：12345678910111213def test(x, y, z): print(x, y, z)testDict = &#123;'x': 1, 'y': 2, 'z': 3&#125; testList = [10, 20, 30]test(*testDict)test(**testDict)test(*testList)#1-&gt; x y z#2-&gt; 1 2 3#3-&gt; 10 20 30 贴士#20. 使用字典来存储选择操作我们能构造一个字典来存储表达式：1234567stdcalc = &#123; 'sum': lambda x, y: x + y, 'subtract': lambda x, y: x - y&#125;print(stdcalc['sum'](9,3))print(stdcalc['subtract'](9,3)) 贴士#21. 一行代码计算任何数的阶乘Python 2.x.1234result = (lambda k: reduce(int.__mul__, range(1,k+1),1))(3)print(result)#-&gt; 6 Python 3.x.12345import functoolsresult = (lambda k: functools.reduce(int.__mul__, range(1,k+1),1))(3)print(result)#-&gt; 6 贴士#22. 找到列表中出现最频繁的数1234test = [1,2,3,4,2,2,3,1,4,4,4]print(max(set(test), key=test.count))#-&gt; 4 贴士#23. 重置递归限制Python 限制递归次数到 1000，我们可以重置这个值： 12345678910import sysx=1001print(sys.getrecursionlimit())sys.setrecursionlimit(x)print(sys.getrecursionlimit())#-&gt; 1000#-&gt; 1001 请只在必要的时候采用上面的技巧。 贴士#24. 检查一个对象的内存使用在 Python 2.7 中，一个 32 比特的整数占用 24 字节，在 Python 3.5 中占用 28 字节。为确定内存使用，我们可以调用 getsizeof 方法： 在 Python 2.7 中 12345import sysx=1print(sys.getsizeof(x))#-&gt; 24 在 Python 3.5 中 12345import sysx=1print(sys.getsizeof(x))#-&gt; 28 贴士#25. 使用 slots 来减少内存开支你是否注意到你的 Python 应用占用许多资源特别是内存？有一个技巧是使用 slots 类变量来在一定程度上减少内存开支。 1234567891011121314151617181920212223242526import sysclass FileSystem(object): def __init__(self, files, folders, devices): self.files = files self.folders = folders self.devices = devicesprint(sys.getsizeof( FileSystem ))class FileSystem1(object): __slots__ = ['files', 'folders', 'devices'] def __init__(self, files, folders, devices): self.files = files self.folders = folders self.devices = devicesprint(sys.getsizeof( FileSystem1 ))#In Python 3.5#1-&gt; 1016#2-&gt; 888# 经测试 在我的 win10 python27 中跑出的结果是：#1-&gt; 452#2-&gt; 512 很明显，你可以从结果中看到确实有内存使用上的节省，但是你只应该在一个类的内存开销不必要得大时才使用 slots。只在对应用进行性能分析后才使用它，不然地话，你只是使得代码难以改变而没有真正的益处。 所以，这种比较方式是不那么让人信服的，使用 slots 主要是用以限定对象的属性信息，另外，当生成对象很多时花销可能会小一些，具体可以参见 python 官方文档: The slots declaration takes a sequence of instance variables and reserves just enough space in each instance to hold a value for each variable. Space is saved because dict is not created for each instance. 也可参考廖雪峰老师的 使用slots 贴士#26. 使用 lambda 来模仿输出方法12345import syslprint=lambda *args:sys.stdout.write(\" \".join(map(str,args)))lprint(\"python\", \"tips\",1000,1001)#-&gt; python tips 1000 1001 贴士#27. 从两个相关的序列构建一个字典123456t1 = (1, 2, 3)t2 = (10, 20, 30)print(dict (zip(t1,t2)))#-&gt; &#123;1: 10, 2: 20, 3: 30&#125; 贴士#28. 一行代码搜索字符串的多个前后缀12345print(\"http://www.google.com\".startswith((\"http://\", \"https://\")))print(\"http://www.google.co.uk\".endswith((\".com\", \".co.uk\")))#1-&gt; True#2-&gt; True 贴士#29. 不使用循环构造一个列表12345import itertoolstest = [[-1, -2], [30, 40], [25, 35]]print(list(itertools.chain.from_iterable(test)))#-&gt; [-1, -2, 30, 40, 25, 35] 贴士#30. 在 Python 中实现一个真正的 switch-case 语句下面的代码使用一个字典来模拟构造一个 switch-case。 12345678910def xswitch(x): return xswitch._system_dict.get(x, None)xswitch._system_dict = &#123;'files': 10, 'folders': 5, 'devices': 2&#125;print(xswitch('default'))print(xswitch('devices'))#1-&gt; None#2-&gt; 2 结语 – 给程序员的基本 Python 贴士与技巧 我们希望上述的基本的 Python 贴士与技巧可以帮助你快速地 &amp; 有效地完成任务，你可以在作业与项目中使用他们。 听从你的回馈会使我们变得更好，所以请分享你的想法。 你甚至可以要求我们写一个你选择的话题，我们会将其加入到我们的写作列表中。【*】 最后，如果你喜欢这个文章，请在社交媒体上分享给你的朋友。 坚持学习， TechBeamers. 本文由 伯乐在线 - 阿喵 翻译，艾凌风 校稿。英文出处：Meenakshi Agarwal。","tags":[{"name":"python","slug":"python","permalink":"http://ev1l.cn/tags/python/"}]},{"title":"一次反人类的自我对话","date":"2017-04-12T17:19:49.000Z","path":"2017/04/13/jitang_gudu/","text":"前几天工作的压力还是蛮大的，好在只要是你想解决，问题总归是会解决的。这段日子算是难得地小憩了一下。与外界断了联系，每天跑跑步，健健身，不太靠谱的注意下自己的饮食，听听音乐，看看电影，有一集没一集的追追美剧，不紧不慢的上下班，看看牛人写的鸡汤(《黑客与画家》)。跳出到紧张的节奏之外（其实闲下来感觉还是蛮紧张的……），也算是享受享受孤独，还是很惬意。 鸡汤《黑客与画家》没读这本书之前，不知道里面讲的到底是什么。单是书名，就够我浮想联翩一下午的了。原因吗？ 我对黑客有种特殊的感情。会画画的女孩很迷人。 第一点么，感情酝酿到位了，资料也准备到位了，然而行动就……打自己脸的事情先跳过吧，有缘再讲……至于第二点么，会画画的女孩很迷人。会画画的女孩总是不缺少一双发现美的眼睛，做事也不缺少条理性。前前后后，遇见过3个会画画的女孩子。但我的初恋也是我的前任的她却不会…… 与初恋在初中相识。与X在高中相识。与Y在大学相识。与Z在工作后通过Internet相识。 我的人生还是蛮幸运的，在不同的阶段，都遇到了那些优秀又迷人的女孩子。即使相隔万里，也真诚的祝福你们过得快乐。我这种天性孤独的人，确实比较适合在四下无人的夜里，默默的凝望着繁星送上一句想念就好。 《黑客与画家》这本书呢，是硅谷创业之父的文集，多记载了个人对某些事物见解，而不是技术类书籍。 是一本翻开看内容时不停的刷新我的某些认知并折磨着脑细胞的书。建议有脑子的人都读一读。 孤独感谢那些从你生命中消失的人如果一定要对他们说句话，我其实想说谢谢。无论我们当初怎么相识，又因何故分离，感谢你们当初的陪伴，也谢谢你们最后把时间还给了我。 时间是我们的一生中唯一一个避不开的东西，无论我今天是什么样子，都是已经过去的每一分每一秒换来的。这段时间里，我正在努力的变得更优秀一点，也期盼着遇见像当初的你们于当初的我来讲那样优秀迷人的人。 我总是乐于承认自己不够优秀，也偶尔会被同样不够优秀的人拉住衣角问“你已经很好了，为什么还不知足？”停不下来也许是心虚吧，怕遇见更好的你，却不是配得上更好的你的自己。 拿孤独来讲，如果你害怕孤独，那你更应该不停的让自己变得优秀。举几个例子 你害怕孤独，同时你喜欢一个人，但是你并没有优秀到对方可以凝望着你的脸庞眼神中充满了迷恋说出喜欢你的地步，你该怎么做？是选择一个喜欢你的人？还是让你喜欢的人也喜欢上你？ 你害怕孤独，在你喜欢的和喜欢你的之间，你选择了后者。后者为了让你喜欢上自己不停的在努力。随着时间的推移，你如何保证在这个从未停止转动的世界里，喜欢你的人不会遇到比你更优秀的人？而对方又如何寄希望与你，让对方相信选择你是正确的，你对对方来说永远都是哪个特别的人？ 你害怕孤独，你相信如果跟一个优秀的人在一起，一定会努力变成一个对他来说既特别又迷人的人。可优秀的人为什么要跟一个一眼就能从20岁看到70岁的人在一起？若你保证一定会为了对方也努力变成优秀的人，优秀的人时间成本很高，对方如何相信你有这样的能力以至于最后不是在浪费时间？ 孤独与时间时间是唯一避不开的东西，而孤独与时间的组合可能是让你成长的最好的条件。 我们做什么事情都要花时间，谈恋爱，逛街，旅行，与朋友聊天，学习，健身，玩手机，发呆，睡觉，培养感情等等。这么多的事情把我们每天的时间挤得满满的。父母担心打扰到你以至于每天9点以后才敢小心翼翼的打个电话问你是不是在忙，而你总是用一会还有事为理由挂断电话，但是接电话之前你却花了一个多小时刷微博，花了几十分钟在微信上跟没见过面的人从天涯聊到了海角，从海角聊到了海角七号。 孤独是什么，孤独也许是你抛弃了上面的一部分事情后，因为时间处于空档而产生的感觉。那孤独带来了什么？孤独带来了时间，时间的长短取决于你抛弃的事情会占用你多少时间，你抛弃的越多，你的待分配时间越多，相应的，你就会越孤独。 孤独给了你重新分配时间的机会，让你有机会把时间分配到更应该分配的事情上面。若你想谈恋爱，就把和朋友聊天的时间尽量压缩，很多人奇怪，为什么这么说，朋友难道不重要吗？如果你想每天都沉浸在人际交往里，我不反对你保持与朋友聊天这个习惯，如果你想谈了恋爱以后因没有时间提升自身而一直毫无进步，我也不反对。 若你把时间用在对未来有帮助的地方，我相信你自己会感谢你自己的，别着急。 做一个The One别相信年轻人的花言巧语，他们在甩你的时候跟当初决定在一起的时候抱着相同的决心。决定跟你在一起时对周围的人不削一顾，决定跟别人在一起的时候，你也一样会被不削一顾。硬要说有所区别，可能是你比其他的那些被不削一顾的人更让人讨厌吧。 之前跟他人说起过，两个人在一起的根本原因是吸引。在一起的过程类似于你刚买了一个新的ipad，若ipad内的app一成不变，app的内容也一成不变，等你全看过了，也就不再那么感兴趣了，这时如果别人有一个新的ipad，里面的app也都是新的，我不确定所有人都能在有机会接触的情况下不去玩一玩新的。至少读这篇文章的你会忍不住。 两个人想一直在一起，双方都应该是那个既吸引着对方又对对方来说是最特别的那个人。 这个世界，优秀的人有很多，你不知道你喜欢的人有哪一点也吸引着这些人。而相比之下，你吸引人的那一点不一定比这些人迷人，即使是那一点同样吸引人，但是其他点你也很可能比不上他们。 若你每天在心里念叨着喜欢着那个人，但是你却未曾让自己变得更优秀，相信我，下辈子对方也不会回头看你一眼。在你停在原地的情况下，对方唯一可能喜欢你的机会是第一次遇见你时，那时的你在对方的心目中是最好的样子，不管是出丑还是擦肩都一样。而你已经失去这次机会了。若你明知如此，还是不努力，也还是念叨着喜欢对方，对不起，不光是你喜欢的人，你的朋友也会相继离开你。 试着做一个在对方眼里的 The One 也许你已经自然而然的成功了：） 可替代性强的你，若是被抛弃了，不必伤心，本该如此的。 朋友你懂得这个世界总是拿价值去衡量一切，周围的人会不自觉的给你打上标签，来表明你是否有价值。读书的时候会看成绩，毕业了以后看薪资。你有幸得到了一群朋友，他们不计较你的标签，他们很真诚的与你交流。你感到心里很温暖，觉得这真是上天给你的礼物。你很珍惜他们。但是你却不曾想过为他们创造什么价值。 若你仔细想想，因为他们是你的朋友，你应该为他们产生更多的价值，而不是每天喊着有你真好。喊三遍以后，可能就不太灵了。你的朋友同样也会结识另一部分朋友，人的时间是有限的，若有些人能比你为他做的更多，而你除了先认识那个人以外毫无优势的话……可能更可怕的是你连时间优势都没有……所以你曾经的一部分朋友离开了你。我不想说的这么现实，但是事实就是如此。 那若我们现阶段无法创造直观的价值也不想就这样错过机会怎么办？这个问题跟创业公司找投资人拉投资是一样的——画饼。对准投资人感兴趣的点，让对方看见你现在的状态，你需要的是什么，你的规划，你的行动力以及你的潜力。若你是投资人，前两种大部分人刚创业的人都差不多，而决定了对方能否给你信任的是你的规划，你的行动力和你的潜力。嗯，投资人是否感兴趣才是最后要特别提出来的，你再好没兴趣也不会有结果。 是的，即使你天真到不愿相信这种复杂的感情能被量化到用另一种理念来代替，但总会有离开的人拎着棒子打醒你，告诉你你对他已经没有用了。 若你的朋友进步很快，你还停在原地，你又想跟他们做朋友，若在对方眼里没有你对他有比山还高的恩情，你可能只有变得越来越优秀能互相创造更多的价值这一种途径了。 不要和那些连看好你什么都不知道的人做朋友，因为你同样不知道对方离开的原因到底是什么。 异性铁哥们如果是我的异性铁哥们，我把所有的机会都给她去变得更迷人，让她在找到更好的人的路上，偶尔聊个天，关心一下，有时间大家一起出去疯一疯，异性铁哥们虽然类似同性铁哥们，但还是有区别的，伪娘都跟闺蜜擦枪走火了，你还能相信谁？ 就在那个被酒杯里的酒摇晃着的夜晚，就在又喝了一杯酒低头用力的咽下去又抬起头的那一刻，就那一瞬间，就那一眼望向你，就那头小鹿突然脚抽筋没站稳撞了下你铁哥们左心房……后面你脑补能力应该不比我差：） 那些打算找个男女朋友的同时，还跟另一个异性打着铁哥们旗号，两个人满世界high的人，拜托省省吧。你最后会发现，你并不需要男女朋友，除非你只是想找个牵手打kiss开房的人，而铁哥们你不敢这样做（不然这个铁哥们也变成你的男女朋友了）。 你思考了一下，觉得不应该用铁哥们做不到的事为目的来找男女朋友，应该是男女朋友做，如果男女朋友做不到的，铁哥们做。比如男女朋友陪着你满世界high，一个人没意思了，男女朋友又在忙，就去找铁哥们high。问题来了，这样的定义，跟备胎差多少呢？你们的感情离其中一个人终于不敢寂寞还差多远呢？你的铁哥们这么陪着你high，你究竟浪费了他多少的青春呢？他把这些时间用在提升自己和自己的男女朋友身上，会不会让自己的感情状态更稳定，让自己更吸引人呢？你这么无视他人的时间，是不是有点自私？对方嘴上说着好啊好啊陪着你到处疯，难道真的不是因为喜欢你却又说不出口？ 难道真的不是潜意识里觉得陪伴才是最长情的告白？ 你说你了解你哥们，不会的，人家就是很闲。你确定他没有因为你推掉了之前安排好的时间？而青春这个债，你最后要怎么还？ 最后一句，对不起？谢谢？ 你又思考了一下，觉得我这个人有病。你能看到这，可能你也得吃点药。","tags":[{"name":"Leo","slug":"Leo","permalink":"http://ev1l.cn/tags/Leo/"}]},{"title":"UltraEdit、UltraCompare 等IDM产品注册机","date":"2017-02-10T10:20:07.000Z","path":"2017/02/10/UltraEdit_crack/","text":"注册机：IDM All Products KeyGen v3.6使用时间：2017-2-10注册产品：UltraEdit 23.20.0.43、UltraCompare 16.00.0.50 注册过程 官网或者百度软件中心下载最新版本的UltraEdit -&gt; 重新打开软件 -&gt; 断网（随便输入用户）激活 -&gt; 在注册机中选择对应软件并复制code1、code2 至注册机对应输入框后点击Generate -&gt; 把生成代码粘贴至软件相应输入框中 -&gt; 提交 下载方式 下载地址 备注 翻墙党 IDM All Products KeyGen v3.6 (填写邮箱，提交请求后会把下载链接发到你的邮箱中。) 墙内党-百度云 IDM All Products KeyGen v3.6 (提取码：2sas)","tags":[{"name":"工具","slug":"工具","permalink":"http://ev1l.cn/tags/工具/"}]},{"title":"昭奚旧草  2016-12-26","date":"2016-12-25T22:31:20.000Z","path":"2016/12/26/zhaoxijiucao/","text":"“他是我的心上人，这才是他做对的唯一的一件事。你瞧他不过如此，可是在我眼中，他却是天地至美。而天地至美，本无常主。所以，他迟迟不属于我，也不属于任何一个人。” 一夜未眠，伴着音乐工作，忽然放到这首音乐，把我从一块块代码中拉到了另一个世界。 可能是现实生活的稀松平常会让一个人无法抵抗逃离现实的诱惑，将自己置身于那个俯身便可阅尽众生轮回的世界，停泊在泼墨笔尖。 “有怪踩月而来，美如秋水，清如山河，生呆若木鸡，爱而不能忍，甚倾之。” 爱到何处，已不能忍受咫尺之距。甚倾之。生甚倾之。 从不知相思，安知相思死。 “我与梦中的小小姑娘说，等她长大了，便带她去看悬崖上的红花、海底的白珠，欢喜她欢喜到打仗吃酒读书抚琴都忍不住带到身边，山高水长过一辈子。”“然后呢？”“然后，她死在了长大嫁人的那一日。” 他让她住在他的心上，走到哪里便带到哪里，记忆有多久，她便有多么长寿。 但凡人命，皆由天意妄肆而定，我不入红尘，此生不驯。 我也曾备下三十三城嫁妆，预备嫁我价值连城的掌珠。 “奚山，什么是命？”“就是任你万念俱灰死而复生，日夜不停绝望哭泣，也依旧拿它没有办法的东西啊。得不到的就是得不到，那样东西卑鄙地诱惑着你，背对着你却几乎笑得喘不过气，它对所有有资格得到它的人共享欢愉，共分秘密，一同看戏，看着你，而后转头告诉那些人，瞧，那个小傻子，也妄想得到我呢。” 她欢喜他，叶公好龙，他爱着她，尾生抱柱。 我只是想再瞧你一瞧，我怕再也瞧你不到。 更始十九年一个夏日的清晨，我卜了一卦，卦象安宁，说你还在。这一卦是我人生中唯一一次错了。卦象如此平静，除了可能是你一直活着，还有一种可能——你已不在很久。 君当如何，妾当如何。君是乱臣，妾做贼子。 三娘低声道：“我与山君不同。我喜欢的人若是也喜欢我，便只能喜欢我一人。哪怕他喜欢旁的女子只是一时一日，我也断然不会让他好受。他喜欢我不能是最喜欢，更不能只是浅浅的喜欢，最喜欢时还有次喜欢，浅浅喜欢我那深深喜欢又给了谁？他只能喜欢我。” 我长不大了，却在变老。时间是永恒的，我却在消耗。没有人知道我在等什么，我也不必让他们知道。他们看到我是笑着的，可是我难过的时候除了不停呼吸，已经蠢到不知道该干什么。你若了解苍穹之宽阔，便明白我抬头仰望时的悲渺。仿佛我生下来就是这样孤零零的，仿佛到现在，我还是这一个我。 没有瞧见她的时候，天下倒还是个天下的模样，她死了，天下变成了一桩桩琐事。 从此我活着仅仅是为了熬完最后的日子，不管二十岁还是六十岁。 君心何坚决，到死无两意。 他一直等着，待到下辈子，他与她不亏不欠了，便莫要欢喜过甚，钟情过疾，骄傲过命，只是结个良缘，也能好聚好散。 打散的，寂寞之徒；忘却的，年岁偶驻。 我的爱比别人廉价，满了便溢，没什么可惜。因我知终有一日，它还会满。 那是她失去了许久的东西，这世上再无人知道了，可只有她，一直这样艰难地铭记着。哪怕失去了味觉，失去了感情， 变成了一粒草籽，一片乌云，也钻心刺骨地无法忘记。 她这样深切痛苦地思念着他，是思念教她走到今日。 我得宠溺他一生一世，做个他，像他待我那一辈子。惟愿他，此生便是那个前世懵懂的我，被钟爱，被安排。虽则天常有不测风云。 我也曾想，我若为天，该有多好，定善待他终生。 我若为天，他的磨难中总存一线希望，痛苦中还有转圜。这世上神话故事颇多，每一桩，都是我来演。我来做山，做海，做泥荷，做蝼蚁，苍天有束光可偷，我也偷来，予他做个冠带。你何必惊讶他竟不能处处识得我，也不必知道，这样的强制安排不是为了满足我的爱，而是为了想要他还能笑出来。 “须知万物皆有少年早衰之时，焉知我便强过谁？”“你是我的妻子，自然强过这世间千千万。” 她知道他必定曾经在很遥远很遥远的时候，抱她入怀，那样珍重，那样怜爱。那或许是他们的前世，只有她记得的前世 。人说讲虚妄之事是因无知，只有忍冬知道，她划定了一个虚无的前世，只是因为太想得到。 她说：“我就此消失，祈求奚山君夺去我在你脑海中的记忆，这样，你此生，便可如高岭之雪，不受玷污，成为第一等诸侯，得到第一等封邑，娶得第一等娇妻，福寿双全。”风起云涌，屏风渐渐随着风化，屏风内的那张干净的面庞也随着屏风一寸寸变成沙尘。 她说：“谢良辰，我知道你觉得我配不上你，不该奢望。可是，你何曾配得上过我那样的喜欢？故而，打从今天，从这一刻钟，从我们初初见面的那一眼，从夏虫鸣了，桃花散了，竹叶青了的时候算起，我们两不相欠。” 本是深闺梦中人，日头月头霞光雾霰万象变幻，自哂自嘲自污自怨不自量力，不过是，怕人听见。 你怨我欢喜得卑鄙，欢喜得浅薄，可是你前生，又爱我到如何，才教我今生从头清算，迎头一棒，鲜血淋漓，这样去还。 她死的那一日，天上飞来许多雀鸟，那鸟儿眼瞧着就要自由。他让人打落了所有的鸟儿，葬在她的坟前，祭奠她此生可贵的自由，他此生卑微的囚途。 百国男子老老少少，我瞧见谁，一错眼一恍惚，便总是隐约觉得他们五官血脉中或多或少都有一丝一毫像着你，他们并不是你，我寻不到你，可他们像你。 爱太执着，恨太浓烈，她旧时候都尝过，可待到来年，它们就长成了遗憾。旧时景色，旧时人情，旧时琳琅，旧时凋零。满目疮痍，不忍目睹。 人世本就是一场游戏，你若已然输了，便不要再让对手赢了。成全没有任何意义，成全让恨意滋生，爱自己是活着的唯一意义，灰烬之后，才是田园斜径，白云出岫。 我想死到山涧，天地之间无人寻到，连鸟兽都不去的地方。这样尸体就能慢慢腐烂消散，不用与这来去都匆匆的人生一般。听闻骨头化得慢一些，可以慢慢等，等到灵魂都变成这空气的一部分，便能融入这世间，同这世间一般污浊了。到时候，再也没有人，为了求取我拥有的最后一样东西，而哄骗我，同我说这世间存有许多真情的假话了。 卧夜坐起风雨，推窗广厦明烛。天也有十分心愿，宁可千万人顺心如意。到头来，磨难重重；换一人，白首不离。 我有没有告诉过你，你是我看过最好看的男子？就算有人比你好看，可那也与我没什么相干。我说我讨厌你的时候，其实在想，这样待你是讨厌你，等我控制不住，待你再好一些的时候，你便不会再惧怕我，只会觉得我只是从讨厌你变成喜欢你罢了。 而非，从深深喜欢你到深深爱慕你。 大昭明珠生得极美，他带着千方百计，阴谋阳策，堪堪呼喝随身内侍扶正发间的那顶珠冠，也只是一垂头，含笑落泪。再抬起头，已是一目千里。可是他还是来不及，好好地，好好看她一眼。 火焰从翠衣人的脚边慢慢蹿起，天上却浮现了明亮的霞光。男子眼中无情无欲，只剩下悲悯。他临风而立，狂风吹起翠色的长袖。他说：“既已如此，三娘，莫再回头。你我夫妻缘尽，你莫回头瞧我，我亦不再瞧你。我入仙道，你入轮回，你我，再无相见，再无回头之日。” “世间有人爱我，有人憎我，有人说我对，有人说我错，如此，我当听哪一句？”“有某说你对，是因你所说之事合他心意。有某说你错，是因你所做之事与他所想相悖。说你对的许是你说了他不敢说的，承担了他不敢承担的，故而爱你，故而对你击节称赞，说穿了实在酸涩。说你错的许是你真的错了，因你之错太过明显，已暴露在诸人之中，而诸人皆是知道真相之人，他们不语，暗自看你笑话，那直接说你错的许是憎你，但你应谢他直言这一回。” 她用一双眼望着苍天，与它对视。 她说:“我幼小的时候，曾求你仁慈，后来长大了，便不再求你，因为我通晓了人事，知道求你也无用。求你只会让你嘲弄我、轻鄙我，求你只会让你知道我的弱点，知道我在乎什么。我的孩儿们小时候，我都曾拉着他们的小手，站在空旷的天地上，向你叩拜，我求你保佑他们好好长大，不要像我一样，我求你赐给他们快乐而勇敢的心，无论命运怎么捉弄都不会丧失希望。我所要的不多，并……不多啊。是啊，我输了，你赢了。我敌不过命运，我以人智，妄想换天。可是，那又如何？那又能怎样！” 先时我不信人间何物是长久的，亦总觉人与畜生无有不同，因人一生如此短暂，悟到什么，也只剩来不及。 “他是我的心上人，这才是他做对的唯一的一件事。你瞧他不过如此，可是在我眼中，他却是天地至美。而天地至美，本无常主。所以，他迟迟不属于我，也不属于任何一个人。” 你觉得活着费力，任凭谁也没好过多少。何苦生为人，人就是这样苦，你倘有本事，下辈子便托生为一块石头，那才妙。 我可能不曾告诉过你，我有一个哥哥，我那个哥哥死了。对，每个人都会死，他与别的人都一样，他也死了，他说他二十岁的时候，会送我嫁给这世上最好看的男子，可我等了三百年，却再也盼不到他二十岁了。但我想，我一定得达成他的愿望，我得嫁给这世上最好看的男子，我要我的夫君万世其昌，我要你好好的，好好的子孙满堂。 天下甚美。我还肯爱这山河，只是因为他还热切地爱着河山。 文中句子取自：《昭奚旧草》 摘抄：愿以百年挽朝夕","tags":[{"name":"音乐","slug":"音乐","permalink":"http://ev1l.cn/tags/音乐/"},{"name":"Leo","slug":"Leo","permalink":"http://ev1l.cn/tags/Leo/"}]},{"title":"你需要一个老头，帮助你理解下 Python 中的 yield","date":"2016-12-14T08:01:01.000Z","path":"2016/12/14/python_yield1/","text":"题外话 最初接触 Python 这门语言的时候，看的是《Python 核心编程》 迷迷糊糊的把 yield 这里看过去了，知道这个东西是用来造一个生成器用的，就一带而过了，日后的搬砖过程中也不知道怎么用这个家伙事儿。 我比较笨，学东西讨厌文档型说明（看不懂QAQ）。所以总是自己花很长时间去加工适合我的食物。 说起 yield，那这到底是个什么玩意？准备好了，我要开始背课文了：……从小脑袋不好使，记不住……还是编故事吧： 有个叫斐波那契的老头（也可能是女的，跟我有什么关系），提出了一个（不明白他搞出这东西要干啥的）数列定义（斐波那契数列）： 有一串数字，前两个是1，从第三个开始，每个数字都是它前两位数字的和。（1, 1, 2, 3, 5, 8, 13……） 提出定义的人我可以理解为他无聊，但是后来一群抠脚大汉开始对第N个数是多少那么感兴趣是什么鬼？这玩意算出来能干啥？（不知道） 不行，我也要凑热闹。（koujiao……） 123456def fab(max): n, a, b = 0, 0, 1 while n &lt; max: print b a, b = b, a + b n = n + 1 好，跑一下试试。123456&gt;&gt;&gt; fab(5)11235 结果是对的，你以为这就完了？隔壁王叔叔表示小伙子你这个写的有点问题啊，你这个直接print出来的，只能给我看，不能让我直接拿来用啊（你用它能干嘛？[手动黑人问号]）好，那就听您老的，给你返回一个 List 让你用（？？？）。12345678def fab(max): n, a, b = 0, 0, 1 list = [] while n &lt; max: list.append(b) a, b = b, a + b n = n + 1 return list 来，试一下。12345678&gt;&gt;&gt; for n in fab(5):... print n...11235 隔壁王叔叔的丈母娘（跟直系亲属姥姥不是一个人，谢谢)表示，小伙子你这个程序太特么占内存了，我输入大一点，这个List占用的内存都够我玩刺客信条大革命了（excuse me??)。 性能优化如果对python有一些了解的话，我们能很自然的想到一个经常拿来装逼的东西xrange。1234567# 1for i in range(1000): pass# 2for i in xrange(1000): pass 上面的两种写法，第一种是直接生成 1000个元素的List，相当于一次性给你一年的生活费。 而第二种是每次循环用到的时候给你一个，再用到再给你一个，可以理解为他有一个算式，每次你找他要钱他都要当场算算，然后给你一天的生活费。那用第二种方法吧。（看起来很扣的样子） 好，实现一个。12345678910111213141516class Fab(object): def __init__(self, max): self.max = max self.n, self.a, self.b = 0, 0, 1 def __iter__(self): return self def next(self): if self.n &lt; self.max: r = self.b self.a, self.b = self.b, self.a + self.b self.n = self.n + 1 return r raise StopIteration() 基础差的看不懂的，其实上面的代码就是定义了一个算法，你每次问我要一个数，我就当场算一个数，不会像上一个版本直接返回给你一个List。我们来调用一下：12345678&gt;&gt;&gt; for n in Fab(5):... print n...11235 嗯，成功了，这个版本性能是有了，可是隔壁王叔叔的侄女看了看代码不愿意了，帅哥（为什么要说出来？）你这个程序看着太复杂了啊，本来那么简单的代码怎么写的这么复杂啊？你这个人好复杂啊。 很好小姑娘，你要是王叔叔，我特么把你家网线煮了。看在你说的挺有道理的份上（其实是长得好看），我看看能不能简单点。 来，我们用一种高逼格的东西，兼顾简洁与性能，嘤嘤嘤。1234567def fab(max): n, a, b = 0, 0, 1 while n &lt; max: yield b # print b a, b = b, a + b n = n + 1 跟最初的第一个版本很像，注释掉了print b这句话，加上了 yield b。这里我们先调用下，看看结果。12345678&gt;&gt;&gt; for n in fab(5):... print n...11235 吹牛B模式已开启ok, 现在来回想下我们一路走过来，从最初的版本到使用yield之前，经历了哪些改动？仔细对照第一次的例子和这个使用yield的例子，好像差不多？再看看我们测试结果的代码有什么不同。就是这里了123456# 第一个例子fab(5)# yield例子for n in fab(5) print n 发现问题了吗？ fab(max) 函数中同样使用循环 一个使用 yield，另一个使用 print 打印 yield 例子，需要自己循环调用才能一个一个打印出来 这里我们推测yield使用上的特点： 暂停函数运行（要循环调用才管用） 再次调用能从上次暂停的地方继续执行函数（数列是连续的） 函数的每次运行都是遇到 yield 就停止并返回迭代值，下次再用时继续 对不起我编不下去了 据说还有更强大的使用方式，下次有机会研究研究写个续吧：） 隔壁王叔叔的儿子的小姨子表示小伙子，你再努努力，我就跟你跑了。 例子取自：廖雪峰-Python yield使用浅析","tags":[{"name":"python","slug":"python","permalink":"http://ev1l.cn/tags/python/"}]},{"title":"记python的一个坑","date":"2016-12-01T08:55:10.000Z","path":"2016/12/01/python_1/","text":"之前 python 的 server 出过一次问题，总是异常丢失数据。查日志也分析不出问题。 很困扰，最后一层一层找，发现是数据库返回的数据有重复列，到python端因为采用的是 index + data 分开存的方式（index: {name:1, age:2}, data:{‘zhangsan’, 23} 这样的两个集合），两个重复列名会导致index的对应出问题（字典无法存在两个相同 key）。我的问题是 index 的索引值超出了 data 的长度。 问题找到后，数据库端存储过程修改正确后这个奇怪的现象被我忽略了。后来今天看到了这么一段： 以下代码将输出什么?12list = ['a', 'b', 'c', 'd', 'e']print list[10:] 答案 以上代码将输出 []，并且不会导致一个 IndexError。 正如人们所期望的，试图访问一个超过列表索引值的成员将导致 IndexError（比如访问以上列表的 list[10]）。尽管如此，试图访问一个列表的以超出列表成员数作为开始索引的切片将不会导致 IndexError，并且将仅仅返回一个空列表。 一个讨厌的小问题是它会导致出现 bug ，并且这个问题是难以追踪的，因为它在运行时不会引发错误。 这原来是面试题里的送分题……这就尴尬了……","tags":[{"name":"python","slug":"python","permalink":"http://ev1l.cn/tags/python/"},{"name":"反人类","slug":"反人类","permalink":"http://ev1l.cn/tags/反人类/"}]},{"title":"分享一首歌","date":"2016-12-01T01:24:10.000Z","path":"2016/12/01/zyt/","text":"“是我先喜欢的你，所以你可以在我面前尽情的嚣张了。”“为什么要嚣张？” 你也许不会再出现在我的文字里了。其实你也有很久都没出现在我的文字里了：）","tags":[{"name":"音乐","slug":"音乐","permalink":"http://ev1l.cn/tags/音乐/"}]},{"title":"林宥嘉：她説好：)","date":"2016-11-29T15:56:00.000Z","path":"2016/11/29/林宥嘉：他説好：）/","text":"我不介意你慢动作我相信你正在与我相遇的路上马不停蹄所以当我拥抱整个世界的孤寂也像拥抱着你我不介意你慢动作也不介意这次先「擦肩而过」某天我们总会遇到对方然后说原来是你噢 -『致姗姗来迟的你』","tags":[{"name":"Leo","slug":"Leo","permalink":"http://ev1l.cn/tags/Leo/"}]}]